%implements s2_b0_4751q_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

static const int8_T c_b[9]{ 1, 0, 0, 0, 1, 0, 0, 0, 1 };
__m128d tmp_1;
__m128d tmp_2;
__m128d tmp_3;
__m128d tmp_4;
real_T ROBOT_Mass[108];
real_T ROBOT_Mass_data[108];
real_T Htm_data[48];
real_T ROBOT_g0[48];
real_T ROBOT_g0_data[48];
real_T invAd[36];
real_T m_0[36];
real_T m_1[36];
real_T m_2[36];
real_T J[18];
real_T J_data[18];
real_T J_data_0[18];
real_T J_data_1[18];
real_T J_data_2[18];
real_T J_data_3[18];
real_T J_data_4[18];
real_T J_data_5[18];
real_T J_pre[18];
real_T ROBOT_csi[18];
real_T dJ[18];
real_T dJ_data[18];
real_T dJ_data_0[18];
real_T dJ_pre[18];
real_T tmp_data_0[18];
real_T O_Htm[16];
real_T O_Htm_0[16];
real_T O_Htm_pre[16];
real_T J_pre_data[12];
real_T dJ_pre_data[12];
real_T tmp_data[12];
real_T E_tmp[9];
real_T S[9];
real_T b_I[9];
real_T b_I_0[9];
real_T b_S[9];
real_T b_tmp[9];
real_T b_y[9];
real_T c_S[9];
real_T c_y[9];
real_T d_y[9];
real_T jointOrigins[9];
real_T rtb_CC[9];
real_T tmp[9];
real_T tmp2[9];
real_T tmp2_0[9];
real_T tmp_0[9];
real_T inertialTwist[6];
real_T inertialTwist_pre[6];
real_T relTwist[6];
real_T rtb_Diff[3];
real_T rtb_TSamp[3];
real_T rtb_TSamp_f[3];
real_T rtb_g[3];
real_T rtb_g_data[3];
real_T rtb_pos_tcp[3];
real_T Iz;
real_T ROBOT_Mass_0;
real_T b_m;
real_T b_tmp_0;
real_T c_m;
real_T m;
real_T m_tmp;
real_T m_tmp_0;
real_T tmp2_1;
int32_T Htm_size[2];
int32_T J_pre_size[2];
int32_T J_size[2];
int32_T J_size_0[2];
int32_T J_size_1[2];
int32_T J_size_2[2];
int32_T J_size_3[2];
int32_T J_size_4[2];
int32_T J_size_5[2];
int32_T J_size_6[2];
int32_T ROBOT_Mass_size[2];
int32_T ROBOT_g0_size[2];
int32_T dJ_pre_size[2];
int32_T dJ_size[2];
int32_T dJ_size_0[2];
int32_T tmp_size[2];
int32_T tmp_size_0[2];
int32_T tmp_size_1[2];
int32_T tmp_size_2[2];
int32_T tmp_size_3[2];
int32_T tmp_size_4[2];
int32_T tmp_size_5[2];
int32_T O_Htm_tmp;
int32_T O_Htm_tmp_0;
int32_T i;
int32_T idxStart_4Row;
int32_T idxStart_6Row;
int32_T rtb_CC_0;
int32_T rtb_CC_size_idx_1;
boolean_T ROBOT_csi_0[3];
%closefile localVarDecl
%<SLibCG_TrackEO(5)>\
%<SLibCG_TrackEO(4)>\
%<SLibCG_TrackEO(3)>\
%<SLibCG_TrackEO(2)>\
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibCG_TrackEI(4)>\
%<SLibCG_TrackEI(3)>\
%<SLibCG_TrackEI(2)>\
%<SLibCG_TrackEI(1)>\
%<SLibCG_TrackEI(0)>\
/* {S!d4149}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4174}DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
 *  Inport: '<Root>/init_pos'
 */
if (planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_IC_LOAD != 0) {
    planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[0] = planar_robot3dof_FD0_U.init_pos[0];
    planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[1] = planar_robot3dof_FD0_U.init_pos[1];
    planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[2] = planar_robot3dof_FD0_U.init_pos[2];
}
/* {S!d4176}MATLAB Function: '<S1>/calcSysMatrices' incorporates:
 *  Inport: '<Root>/arm_length'
 *  Inport: '<Root>/arm_link_radius'
 *  Inport: '<Root>/rho'
 */
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_eye", ["E_tmp"], 0, 17, 0))>;
jointOrigins[0] = 0.0;
jointOrigins[3] = planar_robot3dof_FD0_U.arm_length[0];
jointOrigins[6] = planar_robot3dof_FD0_U.arm_length[1];
m_tmp = planar_robot3dof_FD0_U.arm_link_radius * planar_robot3dof_FD0_U.arm_link_radius;
m_tmp_0 = m_tmp * 3.1415926535897931;
m = m_tmp_0 * planar_robot3dof_FD0_U.arm_length[0] * planar_robot3dof_FD0_U.rho;
rtb_g[0] = planar_robot3dof_FD0_U.arm_length[0] / 2.0;
Iz = 0.25 * m * m_tmp + 0.083333333333333329 * m * (planar_robot3dof_FD0_U.arm_length[0] * planar_robot3dof_FD0_U.arm_length[0]);
b_m = m;
inertialTwist_pre[0] = 0.5 * m * m_tmp;
inertialTwist_pre[1] = Iz;
inertialTwist_pre[2] = Iz;
inertialTwist_pre[3] = 0.0;
inertialTwist_pre[4] = 0.0;
inertialTwist_pre[5] = 0.0;
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_diag", ["&inertialTwist_pre[0]", "tmp2"], 0, 17, 1))>;
/* {S!d4178}Outport: '<Root>/joint_pos' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
 */
planar_robot3dof_FD0_Y.joint_pos[0] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[0];
/* {S!d4180}Outport: '<Root>/joint_vel' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 */
planar_robot3dof_FD0_Y.joint_vel[0] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[0];
/* {S!d4182}MATLAB Function: '<S1>/calcSysMatrices' */
jointOrigins[1] = 0.0;
jointOrigins[2] = 0.0;
S[0] = 0.0;
/* {S!d4184}Outport: '<Root>/joint_pos' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
 */
planar_robot3dof_FD0_Y.joint_pos[1] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[1];
/* {S!d4186}Outport: '<Root>/joint_vel' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 */
planar_robot3dof_FD0_Y.joint_vel[1] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[1];
/* {S!d4188}MATLAB Function: '<S1>/calcSysMatrices' */
jointOrigins[4] = 0.0;
jointOrigins[5] = 0.0;
S[3] = 0.0;
/* {S!d4190}Outport: '<Root>/joint_pos' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
 */
planar_robot3dof_FD0_Y.joint_pos[2] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[2];
/* {S!d4192}Outport: '<Root>/joint_vel' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 */
planar_robot3dof_FD0_Y.joint_vel[2] = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[2];
/* {S!d4194}MATLAB Function: '<S1>/calcSysMatrices' incorporates:
 *  Inport: '<Root>/arm_length'
 *  Inport: '<Root>/rho'
 */
jointOrigins[7] = 0.0;
jointOrigins[8] = 0.0;
S[6] = 0.0;
S[1] = 0.0;
S[4] = 0.0;
S[7] = -rtb_g[0];
S[2] = -0.0;
S[5] = rtb_g[0];
S[8] = 0.0;
for (i = 0; i < 9; i++) {
    rtb_CC_0 = c_b[i];
    rtb_CC[i] = rtb_CC_0;
    b_tmp[i] = m * static_cast<real_T>(rtb_CC_0);
    b_y[i] = m * S[i];
}
m = m_tmp_0 * planar_robot3dof_FD0_U.arm_length[1] * planar_robot3dof_FD0_U.rho;
rtb_g[0] = planar_robot3dof_FD0_U.arm_length[1] / 2.0;
Iz = 0.25 * m * m_tmp + 0.083333333333333329 * m * (planar_robot3dof_FD0_U.arm_length[1] * planar_robot3dof_FD0_U.arm_length[1]);
c_m = m;
inertialTwist_pre[0] = 0.5 * m * m_tmp;
inertialTwist_pre[1] = Iz;
inertialTwist_pre[2] = Iz;
inertialTwist_pre[3] = 0.0;
inertialTwist_pre[4] = 0.0;
inertialTwist_pre[5] = 0.0;
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_diag", ["&inertialTwist_pre[0]", "b_I"], 0, 17, 2))>;
b_S[0] = 0.0;
b_S[3] = 0.0;
b_S[6] = 0.0;
b_S[1] = 0.0;
b_S[4] = 0.0;
b_S[7] = -rtb_g[0];
b_S[2] = -0.0;
b_S[5] = rtb_g[0];
b_S[8] = 0.0;
/* {E!d4149}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 0; i <= 6; i += 2) {
    /* {S!d4151}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4196}MATLAB Function: '<S1>/calcSysMatrices' */
    tmp_3 = _mm_loadu_pd(&rtb_CC[i]);
    tmp_4 = _mm_set1_pd(m);
    _mm_storeu_pd(&c_y[i], _mm_mul_pd(tmp_4, tmp_3));
    tmp_3 = _mm_loadu_pd(&b_S[i]);
    _mm_storeu_pd(&d_y[i], _mm_mul_pd(tmp_4, tmp_3));
    /* {E!d4151}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
}
/* {S!d4153}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4198}MATLAB Function: '<S1>/calcSysMatrices' incorporates:
 *  Inport: '<Root>/arm_length'
 *  Inport: '<Root>/rho'
 */
for (i = 8; i < 9; i++) {
    c_y[i] = m * rtb_CC[i];
    d_y[i] = m * b_S[i];
}
m = m_tmp_0 * planar_robot3dof_FD0_U.arm_length[2] * planar_robot3dof_FD0_U.rho;
rtb_g[0] = planar_robot3dof_FD0_U.arm_length[2] / 2.0;
Iz = 0.25 * m * m_tmp + 0.083333333333333329 * m * (planar_robot3dof_FD0_U.arm_length[2] * planar_robot3dof_FD0_U.arm_length[2]);
c_S[0] = 0.0;
c_S[3] = 0.0;
c_S[6] = 0.0;
c_S[1] = 0.0;
c_S[4] = 0.0;
c_S[7] = -rtb_g[0];
c_S[2] = -0.0;
c_S[5] = rtb_g[0];
c_S[8] = 0.0;
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_repmat", ["ROBOT_csi"], 0, 17, 3))>;
for (i = 0; i < 3; i++) {
    ROBOT_g0[12 * i] = E_tmp[3 * i];
    ROBOT_g0[12 * i + 1] = E_tmp[3 * i + 1];
    ROBOT_g0[12 * i + 2] = E_tmp[3 * i + 2];
    ROBOT_g0[i + 36] = 0.0;
}
ROBOT_g0[3] = 0.0;
ROBOT_g0[15] = 0.0;
ROBOT_g0[27] = 0.0;
ROBOT_g0[39] = 1.0;
for (i = 0; i < 3; i++) {
    ROBOT_g0[12 * i + 4] = E_tmp[3 * i];
    ROBOT_g0[12 * i + 5] = E_tmp[3 * i + 1];
    ROBOT_g0[12 * i + 6] = E_tmp[3 * i + 2];
    ROBOT_g0[i + 40] = jointOrigins[i + 3];
}
ROBOT_g0[7] = 0.0;
ROBOT_g0[19] = 0.0;
ROBOT_g0[31] = 0.0;
ROBOT_g0[43] = 1.0;
for (i = 0; i < 3; i++) {
    ROBOT_g0[12 * i + 8] = E_tmp[3 * i];
    ROBOT_g0[12 * i + 9] = E_tmp[3 * i + 1];
    ROBOT_g0[12 * i + 10] = E_tmp[3 * i + 2];
    ROBOT_g0[i + 44] = jointOrigins[i + 6];
}
ROBOT_g0[11] = 0.0;
ROBOT_g0[23] = 0.0;
ROBOT_g0[35] = 0.0;
ROBOT_g0[47] = 1.0;
/* {E!d4153}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 0; i <= 6; i += 2) {
    /* {S!d4155}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4200}MATLAB Function: '<S1>/calcSysMatrices' */
    tmp_3 = _mm_loadu_pd(&c_S[i]);
    _mm_storeu_pd(&jointOrigins[i], _mm_mul_pd(_mm_set1_pd(m), tmp_3));
    /* {E!d4155}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
}
/* {S!d4157}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4202}MATLAB Function: '<S1>/calcSysMatrices' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
 *  Inport: '<Root>/arm_length'
 */
for (i = 8; i < 9; i++) {
    jointOrigins[i] = m * c_S[i];
}
inertialTwist_pre[0] = 0.5 * m * m_tmp;
inertialTwist_pre[1] = Iz;
inertialTwist_pre[2] = Iz;
inertialTwist_pre[3] = 0.0;
inertialTwist_pre[4] = 0.0;
inertialTwist_pre[5] = 0.0;
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_diag", ["&inertialTwist_pre[0]", "tmp"], 0, 17, 4))>;
for (i = 0; i < 3; i++) {
    m_tmp = jointOrigins[i + 3];
    m_tmp_0 = jointOrigins[i];
    Iz = jointOrigins[i + 6];
    for (O_Htm_tmp = 0; O_Htm_tmp < 3; O_Htm_tmp++) {
        idxStart_4Row = 3 * O_Htm_tmp + i;
        rtb_CC_0 = 3 * O_Htm_tmp + 1;
        idxStart_6Row = 3 * O_Htm_tmp + 2;
        tmp2_0[idxStart_4Row] = tmp2[idxStart_4Row] - ((S[i + 3] * b_m * S[rtb_CC_0] + b_m * S[i] * S[3 * O_Htm_tmp]) + S[i + 6] * b_m * S[idxStart_6Row]);
        b_I_0[idxStart_4Row] = b_I[idxStart_4Row] - ((b_S[i + 3] * c_m * b_S[rtb_CC_0] + c_m * b_S[i] * b_S[3 * O_Htm_tmp]) + b_S[i + 6] * c_m * b_S[idxStart_6Row]);
        tmp_0[idxStart_4Row] = tmp[idxStart_4Row] - ((c_S[3 * O_Htm_tmp] * m_tmp_0 + c_S[rtb_CC_0] * m_tmp) + c_S[idxStart_6Row] * Iz);
        idxStart_4Row = 3 * i + O_Htm_tmp;
        rtb_CC_0 = 18 * i + O_Htm_tmp;
        ROBOT_Mass[rtb_CC_0] = b_tmp[idxStart_4Row];
        ROBOT_Mass[O_Htm_tmp + 18 * (i + 3)] = S[idxStart_4Row] * -b_m;
        ROBOT_Mass[rtb_CC_0 + 3] = b_y[idxStart_4Row];
    }
}
for (i = 0; i < 3; i++) {
    idxStart_4Row = (i + 3) * 18;
    ROBOT_Mass[idxStart_4Row + 3] = tmp2_0[3 * i];
    ROBOT_Mass[18 * i + 6] = c_y[3 * i];
    ROBOT_Mass[idxStart_4Row + 6] = b_S[3 * i] * -c_m;
    ROBOT_Mass[18 * i + 9] = d_y[3 * i];
    ROBOT_Mass[idxStart_4Row + 9] = b_I_0[3 * i];
    ROBOT_Mass[18 * i + 12] = rtb_CC[3 * i] * m;
    ROBOT_Mass[idxStart_4Row + 12] = c_S[3 * i] * -m;
    ROBOT_Mass[18 * i + 15] = jointOrigins[3 * i];
    ROBOT_Mass[idxStart_4Row + 15] = tmp_0[3 * i];
    rtb_CC_0 = 3 * i + 1;
    ROBOT_Mass[idxStart_4Row + 4] = tmp2_0[rtb_CC_0];
    ROBOT_Mass[18 * i + 7] = c_y[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 7] = b_S[rtb_CC_0] * -c_m;
    ROBOT_Mass[18 * i + 10] = d_y[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 10] = b_I_0[rtb_CC_0];
    ROBOT_Mass[18 * i + 13] = rtb_CC[rtb_CC_0] * m;
    ROBOT_Mass[idxStart_4Row + 13] = c_S[rtb_CC_0] * -m;
    ROBOT_Mass[18 * i + 16] = jointOrigins[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 16] = tmp_0[rtb_CC_0];
    rtb_CC_0 = 3 * i + 2;
    ROBOT_Mass[idxStart_4Row + 5] = tmp2_0[rtb_CC_0];
    ROBOT_Mass[18 * i + 8] = c_y[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 8] = b_S[rtb_CC_0] * -c_m;
    ROBOT_Mass[18 * i + 11] = d_y[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 11] = b_I_0[rtb_CC_0];
    ROBOT_Mass[18 * i + 14] = rtb_CC[rtb_CC_0] * m;
    ROBOT_Mass[idxStart_4Row + 14] = c_S[rtb_CC_0] * -m;
    ROBOT_Mass[18 * i + 17] = jointOrigins[rtb_CC_0];
    ROBOT_Mass[idxStart_4Row + 17] = tmp_0[rtb_CC_0];
}
std::memset(&S[0], 0, 9U * sizeof(real_T));
std::memset(&rtb_CC[0], 0, 9U * sizeof(real_T));
rtb_g[0] = 0.0;
rtb_g[1] = 0.0;
rtb_g[2] = 0.0;
std::memset(&J_pre[0], 0, 18U * sizeof(real_T));
std::memset(&dJ_pre[0], 0, 18U * sizeof(real_T));
for (i = 0; i < 6; i++) {
    inertialTwist_pre[i] = 0.0;
}
std::memset(&O_Htm_pre[0], 0, sizeof(real_T) << 4U);
O_Htm_pre[0] = 1.0;
O_Htm_pre[5] = 1.0;
O_Htm_pre[10] = 1.0;
O_Htm_pre[15] = 1.0;
tmp[0] = 0.0;
tmp[4] = 0.0;
tmp[8] = 0.0;
for (rtb_CC_0 = 0; rtb_CC_0 < 3; rtb_CC_0++) {
    idxStart_4Row = rtb_CC_0 << 2;
    idxStart_6Row = 6 * rtb_CC_0;
    m = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[rtb_CC_0];
    for (i = 0; i <= 4; i += 2) {
        tmp_3 = _mm_loadu_pd(&ROBOT_csi[idxStart_6Row + i]);
        _mm_storeu_pd(&relTwist[i], _mm_mul_pd(tmp_3, _mm_set1_pd(m)));
    }
    m_tmp = ROBOT_csi[idxStart_6Row + 3];
    ROBOT_csi_0[0] = (m_tmp == 0.0);
    m = ROBOT_csi[idxStart_6Row + 4];
    ROBOT_csi_0[1] = (m == 0.0);
    b_m = ROBOT_csi[idxStart_6Row + 5];
    ROBOT_csi_0[2] = (b_m == 0.0);
    if (%<(SLibCGCallSubFcn("planar_robot3dof_FD0_all", ["ROBOT_csi_0"], 0, 17, 5))>) {
        m = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[rtb_CC_0];
        for (i = 0; i < 3; i++) {
            O_Htm_tmp_0 = i << 2;
            O_Htm[O_Htm_tmp_0] = E_tmp[3 * i];
            O_Htm[O_Htm_tmp_0 + 1] = E_tmp[3 * i + 1];
            O_Htm[O_Htm_tmp_0 + 2] = E_tmp[3 * i + 2];
            O_Htm[i + 12] = ROBOT_csi[idxStart_6Row + i] * m;
        }
        O_Htm[3] = 0.0;
        O_Htm[7] = 0.0;
        O_Htm[11] = 0.0;
        O_Htm[15] = 1.0;
    } else {
        jointOrigins[0] = 0.0;
        jointOrigins[3] = -b_m;
        jointOrigins[6] = m;
        jointOrigins[1] = b_m;
        jointOrigins[4] = 0.0;
        jointOrigins[7] = -m_tmp;
        jointOrigins[2] = -m;
        jointOrigins[5] = m_tmp;
        jointOrigins[8] = 0.0;
        m = std::sin(planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[rtb_CC_0]);
        Iz = std::cos(planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[rtb_CC_0]);
        for (i = 0; i < 3; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 3; O_Htm_tmp++) {
                tmp2[i + 3 * O_Htm_tmp] = (jointOrigins[3 * O_Htm_tmp + 1] * jointOrigins[i + 3] + jointOrigins[3 * O_Htm_tmp] * jointOrigins[i]) + jointOrigins[3 * O_Htm_tmp + 2] * jointOrigins[i + 6];
            }
        }
        for (i = 0; i < 3; i++) {
            O_Htm_tmp_0 = i << 2;
            O_Htm[O_Htm_tmp_0] = (jointOrigins[3 * i] * m + tmp2[3 * i] * (1.0 - Iz)) + E_tmp[3 * i];
            O_Htm_tmp = 3 * i + 1;
            O_Htm[O_Htm_tmp_0 + 1] = ((1.0 - Iz) * tmp2[O_Htm_tmp] + jointOrigins[O_Htm_tmp] * m) + E_tmp[O_Htm_tmp];
            O_Htm_tmp = 3 * i + 2;
            O_Htm[O_Htm_tmp_0 + 2] = ((1.0 - Iz) * tmp2[O_Htm_tmp] + jointOrigins[O_Htm_tmp] * m) + E_tmp[O_Htm_tmp];
            O_Htm[i + 12] = 0.0;
        }
        O_Htm[3] = 0.0;
        O_Htm[7] = 0.0;
        O_Htm[11] = 0.0;
        O_Htm[15] = 1.0;
    }
    ROBOT_g0_size[0] = 4;
    ROBOT_g0_size[1] = 4;
    for (i = 0; i < 4; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 4; O_Htm_tmp++) {
            ROBOT_g0_data[O_Htm_tmp + (i << 2)] = ROBOT_g0[(idxStart_4Row + O_Htm_tmp) + 12 * i];
        }
    }
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes", ["ROBOT_g0_data", "ROBOT_g0_size", "O_Htm", "Htm_data", "Htm_size"], 0, 17, 6))>;
    for (i = 0; i < 4; i++) {
        m_tmp = O_Htm_pre[i + 4];
        m = O_Htm_pre[i];
        b_m = O_Htm_pre[i + 8];
        c_m = O_Htm_pre[i + 12];
        for (O_Htm_tmp = 0; O_Htm_tmp < 4; O_Htm_tmp++) {
            O_Htm_tmp_0 = O_Htm_tmp << 2;
            O_Htm[i + O_Htm_tmp_0] = ((Htm_data[O_Htm_tmp_0 + 1] * m_tmp + Htm_data[O_Htm_tmp_0] * m) + Htm_data[O_Htm_tmp_0 + 2] * b_m) + Htm_data[O_Htm_tmp_0 + 3] * c_m;
        }
    }
    for (i = 0; i < 6; i++) {
        inertialTwist[i] = relTwist[i];
    }
    for (i = 0; i < 3; i++) {
        jointOrigins[3 * i] = Htm_data[i];
        jointOrigins[3 * i + 1] = Htm_data[i + Htm_size[0]];
        jointOrigins[3 * i + 2] = Htm_data[(Htm_size[0] << 1) + i];
    }
    for (i = 0; i <= 6; i += 2) {
        tmp_3 = _mm_loadu_pd(&jointOrigins[i]);
        _mm_storeu_pd(&tmp2[i], _mm_mul_pd(tmp_3, _mm_set1_pd(-1.0)));
    }
    for (i = 8; i < 9; i++) {
        tmp2[i] = -jointOrigins[i];
    }
    m_tmp = Htm_data[Htm_size[0] * 3 + 2];
    tmp[3] = -m_tmp;
    m_tmp_0 = Htm_data[Htm_size[0] * 3 + 1];
    tmp[6] = m_tmp_0;
    tmp[1] = m_tmp;
    m_tmp = Htm_data[Htm_size[0] * 3];
    tmp[7] = -m_tmp;
    tmp[2] = -m_tmp_0;
    tmp[5] = m_tmp;
    for (i = 0; i < 3; i++) {
        m_tmp = tmp2[i + 3];
        m_tmp_0 = tmp2[i];
        Iz = tmp2[i + 6];
        for (O_Htm_tmp = 0; O_Htm_tmp < 3; O_Htm_tmp++) {
            b_tmp[i + 3 * O_Htm_tmp] = (tmp[3 * O_Htm_tmp + 1] * m_tmp + tmp[3 * O_Htm_tmp] * m_tmp_0) + tmp[3 * O_Htm_tmp + 2] * Iz;
            invAd[O_Htm_tmp + 6 * i] = jointOrigins[3 * i + O_Htm_tmp];
        }
    }
    for (i = 0; i < 3; i++) {
        O_Htm_tmp = (i + 3) * 6;
        invAd[O_Htm_tmp] = b_tmp[3 * i];
        invAd[6 * i + 3] = 0.0;
        invAd[O_Htm_tmp + 3] = jointOrigins[3 * i];
        idxStart_4Row = 3 * i + 1;
        invAd[O_Htm_tmp + 1] = b_tmp[idxStart_4Row];
        invAd[6 * i + 4] = 0.0;
        invAd[O_Htm_tmp + 4] = jointOrigins[idxStart_4Row];
        idxStart_4Row = 3 * i + 2;
        invAd[O_Htm_tmp + 2] = b_tmp[idxStart_4Row];
        invAd[6 * i + 5] = 0.0;
        invAd[O_Htm_tmp + 5] = jointOrigins[idxStart_4Row];
    }
    std::memset(&J[0], 0, 18U * sizeof(real_T));
    std::memset(&dJ[0], 0, 18U * sizeof(real_T));
    if (rtb_CC_0 + 1 > 1) {
        for (i = 0; i < 6; i++) {
            m = 0.0;
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                m += invAd[6 * O_Htm_tmp + i] * inertialTwist_pre[O_Htm_tmp];
            }
            inertialTwist[i] = relTwist[i] + m;
        }
        J_pre_size[0] = 6;
        J_pre_size[1] = rtb_CC_0;
        for (i = 0; i < rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J_pre_data[O_Htm_tmp + 6 * i] = J_pre[6 * i + O_Htm_tmp];
            }
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["invAd", "J_pre_data", "J_pre_size", "tmp_data", "Htm_size"], 0, 17, 7))>;
        idxStart_4Row = Htm_size[1];
        for (i = 0; i < idxStart_4Row; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J[O_Htm_tmp + 6 * i] = tmp_data[6 * i + O_Htm_tmp];
            }
        }
        jointOrigins[0] = 0.0;
        jointOrigins[3] = -relTwist[5];
        jointOrigins[6] = relTwist[4];
        jointOrigins[1] = relTwist[5];
        jointOrigins[4] = 0.0;
        jointOrigins[7] = -relTwist[3];
        jointOrigins[2] = -relTwist[4];
        jointOrigins[5] = relTwist[3];
        jointOrigins[8] = 0.0;
        dJ_pre_size[0] = 6;
        dJ_pre_size[1] = rtb_CC_0;
        for (i = 0; i < rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                dJ_pre_data[O_Htm_tmp + 6 * i] = dJ_pre[6 * i + O_Htm_tmp];
            }
        }
        m_0[18] = 0.0;
        m_0[24] = -relTwist[2];
        m_0[30] = relTwist[1];
        m_0[19] = relTwist[2];
        m_0[25] = 0.0;
        m_0[31] = -relTwist[0];
        m_0[20] = -relTwist[1];
        m_0[26] = relTwist[0];
        m_0[32] = 0.0;
        for (i = 0; i < 3; i++) {
            m_tmp = jointOrigins[3 * i];
            m_0[6 * i] = m_tmp;
            m_0[6 * i + 3] = 0.0;
            O_Htm_tmp = (i + 3) * 6;
            m_0[O_Htm_tmp + 3] = m_tmp;
            m_tmp = jointOrigins[3 * i + 1];
            m_0[6 * i + 1] = m_tmp;
            m_0[6 * i + 4] = 0.0;
            m_0[O_Htm_tmp + 4] = m_tmp;
            m_tmp = jointOrigins[3 * i + 2];
            m_0[6 * i + 2] = m_tmp;
            m_0[6 * i + 5] = 0.0;
            m_0[O_Htm_tmp + 5] = m_tmp;
        }
        J_pre_size[0] = 6;
        J_pre_size[1] = rtb_CC_0;
        for (i = 0; i < rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J_pre_data[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
            }
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["invAd", "dJ_pre_data", "dJ_pre_size", "tmp_data", "Htm_size"], 0, 17, 36))>;
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["m_0", "J_pre_data", "J_pre_size", "tmp_data", "tmp_size_5"], 0, 17, 37))>;
        if (Htm_size[1] == tmp_size_5[1]) {
            dJ_pre_size[0] = 6;
            dJ_pre_size[1] = rtb_CC_0;
            for (i = 0; i < rtb_CC_0; i++) {
                for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                    dJ_pre_data[O_Htm_tmp + 6 * i] = dJ_pre[6 * i + O_Htm_tmp];
                }
            }
            %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["invAd", "dJ_pre_data", "dJ_pre_size", "tmp_data", "Htm_size"], 0, 17, 8))>;
            m_0[18] = 0.0;
            m_0[24] = -relTwist[2];
            m_0[30] = relTwist[1];
            m_0[19] = relTwist[2];
            m_0[25] = 0.0;
            m_0[31] = -relTwist[0];
            m_0[20] = -relTwist[1];
            m_0[26] = relTwist[0];
            m_0[32] = 0.0;
            for (i = 0; i < 3; i++) {
                m_tmp = jointOrigins[3 * i];
                m_0[6 * i] = m_tmp;
                m_0[6 * i + 3] = 0.0;
                O_Htm_tmp = (i + 3) * 6;
                m_0[O_Htm_tmp + 3] = m_tmp;
                m_tmp = jointOrigins[3 * i + 1];
                m_0[6 * i + 1] = m_tmp;
                m_0[6 * i + 4] = 0.0;
                m_0[O_Htm_tmp + 4] = m_tmp;
                m_tmp = jointOrigins[3 * i + 2];
                m_0[6 * i + 2] = m_tmp;
                m_0[6 * i + 5] = 0.0;
                m_0[O_Htm_tmp + 5] = m_tmp;
            }
            J_pre_size[0] = 6;
            J_pre_size[1] = rtb_CC_0;
            for (i = 0; i < rtb_CC_0; i++) {
                for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                    J_pre_data[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
                }
            }
            %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["m_0", "J_pre_data", "J_pre_size", "dJ_pre_data", "dJ_pre_size"], 0, 17, 9))>;
            idxStart_4Row = Htm_size[1];
            for (i = 0; i < idxStart_4Row; i++) {
                for (O_Htm_tmp = 0; O_Htm_tmp <= 4; O_Htm_tmp += 2) {
                    O_Htm_tmp_0 = 6 * i + O_Htm_tmp;
                    tmp_3 = _mm_loadu_pd(&tmp_data[O_Htm_tmp_0]);
                    tmp_4 = _mm_loadu_pd(&dJ_pre_data[O_Htm_tmp_0]);
                    _mm_storeu_pd(&dJ[O_Htm_tmp_0], _mm_sub_pd(tmp_3, tmp_4));
                }
            }
        } else {
            %<(SLibCGCallSubFcn("planar_rob_binary_expand_op_hym", ["dJ", "rtb_CC_0", "invAd", "dJ_pre", "jointOrigins", "relTwist", "J"], 0, 17, 10))>;
        }
    }
    for (i = 0; i < 6; i++) {
        J[i + 6 * rtb_CC_0] = ROBOT_csi[idxStart_6Row + i];
    }
    J_size[0] = 6;
    J_size[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            J_pre[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
        }
    }
    ROBOT_Mass_size[0] = 6;
    ROBOT_Mass_size[1] = 6;
    for (i = 0; i < 6; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            ROBOT_Mass_data[O_Htm_tmp + 6 * i] = ROBOT_Mass[(idxStart_6Row + O_Htm_tmp) + 18 * i];
        }
    }
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_ji", ["J_pre", "J_size", "ROBOT_Mass_data", "ROBOT_Mass_size", "dJ_pre", "Htm_size"], 0, 17, 11))>;
    J_size[0] = 6;
    J_size[1] = rtb_CC_0 + 1;
    J_size_0[0] = 6;
    J_size_0[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            idxStart_4Row = 6 * i + O_Htm_tmp;
            m_tmp = J[idxStart_4Row];
            J_pre[idxStart_4Row] = m_tmp;
            J_data[idxStart_4Row] = m_tmp;
        }
    }
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "J_pre", "J_size", "b_y", "tmp_size_5"], 0, 17, 34))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "J_data", "J_size_0", "b_y", "tmp_size_4"], 0, 17, 35))>;
    if ((rtb_CC_0 + 1 == tmp_size_5[0]) && (rtb_CC_0 + 1 == tmp_size_4[1])) {
        J_size[0] = 6;
        J_size[1] = rtb_CC_0 + 1;
        for (i = 0; i <= rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J_pre[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
            }
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "J_pre", "J_size", "b_y", "tmp_size_5"], 0, 17, 12))>;
        for (i = 0; i <= rtb_CC_0; i++) {
            idxStart_4Row = ((rtb_CC_0 + 1) / 2) << 1;
            O_Htm_tmp_0 = idxStart_4Row - 2;
            for (O_Htm_tmp = 0; O_Htm_tmp <= O_Htm_tmp_0; O_Htm_tmp += 2) {
                tmp_3 = _mm_loadu_pd(&S[3 * i + O_Htm_tmp]);
                tmp_4 = _mm_loadu_pd(&b_y[tmp_size_5[0] * i + O_Htm_tmp]);
                _mm_storeu_pd(&jointOrigins[O_Htm_tmp + (rtb_CC_0 + 1) * i], _mm_add_pd(tmp_3, tmp_4));
            }
            for (O_Htm_tmp = idxStart_4Row; O_Htm_tmp <= rtb_CC_0; O_Htm_tmp++) {
                jointOrigins[O_Htm_tmp + (rtb_CC_0 + 1) * i] = S[3 * i + O_Htm_tmp] + b_y[tmp_size_5[0] * i + O_Htm_tmp];
            }
        }
        idxStart_4Row = rtb_CC_0 + 1;
        O_Htm_tmp_0 = rtb_CC_0 + 1;
        for (i = 0; i < idxStart_4Row; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < O_Htm_tmp_0; O_Htm_tmp++) {
                S[O_Htm_tmp + 3 * i] = jointOrigins[(rtb_CC_0 + 1) * i + O_Htm_tmp];
            }
        }
    } else {
        %<(SLibCGCallSubFcn("planar_robo_binary_expand_op_hy", ["S", "rtb_CC_0", "dJ_pre", "Htm_size", "J"], 0, 17, 13))>;
    }
    jointOrigins[0] = 0.0;
    jointOrigins[3] = -inertialTwist[5];
    jointOrigins[6] = inertialTwist[4];
    jointOrigins[1] = inertialTwist[5];
    jointOrigins[4] = 0.0;
    jointOrigins[7] = -inertialTwist[3];
    jointOrigins[2] = -inertialTwist[4];
    jointOrigins[5] = inertialTwist[3];
    jointOrigins[8] = 0.0;
    for (i = 0; i < 3; i++) {
        idxStart_4Row = idxStart_6Row + i;
        m = ROBOT_Mass[idxStart_4Row + 3];
        b_m = ROBOT_Mass[idxStart_4Row + 57];
        c_m = ROBOT_Mass[idxStart_4Row + 21];
        m_tmp_0 = ROBOT_Mass[idxStart_4Row + 75];
        Iz = ROBOT_Mass[idxStart_4Row + 93];
        ROBOT_Mass_0 = ROBOT_Mass[idxStart_4Row + 39];
        for (O_Htm_tmp = 0; O_Htm_tmp < 3; O_Htm_tmp++) {
            m_tmp = jointOrigins[3 * O_Htm_tmp];
            b_tmp_0 = m * m_tmp;
            tmp2_1 = b_m * m_tmp;
            m_tmp = jointOrigins[3 * O_Htm_tmp + 1];
            b_tmp_0 += c_m * m_tmp;
            tmp2_1 += m_tmp_0 * m_tmp;
            m_tmp = jointOrigins[3 * O_Htm_tmp + 2];
            idxStart_4Row = 3 * O_Htm_tmp + i;
            tmp2[idxStart_4Row] = Iz * m_tmp + tmp2_1;
            b_tmp[idxStart_4Row] = ROBOT_Mass_0 * m_tmp + b_tmp_0;
        }
    }
    m = ROBOT_Mass[idxStart_6Row];
    J_size[0] = 6;
    J_size[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            J_pre[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
        }
    }
    for (i = 0; i < 3; i++) {
        invAd[6 * i] = jointOrigins[3 * i] * m;
        O_Htm_tmp = (i + 3) * 6;
        invAd[O_Htm_tmp] = -b_tmp[i];
        invAd[6 * i + 3] = b_tmp[3 * i];
        invAd[O_Htm_tmp + 3] = tmp2[3 * i] - tmp2[i];
        idxStart_6Row = 3 * i + 1;
        invAd[6 * i + 1] = jointOrigins[idxStart_6Row] * m;
        invAd[O_Htm_tmp + 1] = -b_tmp[i + 3];
        invAd[6 * i + 4] = b_tmp[idxStart_6Row];
        invAd[O_Htm_tmp + 4] = tmp2[idxStart_6Row] - tmp2[i + 3];
        idxStart_6Row = 3 * i + 2;
        invAd[6 * i + 2] = jointOrigins[idxStart_6Row] * m;
        invAd[O_Htm_tmp + 2] = -b_tmp[i + 6];
        invAd[6 * i + 5] = b_tmp[idxStart_6Row];
        invAd[O_Htm_tmp + 5] = tmp2[idxStart_6Row] - tmp2[i + 6];
    }
    J_size_0[0] = 6;
    J_size_0[1] = rtb_CC_0 + 1;
    J_size_1[0] = 6;
    J_size_1[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            idxStart_4Row = 6 * i + O_Htm_tmp;
            m_tmp = J[idxStart_4Row];
            J_data[idxStart_4Row] = m_tmp;
            J_data_0[O_Htm_tmp + 6 * i] = m_tmp;
        }
    }
    for (i = 0; i < 3; i++) {
        m_0[6 * i] = jointOrigins[3 * i] * m;
        O_Htm_tmp = (i + 3) * 6;
        m_0[O_Htm_tmp] = -b_tmp[i];
        m_0[6 * i + 3] = b_tmp[3 * i];
        m_0[O_Htm_tmp + 3] = tmp2[3 * i] - tmp2[i];
        idxStart_6Row = 3 * i + 1;
        m_0[6 * i + 1] = jointOrigins[idxStart_6Row] * m;
        m_0[O_Htm_tmp + 1] = -b_tmp[i + 3];
        m_0[6 * i + 4] = b_tmp[idxStart_6Row];
        m_0[O_Htm_tmp + 4] = tmp2[idxStart_6Row] - tmp2[i + 3];
        idxStart_6Row = 3 * i + 2;
        m_0[6 * i + 2] = jointOrigins[idxStart_6Row] * m;
        m_0[O_Htm_tmp + 2] = -b_tmp[i + 6];
        m_0[6 * i + 5] = b_tmp[idxStart_6Row];
        m_0[O_Htm_tmp + 5] = tmp2[idxStart_6Row] - tmp2[i + 6];
    }
    J_size_2[0] = 6;
    J_size_2[1] = rtb_CC_0 + 1;
    J_size_3[0] = 6;
    J_size_3[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            idxStart_4Row = 6 * i + O_Htm_tmp;
            m_tmp = J[idxStart_4Row];
            J_data_1[idxStart_4Row] = m_tmp;
            J_data_2[O_Htm_tmp + 6 * i] = m_tmp;
        }
    }
    for (i = 0; i < 3; i++) {
        m_1[6 * i] = jointOrigins[3 * i] * m;
        O_Htm_tmp = (i + 3) * 6;
        m_1[O_Htm_tmp] = -b_tmp[i];
        m_1[6 * i + 3] = b_tmp[3 * i];
        m_1[O_Htm_tmp + 3] = tmp2[3 * i] - tmp2[i];
        idxStart_6Row = 3 * i + 1;
        m_1[6 * i + 1] = jointOrigins[idxStart_6Row] * m;
        m_1[O_Htm_tmp + 1] = -b_tmp[i + 3];
        m_1[6 * i + 4] = b_tmp[idxStart_6Row];
        m_1[O_Htm_tmp + 4] = tmp2[idxStart_6Row] - tmp2[i + 3];
        idxStart_6Row = 3 * i + 2;
        m_1[6 * i + 2] = jointOrigins[idxStart_6Row] * m;
        m_1[O_Htm_tmp + 2] = -b_tmp[i + 6];
        m_1[6 * i + 5] = b_tmp[idxStart_6Row];
        m_1[O_Htm_tmp + 5] = tmp2[idxStart_6Row] - tmp2[i + 6];
    }
    J_size_4[0] = 6;
    J_size_4[1] = rtb_CC_0 + 1;
    dJ_size[0] = 6;
    dJ_size[1] = rtb_CC_0 + 1;
    J_size_5[0] = 6;
    J_size_5[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            idxStart_6Row = 6 * i + O_Htm_tmp;
            m_tmp = J[idxStart_6Row];
            idxStart_4Row = 6 * i + O_Htm_tmp;
            J_data_3[idxStart_4Row] = m_tmp;
            dJ_data[idxStart_4Row] = dJ[idxStart_6Row];
            J_data_4[idxStart_4Row] = m_tmp;
        }
    }
    for (i = 0; i < 3; i++) {
        m_2[6 * i] = jointOrigins[3 * i] * m;
        O_Htm_tmp = (i + 3) * 6;
        m_2[O_Htm_tmp] = -b_tmp[i];
        m_2[6 * i + 3] = b_tmp[3 * i];
        m_2[O_Htm_tmp + 3] = tmp2[3 * i] - tmp2[i];
        idxStart_6Row = 3 * i + 1;
        m_2[6 * i + 1] = jointOrigins[idxStart_6Row] * m;
        m_2[O_Htm_tmp + 1] = -b_tmp[i + 3];
        m_2[6 * i + 4] = b_tmp[idxStart_6Row];
        m_2[O_Htm_tmp + 4] = tmp2[idxStart_6Row] - tmp2[i + 3];
        idxStart_6Row = 3 * i + 2;
        m_2[6 * i + 2] = jointOrigins[idxStart_6Row] * m;
        m_2[O_Htm_tmp + 2] = -b_tmp[i + 6];
        m_2[6 * i + 5] = b_tmp[idxStart_6Row];
        m_2[O_Htm_tmp + 5] = tmp2[idxStart_6Row] - tmp2[i + 6];
    }
    J_size_6[0] = 6;
    J_size_6[1] = rtb_CC_0 + 1;
    dJ_size_0[0] = 6;
    dJ_size_0[1] = rtb_CC_0 + 1;
    for (i = 0; i <= rtb_CC_0; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
            idxStart_4Row = 6 * i + O_Htm_tmp;
            J_data_5[idxStart_4Row] = J[idxStart_4Row];
            dJ_data_0[idxStart_4Row] = dJ[idxStart_4Row];
        }
    }
    %<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["J_pre", "J_size", "invAd", "tmp_data_0", "tmp_size_5"], 0, 17, 24))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_0", "tmp_size_5", "J_data", "J_size_0", "b_y", "tmp_size_4"], 0, 17, 25))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["J_data_0", "J_size_1", "m_0", "tmp_data_0", "tmp_size_5"], 0, 17, 26))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_0", "tmp_size_5", "J_data_1", "J_size_2", "b_y", "tmp_size_0"], 0, 17, 27))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["J_data_2", "J_size_3", "m_1", "tmp_data_0", "tmp_size_5"], 0, 17, 28))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_0", "tmp_size_5", "J_data_3", "J_size_4", "b_y", "tmp_size_1"], 0, 17, 29))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "dJ_data", "dJ_size", "b_y", "tmp_size_5"], 0, 17, 30))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["J_data_4", "J_size_5", "m_2", "tmp_data_0", "tmp_size_2"], 0, 17, 31))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_0", "tmp_size_2", "J_data_5", "J_size_6", "b_y", "tmp_size_3"], 0, 17, 32))>;
    %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "dJ_data_0", "dJ_size_0", "b_y", "tmp_size_2"], 0, 17, 33))>;
    if ((rtb_CC_0 + 1 == tmp_size_4[0]) && (rtb_CC_0 + 1 == tmp_size_0[1]) && ((rtb_CC_0 + 1 == 1 ? tmp_size_1[0] : rtb_CC_0 + 1) == tmp_size_5[0]) && ((rtb_CC_0 + 1 == 1 ? tmp_size_3[1] : rtb_CC_0 + 1) == tmp_size_2[1])) {
        J_size[0] = 6;
        J_size[1] = rtb_CC_0 + 1;
        for (i = 0; i <= rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J_pre[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
            }
        }
        for (i = 0; i < 3; i++) {
            invAd[6 * i] = jointOrigins[3 * i] * m;
            O_Htm_tmp = (i + 3) * 6;
            invAd[O_Htm_tmp] = -b_tmp[i];
            invAd[6 * i + 3] = b_tmp[3 * i];
            invAd[O_Htm_tmp + 3] = tmp2[3 * i] - tmp2[i];
            idxStart_6Row = 3 * i + 1;
            invAd[6 * i + 1] = jointOrigins[idxStart_6Row] * m;
            invAd[O_Htm_tmp + 1] = -b_tmp[i + 3];
            invAd[6 * i + 4] = b_tmp[idxStart_6Row];
            invAd[O_Htm_tmp + 4] = tmp2[idxStart_6Row] - tmp2[i + 3];
            idxStart_6Row = 3 * i + 2;
            invAd[6 * i + 2] = jointOrigins[idxStart_6Row] * m;
            invAd[O_Htm_tmp + 2] = -b_tmp[i + 6];
            invAd[6 * i + 5] = b_tmp[idxStart_6Row];
            invAd[O_Htm_tmp + 5] = tmp2[idxStart_6Row] - tmp2[i + 6];
        }
        J_size_0[0] = 6;
        J_size_0[1] = rtb_CC_0 + 1;
        for (i = 0; i <= rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                J_data[O_Htm_tmp + 6 * i] = J[6 * i + O_Htm_tmp];
            }
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["J_pre", "J_size", "invAd", "tmp_data_0", "tmp_size_4"], 0, 17, 23))>;
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_0", "tmp_size_4", "J_data", "J_size_0", "b_y", "tmp_size_5"], 0, 17, 14))>;
        dJ_size[0] = 6;
        dJ_size[1] = rtb_CC_0 + 1;
        for (i = 0; i <= rtb_CC_0; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < 6; O_Htm_tmp++) {
                dJ_data[O_Htm_tmp + 6 * i] = dJ[6 * i + O_Htm_tmp];
            }
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["dJ_pre", "Htm_size", "dJ_data", "dJ_size", "jointOrigins", "tmp_size_4"], 0, 17, 15))>;
        idxStart_6Row = rtb_CC_0 + 1;
        rtb_CC_size_idx_1 = rtb_CC_0 + 1;
        for (i = 0; i <= rtb_CC_0; i++) {
            idxStart_4Row = ((rtb_CC_0 + 1) / 2) << 1;
            O_Htm_tmp_0 = idxStart_4Row - 2;
            for (O_Htm_tmp = 0; O_Htm_tmp <= O_Htm_tmp_0; O_Htm_tmp += 2) {
                tmp_3 = _mm_loadu_pd(&rtb_CC[3 * i + O_Htm_tmp]);
                tmp_4 = _mm_loadu_pd(&b_y[tmp_size_5[0] * i + O_Htm_tmp]);
                tmp_2 = _mm_loadu_pd(&jointOrigins[tmp_size_4[0] * i + O_Htm_tmp]);
                _mm_storeu_pd(&tmp2[O_Htm_tmp + (rtb_CC_0 + 1) * i], _mm_add_pd(_mm_add_pd(tmp_3, tmp_4), tmp_2));
            }
            for (O_Htm_tmp = idxStart_4Row; O_Htm_tmp <= rtb_CC_0; O_Htm_tmp++) {
                tmp2[O_Htm_tmp + (rtb_CC_0 + 1) * i] = (rtb_CC[3 * i + O_Htm_tmp] + b_y[tmp_size_5[0] * i + O_Htm_tmp]) + jointOrigins[tmp_size_4[0] * i + O_Htm_tmp];
            }
        }
        for (i = 0; i < rtb_CC_size_idx_1; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp < idxStart_6Row; O_Htm_tmp++) {
                rtb_CC[O_Htm_tmp + 3 * i] = tmp2[(rtb_CC_0 + 1) * i + O_Htm_tmp];
            }
        }
    } else {
        %<(SLibCGCallSubFcn("planar_robot_binary_expand_op_h", ["rtb_CC", "rtb_CC_0", "J", "m", "jointOrigins", "b_tmp", "tmp2", "dJ_pre", "Htm_size", "dJ"], 0, 17, 16))>;
    }
    tmp_size[0] = rtb_CC_0 + 1;
    tmp_size[1] = 3;
    for (i = 0; i < 3; i++) {
        for (O_Htm_tmp = 0; O_Htm_tmp <= rtb_CC_0; O_Htm_tmp++) {
            b_y[O_Htm_tmp + (rtb_CC_0 + 1) * i] = dJ_pre[Htm_size[0] * i + O_Htm_tmp];
        }
        O_Htm_tmp_0 = i << 2;
        jointOrigins[3 * i] = O_Htm[O_Htm_tmp_0];
        jointOrigins[3 * i + 1] = O_Htm[O_Htm_tmp_0 + 1];
        jointOrigins[3 * i + 2] = O_Htm[O_Htm_tmp_0 + 2];
    }
    %<(SLibCGCallSubFcn("planar_robot3dof_F_mtimes_jiwfu", ["b_y", "tmp_size", "jointOrigins", "tmp2", "tmp_size_5"], 0, 17, 21))>;
    %<(SLibCGCallSubFcn("planar_robot3dof__mtimes_jiwfuk", ["tmp2", "tmp_size_5", "rtb_pos_tcp", "&i"], 0, 17, 22))>;
    if (rtb_CC_0 + 1 == i) {
        tmp_size[0] = rtb_CC_0 + 1;
        tmp_size[1] = 3;
        for (i = 0; i < 3; i++) {
            for (O_Htm_tmp = 0; O_Htm_tmp <= rtb_CC_0; O_Htm_tmp++) {
                b_y[O_Htm_tmp + (rtb_CC_0 + 1) * i] = dJ_pre[Htm_size[0] * i + O_Htm_tmp];
            }
            O_Htm_tmp_0 = i << 2;
            jointOrigins[3 * i] = O_Htm[O_Htm_tmp_0];
            jointOrigins[3 * i + 1] = O_Htm[O_Htm_tmp_0 + 1];
            jointOrigins[3 * i + 2] = O_Htm[O_Htm_tmp_0 + 2];
        }
        %<(SLibCGCallSubFcn("planar_robot3dof_F_mtimes_jiwfu", ["b_y", "tmp_size", "jointOrigins", "tmp2", "Htm_size"], 0, 17, 20))>;
        %<(SLibCGCallSubFcn("planar_robot3dof__mtimes_jiwfuk", ["tmp2", "Htm_size", "rtb_pos_tcp", "&i"], 0, 17, 17))>;
        O_Htm_tmp = rtb_CC_0 + 1;
        idxStart_4Row = ((rtb_CC_0 + 1) / 2) << 1;
        O_Htm_tmp_0 = idxStart_4Row - 2;
        for (i = 0; i <= O_Htm_tmp_0; i += 2) {
            tmp_3 = _mm_loadu_pd(&rtb_g[i]);
            tmp_4 = _mm_loadu_pd(&rtb_pos_tcp[i]);
            _mm_storeu_pd(&rtb_g_data[i], _mm_add_pd(tmp_3, tmp_4));
        }
        for (i = idxStart_4Row; i < O_Htm_tmp; i++) {
            rtb_g_data[i] = rtb_g[i] + rtb_pos_tcp[i];
        }
        std::memcpy(&rtb_g[0], &rtb_g_data[0], static_cast<uint32_T>(rtb_CC_0 + 1) * sizeof(real_T));
    } else {
        %<(SLibCGCallSubFcn("planar_robot3d_binary_expand_op", ["rtb_g", "rtb_CC_0", "dJ_pre", "Htm_size", "O_Htm"], 0, 17, 18))>;
    }
    std::memcpy(&J_pre[0], &J[0], 18U * sizeof(real_T));
    std::memcpy(&dJ_pre[0], &dJ[0], 18U * sizeof(real_T));
    for (i = 0; i < 6; i++) {
        inertialTwist_pre[i] = inertialTwist[i];
    }
    std::memcpy(&O_Htm_pre[0], &O_Htm[0], sizeof(real_T) << 4U);
}
for (i = 0; i < 3; i++) {
    rtb_CC_0 = i << 2;
    O_Htm_pre[rtb_CC_0] = E_tmp[3 * i];
    O_Htm_pre[rtb_CC_0 + 1] = E_tmp[3 * i + 1];
    O_Htm_pre[rtb_CC_0 + 2] = E_tmp[3 * i + 2];
}
O_Htm_pre[12] = planar_robot3dof_FD0_U.arm_length[2];
O_Htm_pre[13] = 0.0;
O_Htm_pre[14] = 0.0;
O_Htm_pre[3] = 0.0;
O_Htm_pre[7] = 0.0;
O_Htm_pre[11] = 0.0;
O_Htm_pre[15] = 1.0;
for (i = 0; i < 4; i++) {
    rtb_CC_0 = i << 2;
    m_tmp = O_Htm_pre[rtb_CC_0 + 1];
    m = O_Htm_pre[rtb_CC_0];
    b_m = O_Htm_pre[rtb_CC_0 + 2];
    c_m = O_Htm_pre[rtb_CC_0 + 3];
    for (O_Htm_tmp = 0; O_Htm_tmp <= 2; O_Htm_tmp += 2) {
        tmp_3 = _mm_loadu_pd(&O_Htm[O_Htm_tmp + 4]);
        tmp_4 = _mm_loadu_pd(&O_Htm[O_Htm_tmp]);
        tmp_2 = _mm_loadu_pd(&O_Htm[O_Htm_tmp + 8]);
        tmp_1 = _mm_loadu_pd(&O_Htm[O_Htm_tmp + 12]);
        _mm_storeu_pd(&O_Htm_0[O_Htm_tmp + rtb_CC_0], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(m_tmp), tmp_3), _mm_mul_pd(_mm_set1_pd(m), tmp_4)), _mm_mul_pd(_mm_set1_pd(b_m), tmp_2)), _mm_mul_pd(_mm_set1_pd(c_m), tmp_1)));
    }
}
/* {S!d4204}Product: '<S1>/Product5' */
%<(SLibCGCallSubFcn("rt_invd3x3_snf", ["S", "tmp"], 0, 17, 19))>;
/* {S!d4206}DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
 *  Product: '<S1>/Product3'
 */
m_tmp = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[1];
m = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[0];
b_m = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[2];
/* {E!d4157}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 0; i <= 0; i += 2) {
    /* {S!d4159}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4208}MATLAB Function: '<S1>/calcSysMatrices' */
    tmp_3 = _mm_loadu_pd(&O_Htm_0[i + 12]);
    _mm_storeu_pd(&rtb_pos_tcp[i], tmp_3);
    /* {S!d4210}SampleTimeMath: '<S2>/TSamp'
 *
 * About '<S2>/TSamp':
 *  y = u * K where K = 1 / ( w * Ts )
 */
    tmp_4 = _mm_set1_pd(1000.0);
    /* {E!d4159}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
    tmp_3 = _mm_mul_pd(tmp_3, tmp_4);
    /* {S!d4161}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4212}SampleTimeMath: '<S2>/TSamp' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 *
 * About '<S2>/TSamp':
 *  y = u * K where K = 1 / ( w * Ts )
 */
    _mm_storeu_pd(&rtb_TSamp[i], tmp_3);
    /* {S!d4214}UnitDelay: '<S2>/UD' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 */
    tmp_2 = _mm_loadu_pd(&planar_robot3dof_FD0_DW.UD_DSTATE[i]);
    /* {E!d4161}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
    tmp_3 = _mm_sub_pd(tmp_3, tmp_2);
    /* {S!d4163}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4216}Sum: '<S2>/Diff' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 */
    _mm_storeu_pd(&rtb_Diff[i], tmp_3);
    /* {E!d4163}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
    tmp_3 = _mm_mul_pd(tmp_3, tmp_4);
    /* {S!d4165}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4218}SampleTimeMath: '<S3>/TSamp' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 *
 * About '<S3>/TSamp':
 *  y = u * K where K = 1 / ( w * Ts )
 */
    _mm_storeu_pd(&rtb_TSamp_f[i], tmp_3);
    /* {S!d4220}UnitDelay: '<S3>/UD' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 */
    tmp_4 = _mm_loadu_pd(&planar_robot3dof_FD0_DW.UD_DSTATE_n[i]);
    /* {S!d4222}Outport: '<Root>/TCP_acc' incorporates:
 *  MATLAB Function: '<S1>/calcSysMatrices'
 */
    _mm_storeu_pd(&planar_robot3dof_FD0_Y.TCP_acc[i], _mm_sub_pd(tmp_3, tmp_4));
    /* {S!d4224}Sum: '<S1>/Sum4' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 *  Inport: '<Root>/joint_torque'
 *  MATLAB Function: '<S1>/calcSysMatrices'
 *  Product: '<S1>/Product3'
 */
    tmp_3 = _mm_loadu_pd(&rtb_CC[i + 3]);
    tmp_4 = _mm_loadu_pd(&rtb_CC[i]);
    tmp_2 = _mm_loadu_pd(&rtb_CC[i + 6]);
    tmp_1 = _mm_loadu_pd(&rtb_g[i]);
    _mm_storeu_pd(&rtb_g_data[i], _mm_sub_pd(_mm_sub_pd(_mm_loadu_pd(&planar_robot3dof_FD0_U.joint_torque[i]), _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_3, _mm_set1_pd(m_tmp)), _mm_mul_pd(tmp_4, _mm_set1_pd(m))), _mm_mul_pd(tmp_2, _mm_set1_pd(b_m)))), tmp_1));
    /* {E!d4165}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
}
/* {S!d4167}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 2; i < 3; i++) {
    /* {S!d4226}MATLAB Function: '<S1>/calcSysMatrices' */
    c_m = O_Htm_0[i + 12];
    rtb_pos_tcp[i] = c_m;
    /* {S!d4228}SampleTimeMath: '<S2>/TSamp'
 *
 * About '<S2>/TSamp':
 *  y = u * K where K = 1 / ( w * Ts )
 */
    c_m *= 1000.0;
    rtb_TSamp[i] = c_m;
    /* {S!d4230}Sum: '<S2>/Diff' incorporates:
 *  UnitDelay: '<S2>/UD'
 */
    c_m -= planar_robot3dof_FD0_DW.UD_DSTATE[i];
    rtb_Diff[i] = c_m;
    /* {S!d4232}SampleTimeMath: '<S3>/TSamp'
 *
 * About '<S3>/TSamp':
 *  y = u * K where K = 1 / ( w * Ts )
 */
    c_m *= 1000.0;
    rtb_TSamp_f[i] = c_m;
    /* {S!d4234}Outport: '<Root>/TCP_acc' incorporates:
 *  Sum: '<S3>/Diff'
 *  UnitDelay: '<S3>/UD'
 */
    planar_robot3dof_FD0_Y.TCP_acc[i] = c_m - planar_robot3dof_FD0_DW.UD_DSTATE_n[i];
    /* {S!d4236}Sum: '<S1>/Sum4' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 *  Inport: '<Root>/joint_torque'
 *  Product: '<S1>/Product3'
 */
    rtb_g_data[i] = (planar_robot3dof_FD0_U.joint_torque[i] - ((rtb_CC[i + 3] * m_tmp + rtb_CC[i] * m) + rtb_CC[i + 6] * b_m)) - rtb_g[i];
}
/* {S!d4238}Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' */
planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_IC_LOAD = 0U;
/* {S!d4240}Product: '<S1>/Product1' */
m = rtb_g_data[1];
b_m = rtb_g_data[0];
c_m = rtb_g_data[2];
/* {E!d4167}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 0; i <= 0; i += 2) {
    /* {S!d4169}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
    /* {S!d4242}Product: '<S1>/Product1' */
    tmp_3 = _mm_loadu_pd(&tmp[i + 3]);
    tmp_4 = _mm_loadu_pd(&tmp[i]);
    tmp_2 = _mm_loadu_pd(&tmp[i + 6]);
    tmp_3 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_3, _mm_set1_pd(m)), _mm_mul_pd(tmp_4, _mm_set1_pd(b_m))), _mm_mul_pd(tmp_2, _mm_set1_pd(c_m)));
    /* {S!d4244}DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_4 = _mm_loadu_pd(&planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[i]);
    /* {S!d4246}Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_2 = _mm_set1_pd(0.001);
    tmp_1 = _mm_loadu_pd(&planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[i]);
    _mm_storeu_pd(&planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[i], _mm_add_pd(_mm_mul_pd(tmp_2, tmp_4), tmp_1));
    /* {S!d4248}Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
 *  Product: '<S1>/Product1'
 */
    _mm_storeu_pd(&planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[i], _mm_add_pd(_mm_mul_pd(tmp_2, tmp_3), tmp_4));
    /* {S!d4250}Update for UnitDelay: '<S2>/UD' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_4 = _mm_loadu_pd(&rtb_TSamp[i]);
    _mm_storeu_pd(&planar_robot3dof_FD0_DW.UD_DSTATE[i], tmp_4);
    /* {S!d4252}Update for UnitDelay: '<S3>/UD' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_4 = _mm_loadu_pd(&rtb_TSamp_f[i]);
    _mm_storeu_pd(&planar_robot3dof_FD0_DW.UD_DSTATE_n[i], tmp_4);
    /* {S!d4254}Outport: '<Root>/joint_acc' incorporates:
 *  Product: '<S1>/Product1'
 */
    _mm_storeu_pd(&planar_robot3dof_FD0_Y.joint_acc[i], tmp_3);
    /* {S!d4256}Outport: '<Root>/TCP_pos' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_3 = _mm_loadu_pd(&rtb_pos_tcp[i]);
    _mm_storeu_pd(&planar_robot3dof_FD0_Y.TCP_pos[i], tmp_3);
    /* {S!d4258}Outport: '<Root>/TCP_vel' incorporates:
 *  Product: '<S1>/Product1'
 */
    tmp_3 = _mm_loadu_pd(&rtb_Diff[i]);
    _mm_storeu_pd(&planar_robot3dof_FD0_Y.TCP_vel[i], tmp_3);
    /* {E!d4169}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
}
/* {S!d4171}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
for (i = 2; i < 3; i++) {
    /* {S!d4260}Product: '<S1>/Product1' */
    m_tmp_0 = (tmp[i + 3] * m + tmp[i] * b_m) + tmp[i + 6] * c_m;
    /* {S!d4262}DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
 */
    m_tmp = planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[i];
    /* {S!d4264}Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
 *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
 */
    planar_robot3dof_FD0_DW.DiscreteTimeIntegrator1_DSTATE[i] += 0.001 * m_tmp;
    /* {S!d4266}Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
 *  Product: '<S1>/Product1'
 */
    planar_robot3dof_FD0_DW.DiscreteTimeIntegrator_DSTATE[i] = 0.001 * m_tmp_0 + m_tmp;
    /* {S!d4268}Update for UnitDelay: '<S2>/UD' */
    planar_robot3dof_FD0_DW.UD_DSTATE[i] = rtb_TSamp[i];
    /* {S!d4270}Update for UnitDelay: '<S3>/UD' */
    planar_robot3dof_FD0_DW.UD_DSTATE_n[i] = rtb_TSamp_f[i];
    /* {S!d4272}Outport: '<Root>/joint_acc' incorporates:
 *  Product: '<S1>/Product1'
 */
    planar_robot3dof_FD0_Y.joint_acc[i] = m_tmp_0;
    /* {S!d4274}Outport: '<Root>/TCP_pos' */
    planar_robot3dof_FD0_Y.TCP_pos[i] = rtb_pos_tcp[i];
    /* {S!d4276}Outport: '<Root>/TCP_vel' */
    planar_robot3dof_FD0_Y.TCP_vel[i] = rtb_Diff[i];
}
/* {E!d4171}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 17, fcnProtoType)>
%endfunction

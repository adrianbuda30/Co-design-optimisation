%implements s2_b0_4751q_Functions "C"

%function planar_robot3dof_FD0_eye_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
std::memset(&b_I[0], 0, 9U * sizeof(real_T));
b_I[0] = 1.0;
b_I[4] = 1.0;
b_I[8] = 1.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_eye(\
%assign comma = ""
%<comma>real_T b_I[9]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_diag_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
std::memset(&d[0], 0, 9U * sizeof(real_T));
d[0] = v[0];
d[4] = v[1];
d[8] = v[2];
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_diag(\
%assign comma = ""
%<comma>const real_T v[3]\
%assign comma = ", "
%<comma>real_T d[9]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_repmat_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
static const int8_T a[6]{ 0, 0, 0, 0, 0, 1 };
for ( int32_T itilerow{0}; itilerow < 3; itilerow++) {
    int32_T ibcol;
    ibcol = itilerow * 6;
    for ( int32_T k{0}; k < 6; k++) {
        b[ibcol + k] = a[k];
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_repmat(\
%assign comma = ""
%<comma>real_T b[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_all_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
boolean_T exitg1;
boolean_T y;
y = true;
k = 0;
exitg1 = false;
while ((!exitg1) && (k < 3)) {
    if (!x[k]) {
        y = false;
        exitg1 = true;
    } else {
        k++;
    }
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T planar_robot3dof_FD0_all(\
%assign comma = ""
%<comma>const boolean_T x[3]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_mtimes_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T m;
m = A_size[0];
C_size[0] = A_size[0];
C_size[1] = 4;
for ( int32_T j{0}; j < 4; j++) {
    int32_T boffset;
    int32_T coffset;
    int32_T scalarLB;
    int32_T vectorUB;
    coffset = j * m;
    boffset = j << 2;
    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for ( int32_T i{0}; i <= vectorUB; i += 2) {
        _mm_storeu_pd(&C_data[coffset + i], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_loadu_pd(&A_data[i]), _mm_set1_pd(B[boffset])), _mm_mul_pd(_mm_loadu_pd(&A_data[A_size[0] + i]), _mm_set1_pd(B[boffset + 1]))), _mm_mul_pd(_mm_loadu_pd(&A_data[(A_size[0] << 1) + i]), _mm_set1_pd(B[boffset + 2]))), _mm_mul_pd(_mm_loadu_pd(&A_data[3 * A_size[0] + i]), _mm_set1_pd(B[boffset + 3]))));
    }
    for ( int32_T i{scalarLB}; i < m; i++) {
        C_data[coffset + i] = ((A_data[A_size[0] + i] * B[boffset + 1] + A_data[i] * B[boffset]) + A_data[(A_size[0] << 1) + i] * B[boffset + 2]) + A_data[3 * A_size[0] + i] * B[boffset + 3];
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_mtimes(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>const real_T B[16]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 4, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_mtimes_j_Fcn5(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b;
C_size[0] = 6;
C_size[1] = B_size[1];
b = B_size[1];
for ( int32_T j{0}; j < b; j++) {
    int32_T coffset_tmp;
    coffset_tmp = j * 6;
    for ( int32_T i{0}; i < 6; i++) {
        real_T s;
        s = 0.0;
        for ( int32_T k{0}; k < 6; k++) {
            s += A[k * 6 + i] * B_data[coffset_tmp + k];
        }
        C_data[coffset_tmp + i] = s;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_mtimes_j(\
%assign comma = ""
%<comma>const real_T A[36]\
%assign comma = ", "
%<comma>const real_T B_data[]\
%assign comma = ", "
%<comma>const int32_T B_size[2]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_rob_binary_expand_op_hym_Fcn6(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
__m128d tmp;
__m128d tmp_0;
real_T in5_0[36];
real_T in4_data[12];
real_T tmp_data[12];
real_T tmp_data_0[12];
real_T in5_1;
int32_T in4_size[2];
int32_T tmp_size[2];
int32_T tmp_size_0[2];
int32_T aux_0_1;
int32_T aux_1_1;
int32_T i;
int32_T in5_tmp;
int32_T loop_ub;
int32_T stride_0_1;
int32_T stride_1_1;
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,6,0,0)
%<SLibCG_AccessArg(0 ,6, 2)>
%endif

/* {S!d4289}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4292}MATLAB Function: '<S1>/calcSysMatrices' */
in4_size[0] = 6;
in4_size[1] = in2;
for (i = 0; i < in2; i++) {
    for (in5_tmp = 0; in5_tmp < 6; in5_tmp++) {
        in4_data[in5_tmp + 6 * i] = in4[6 * i + in5_tmp];
    }
}
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["in3", "in4_data", "in4_size", "tmp_data", "tmp_size"], 0, 6, 0))>;
in5_0[18] = 0.0;
in5_0[24] = -in6[2];
in5_0[30] = in6[1];
in5_0[19] = in6[2];
in5_0[25] = 0.0;
in5_0[31] = -in6[0];
in5_0[20] = -in6[1];
in5_0[26] = in6[0];
in5_0[32] = 0.0;
for (i = 0; i < 3; i++) {
    in5_1 = in5[3 * i];
    in5_0[6 * i] = in5_1;
    in5_0[6 * i + 3] = 0.0;
    in5_tmp = (i + 3) * 6;
    in5_0[in5_tmp + 3] = in5_1;
    in5_1 = in5[3 * i + 1];
    in5_0[6 * i + 1] = in5_1;
    in5_0[6 * i + 4] = 0.0;
    in5_0[in5_tmp + 4] = in5_1;
    in5_1 = in5[3 * i + 2];
    in5_0[6 * i + 2] = in5_1;
    in5_0[6 * i + 5] = 0.0;
    in5_0[in5_tmp + 5] = in5_1;
}
in4_size[0] = 6;
in4_size[1] = in2;
for (i = 0; i < in2; i++) {
    for (in5_tmp = 0; in5_tmp < 6; in5_tmp++) {
        in4_data[in5_tmp + 6 * i] = in7[6 * i + in5_tmp];
    }
}
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_j", ["in5_0", "in4_data", "in4_size", "tmp_data_0", "tmp_size_0"], 0, 6, 1))>;
stride_0_1 = (tmp_size[1] != 1);
stride_1_1 = (tmp_size_0[1] != 1);
aux_0_1 = 0;
aux_1_1 = 0;
loop_ub = tmp_size_0[1] == 1 ? tmp_size[1] : tmp_size_0[1];
for (i = 0; i < loop_ub; i++) {
    for (in5_tmp = 0; in5_tmp <= 4; in5_tmp += 2) {
        tmp = _mm_loadu_pd(&tmp_data[6 * aux_0_1 + in5_tmp]);
        tmp_0 = _mm_loadu_pd(&tmp_data_0[6 * aux_1_1 + in5_tmp]);
        _mm_storeu_pd(&in1[in5_tmp + 6 * i], _mm_sub_pd(tmp, tmp_0));
    }
    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
}
/* {E!d4292}End of MATLAB Function: '<S1>/calcSysMatrices' */
/* {E!d4289}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_rob_binary_expand_op_hym(\
%assign comma = ""
%<comma>real_T in1[18]\
%assign comma = ", "
%<comma>int32_T in2\
%assign comma = ", "
%<comma>const real_T in3[36]\
%assign comma = ", "
%<comma>const real_T in4[18]\
%assign comma = ", "
%<comma>const real_T in5[9]\
%assign comma = ", "
%<comma>const real_T in6[6]\
%assign comma = ", "
%<comma>const real_T in7[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 6, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_mtimes_ji_Fcn7(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T m;
m = A_size[1];
C_size[0] = A_size[1];
C_size[1] = 6;
for ( int32_T j{0}; j < 6; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j * m;
    boffset = j * B_size[0];
    for ( int32_T i{0}; i < m; i++) {
        real_T s;
        int32_T aoffset;
        aoffset = i * 6;
        s = 0.0;
        for ( int32_T k{0}; k < 6; k++) {
            s += A_data[aoffset + k] * B_data[boffset + k];
        }
        C_data[coffset + i] = s;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_mtimes_ji(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>const real_T B_data[]\
%assign comma = ", "
%<comma>const int32_T B_size[2]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 7, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD0_mtimes_jiw_Fcn8(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b;
int32_T m;
m = A_size[0];
C_size[0] = A_size[0];
C_size[1] = B_size[1];
b = B_size[1];
for ( int32_T j{0}; j < b; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j * m;
    boffset = j * 6;
    for ( int32_T i{0}; i < m; i++) {
        real_T s;
        s = 0.0;
        for ( int32_T k{0}; k < 6; k++) {
            s += A_data[k * A_size[0] + i] * B_data[boffset + k];
        }
        C_data[coffset + i] = s;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD0_mtimes_jiw(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>const real_T B_data[]\
%assign comma = ", "
%<comma>const int32_T B_size[2]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 8, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robo_binary_expand_op_hy_Fcn9(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T in4_data[18];
real_T in1_data[9];
real_T tmp_data[9];
int32_T in4_size[2];
int32_T tmp_size[2];
int32_T aux_0_1;
int32_T aux_1_1;
int32_T i;
int32_T i_0;
int32_T loop_ub;
int32_T loop_ub_0;
int32_T stride_0_0_tmp;
int32_T stride_1_0;
int32_T stride_1_1;
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,9,0,0)
%<SLibCG_AccessArg(0 ,9, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(0,9,0,1)
%<SLibCG_AccessArg(0 ,9, 3)>
%endif

/* {S!d4285}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4288}MATLAB Function: '<S1>/calcSysMatrices' */
in4_size[0] = 6;
in4_size[1] = in2 + 1;
for (i_0 = 0; i_0 <= in2; i_0++) {
    for (i = 0; i < 6; i++) {
        in4_data[i + 6 * i_0] = in4[6 * i_0 + i];
    }
}
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["in3_data", "in3_size", "in4_data", "in4_size", "tmp_data", "tmp_size"], 0, 9, 0))>;
loop_ub_0 = tmp_size[0] == 1 ? in2 + 1 : tmp_size[0];
loop_ub = tmp_size[1] == 1 ? in2 + 1 : tmp_size[1];
stride_0_0_tmp = (in2 + 1 != 1);
stride_1_0 = (tmp_size[0] != 1);
stride_1_1 = (tmp_size[1] != 1);
aux_0_1 = 0;
aux_1_1 = 0;
for (i_0 = 0; i_0 < loop_ub; i_0++) {
    for (i = 0; i < loop_ub_0; i++) {
        in1_data[i + loop_ub_0 * i_0] = in1[i * stride_0_0_tmp + 3 * aux_0_1] + tmp_data[i * stride_1_0 + tmp_size[0] * aux_1_1];
    }
    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_0_tmp;
}
for (i_0 = 0; i_0 < loop_ub; i_0++) {
    for (i = 0; i < loop_ub_0; i++) {
        in1[i + 3 * i_0] = in1_data[loop_ub_0 * i_0 + i];
    }
}
/* {E!d4288}End of MATLAB Function: '<S1>/calcSysMatrices' */
/* {E!d4285}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robo_binary_expand_op_hy(\
%assign comma = ""
%<comma>real_T in1[9]\
%assign comma = ", "
%<comma>int32_T in2\
%assign comma = ", "
%<comma>const real_T in3_data[]\
%assign comma = ", "
%<comma>const int32_T in3_size[2]\
%assign comma = ", "
%<comma>const real_T in4[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 9, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_FD_mtimes_jiwf_Fcn10(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T m;
m = A_size[1];
C_size[0] = A_size[1];
C_size[1] = 6;
for ( int32_T j{0}; j < 6; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j * m;
    boffset = j * 6;
    for ( int32_T i{0}; i < m; i++) {
        real_T s;
        int32_T aoffset;
        aoffset = i * 6;
        s = 0.0;
        for ( int32_T k{0}; k < 6; k++) {
            s += A_data[aoffset + k] * B[boffset + k];
        }
        C_data[coffset + i] = s;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_FD_mtimes_jiwf(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>const real_T B[36]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 10, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot_binary_expand_op_h_Fcn11(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T in4_0[36];
real_T in3_data[18];
real_T in3_data_0[18];
real_T tmp_data_1[18];
real_T in1_data[9];
real_T tmp_data[9];
real_T tmp_data_0[9];
int32_T in3_size[2];
int32_T in3_size_0[2];
int32_T tmp_size[2];
int32_T tmp_size_0[2];
int32_T aux_0_1;
int32_T aux_1_1;
int32_T aux_2_1;
int32_T i;
int32_T in4_tmp;
int32_T in4_tmp_0;
int32_T loop_ub;
int32_T stride_0_0_tmp;
int32_T stride_1_0;
int32_T stride_1_1;
int32_T stride_2_0;
int32_T stride_2_1;
%assign _modelSS = ""

%if SLibCG_FcnCallArgAccessed(0,11,1,0)
%<SLibCG_AccessArg(0 ,11, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(0,11,1,1)
%<SLibCG_AccessArg(0 ,11, 8)>
%endif

/* {S!d4281}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4284}MATLAB Function: '<S1>/calcSysMatrices' */
in3_size[0] = 6;
in3_size[1] = in2 + 1;
for (i = 0; i <= in2; i++) {
    for (in4_tmp = 0; in4_tmp < 6; in4_tmp++) {
        in3_data[in4_tmp + 6 * i] = in3[6 * i + in4_tmp];
    }
}
for (i = 0; i < 3; i++) {
    in4_0[6 * i] = in5[3 * i] * in4;
    in4_tmp = (i + 3) * 6;
    in4_0[in4_tmp] = -in6[i];
    in4_0[6 * i + 3] = in6[3 * i];
    in4_0[in4_tmp + 3] = in7[3 * i] - in7[i];
    in4_tmp_0 = 3 * i + 1;
    in4_0[6 * i + 1] = in5[in4_tmp_0] * in4;
    in4_0[in4_tmp + 1] = -in6[i + 3];
    in4_0[6 * i + 4] = in6[in4_tmp_0];
    in4_0[in4_tmp + 4] = in7[in4_tmp_0] - in7[i + 3];
    in4_tmp_0 = 3 * i + 2;
    in4_0[6 * i + 2] = in5[in4_tmp_0] * in4;
    in4_0[in4_tmp + 2] = -in6[i + 6];
    in4_0[6 * i + 5] = in6[in4_tmp_0];
    in4_0[in4_tmp + 5] = in7[in4_tmp_0] - in7[i + 6];
}
in3_size_0[0] = 6;
in3_size_0[1] = in2 + 1;
for (i = 0; i <= in2; i++) {
    for (in4_tmp = 0; in4_tmp < 6; in4_tmp++) {
        in3_data_0[in4_tmp + 6 * i] = in3[6 * i + in4_tmp];
    }
}
%<(SLibCGCallSubFcn("planar_robot3dof_FD_mtimes_jiwf", ["in3_data", "in3_size", "in4_0", "tmp_data_1", "tmp_size_0"], 0, 11, 2))>;
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["tmp_data_1", "tmp_size_0", "in3_data_0", "in3_size_0", "tmp_data", "tmp_size"], 0, 11, 0))>;
in3_size[0] = 6;
in3_size[1] = in2 + 1;
for (i = 0; i <= in2; i++) {
    for (in4_tmp = 0; in4_tmp < 6; in4_tmp++) {
        in3_data[in4_tmp + 6 * i] = in9[6 * i + in4_tmp];
    }
}
%<(SLibCGCallSubFcn("planar_robot3dof_FD0_mtimes_jiw", ["in8_data", "in8_size", "in3_data", "in3_size", "tmp_data_0", "tmp_size_0"], 0, 11, 1))>;
in4_tmp_0 = tmp_size_0[0] == 1 ? tmp_size[0] == 1 ? in2 + 1 : tmp_size[0] : tmp_size_0[0];
loop_ub = tmp_size_0[1] == 1 ? tmp_size[1] == 1 ? in2 + 1 : tmp_size[1] : tmp_size_0[1];
stride_0_0_tmp = (in2 + 1 != 1);
stride_1_0 = (tmp_size[0] != 1);
stride_1_1 = (tmp_size[1] != 1);
stride_2_0 = (tmp_size_0[0] != 1);
stride_2_1 = (tmp_size_0[1] != 1);
aux_0_1 = 0;
aux_1_1 = 0;
aux_2_1 = 0;
for (i = 0; i < loop_ub; i++) {
    for (in4_tmp = 0; in4_tmp < in4_tmp_0; in4_tmp++) {
        in1_data[in4_tmp + in4_tmp_0 * i] = (in1[in4_tmp * stride_0_0_tmp + 3 * aux_0_1] + tmp_data[in4_tmp * stride_1_0 + tmp_size[0] * aux_1_1]) + tmp_data_0[in4_tmp * stride_2_0 + tmp_size_0[0] * aux_2_1];
    }
    aux_2_1 += stride_2_1;
    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_0_tmp;
}
for (i = 0; i < loop_ub; i++) {
    for (in4_tmp = 0; in4_tmp < in4_tmp_0; in4_tmp++) {
        in1[in4_tmp + 3 * i] = in1_data[in4_tmp_0 * i + in4_tmp];
    }
}
/* {E!d4284}End of MATLAB Function: '<S1>/calcSysMatrices' */
/* {E!d4281}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot_binary_expand_op_h(\
%assign comma = ""
%<comma>real_T in1[9]\
%assign comma = ", "
%<comma>int32_T in2\
%assign comma = ", "
%<comma>const real_T in3[18]\
%assign comma = ", "
%<comma>real_T in4\
%assign comma = ", "
%<comma>const real_T in5[9]\
%assign comma = ", "
%<comma>const real_T in6[9]\
%assign comma = ", "
%<comma>const real_T in7[9]\
%assign comma = ", "
%<comma>const real_T in8_data[]\
%assign comma = ", "
%<comma>const int32_T in8_size[2]\
%assign comma = ", "
%<comma>const real_T in9[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 11, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof_F_mtimes_jiwfu_Fcn12(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T m;
m = A_size[0];
C_size[0] = A_size[0];
C_size[1] = 3;
for ( int32_T j{0}; j < 3; j++) {
    int32_T coffset;
    int32_T scalarLB;
    int32_T vectorUB;
    coffset = j * m;
    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for ( int32_T i{0}; i <= vectorUB; i += 2) {
        _mm_storeu_pd(&C_data[coffset + i], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_loadu_pd(&A_data[i]), _mm_set1_pd(B[j])), _mm_mul_pd(_mm_loadu_pd(&A_data[A_size[0] + i]), _mm_set1_pd(B[j + 3]))), _mm_mul_pd(_mm_loadu_pd(&A_data[(A_size[0] << 1) + i]), _mm_set1_pd(B[j + 6]))));
    }
    for ( int32_T i{scalarLB}; i < m; i++) {
        C_data[coffset + i] = (A_data[A_size[0] + i] * B[j + 3] + A_data[i] * B[j]) + A_data[(A_size[0] << 1) + i] * B[j + 6];
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof_F_mtimes_jiwfu(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>const real_T B[9]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T C_size[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 12, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3dof__mtimes_jiwfuk_Fcn13(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b;
int32_T scalarLB;
int32_T vectorUB;
*C_size = A_size[0];
b = A_size[0];
scalarLB = (A_size[0] / 2) << 1;
vectorUB = scalarLB - 2;
for ( int32_T i{0}; i <= vectorUB; i += 2) {
    __m128d tmp;
    tmp = _mm_set1_pd(0.0);
    _mm_storeu_pd(&C_data[i], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_loadu_pd(&A_data[i]), tmp), _mm_mul_pd(_mm_loadu_pd(&A_data[A_size[0] + i]), tmp)), _mm_mul_pd(_mm_loadu_pd(&A_data[(A_size[0] << 1) + i]), tmp)));
}
for ( int32_T i{scalarLB}; i < b; i++) {
    C_data[i] = (A_data[A_size[0] + i] * 0.0 + A_data[i] * 0.0) + A_data[(A_size[0] << 1) + i] * 0.0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3dof__mtimes_jiwfuk(\
%assign comma = ""
%<comma>const real_T A_data[]\
%assign comma = ", "
%<comma>const int32_T A_size[2]\
%assign comma = ", "
%<comma>real_T C_data[]\
%assign comma = ", "
%<comma>int32_T *C_size\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 13, fcnProtoType)>
%return fcnBuff
%endfunction

%function planar_robot3d_binary_expand_op_Fcn14(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T in3_data_0[9];
real_T in4_0[9];
real_T tmp_data_0[9];
real_T in1_data[3];
real_T tmp_data[3];
int32_T in3_size_0[2];
int32_T tmp_size_0[2];
int32_T in4_tmp;
int32_T stride_0_1;
int32_T stride_1_1;
int32_T tmp_size;
/* {S!d4277}Outputs for Atomic SubSystem: '<Root>/planar_robot3dof_FD' */
/* {S!d4280}MATLAB Function: '<S1>/calcSysMatrices' */
in3_size_0[0] = in2 + 1;
in3_size_0[1] = 3;
for (tmp_size = 0; tmp_size < 3; tmp_size++) {
    for (in4_tmp = 0; in4_tmp <= in2; in4_tmp++) {
        in3_data_0[in4_tmp + (in2 + 1) * tmp_size] = in3_data[in3_size[0] * tmp_size + in4_tmp];
    }
    in4_tmp = tmp_size << 2;
    in4_0[3 * tmp_size] = in4[in4_tmp];
    in4_0[3 * tmp_size + 1] = in4[in4_tmp + 1];
    in4_0[3 * tmp_size + 2] = in4[in4_tmp + 2];
}
%<(SLibCGCallSubFcn("planar_robot3dof_F_mtimes_jiwfu", ["in3_data_0", "in3_size_0", "in4_0", "tmp_data_0", "tmp_size_0"], 0, 14, 1))>;
%<(SLibCGCallSubFcn("planar_robot3dof__mtimes_jiwfuk", ["tmp_data_0", "tmp_size_0", "tmp_data", "&tmp_size"], 0, 14, 0))>;
in4_tmp = in2 + 1;
stride_0_1 = (in2 + 1 != 1);
stride_1_1 = (tmp_size != 1);
for (tmp_size = 0; tmp_size < in4_tmp; tmp_size++) {
    in1_data[tmp_size] = in1[tmp_size * stride_0_1] + tmp_data[tmp_size * stride_1_1];
}
if ((in2 + 1) - 1 >= 0) {
    std::memcpy(&in1[0], &in1_data[0], static_cast<uint32_T>(in2 + 1) * sizeof(real_T));
}
/* {E!d4280}End of MATLAB Function: '<S1>/calcSysMatrices' */
/* {E!d4277}End of Outputs for SubSystem: '<Root>/planar_robot3dof_FD' */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void planar_robot3d_binary_expand_op(\
%assign comma = ""
%<comma>real_T in1[3]\
%assign comma = ", "
%<comma>int32_T in2\
%assign comma = ", "
%<comma>const real_T in3_data[]\
%assign comma = ", "
%<comma>const int32_T in3_size[2]\
%assign comma = ", "
%<comma>const real_T in4[16]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 14, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_invd3x3_snf_Fcn15(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[9];
real_T absx11;
real_T absx21;
real_T absx31;
int32_T p1;
int32_T p2;
int32_T p3;
std::memcpy(&x[0], &u[0], 9U * sizeof(real_T));
p1 = 1;
p2 = 3;
p3 = 6;
absx11 = std::abs(u[0]);
absx21 = std::abs(u[1]);
absx31 = std::abs(u[2]);
if ((absx21 > absx11) && (absx21 > absx31)) {
    p1 = 4;
    p2 = 0;
    x[0] = u[1];
    x[1] = u[0];
    x[3] = u[4];
    x[4] = u[3];
    x[6] = u[7];
    x[7] = u[6];
} else if (absx31 > absx11) {
    p1 = 7;
    p3 = 0;
    x[2] = x[0];
    x[0] = u[2];
    x[5] = x[3];
    x[3] = u[5];
    x[8] = x[6];
    x[6] = u[8];
}
absx31 = x[1] / x[0];
x[1] = absx31;
absx11 = x[2] / x[0];
x[2] = absx11;
x[4] -= absx31 * x[3];
x[5] -= absx11 * x[3];
x[7] -= absx31 * x[6];
x[8] -= absx11 * x[6];
if (std::abs(x[5]) > std::abs(x[4])) {
    int32_T itmp;
    itmp = p2;
    p2 = p3;
    p3 = itmp;
    x[1] = absx11;
    x[2] = absx31;
    absx11 = x[4];
    x[4] = x[5];
    x[5] = absx11;
    absx11 = x[7];
    x[7] = x[8];
    x[8] = absx11;
}
absx31 = x[5] / x[4];
x[8] -= absx31 * x[7];
absx11 = (x[1] * absx31 - x[2]) / x[8];
absx21 = -(x[7] * absx11 + x[1]) / x[4];
y[p1 - 1] = ((1.0 - x[3] * absx21) - x[6] * absx11) / x[0];
y[p1] = absx21;
y[p1 + 1] = absx11;
absx11 = -absx31 / x[8];
absx21 = (1.0 - x[7] * absx11) / x[4];
y[p2] = -(x[3] * absx21 + x[6] * absx11) / x[0];
y[p2 + 1] = absx21;
y[p2 + 2] = absx11;
absx11 = 1.0 / x[8];
absx21 = -x[7] * absx11 / x[4];
y[p3] = -(x[3] * absx21 + x[6] * absx11) / x[0];
y[p3 + 1] = absx21;
y[p3 + 2] = absx11;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern void rt_invd3x3_snf(\
%assign comma = ""
%<comma>const real_T u[9]\
%assign comma = ", "
%<comma>real_T y[9]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 15, fcnProtoType)>
%return fcnBuff
%endfunction


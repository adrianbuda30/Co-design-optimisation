var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"Sim_Multi/True dynamic system representation\nof a multirotor UAV","ref":false,"files":[{"name":"True0.cpp","type":"source","group":"model","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * True0.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#include \"True0.h\"\n#include \"rtwtypes.h\"\n#include <cmath>\n#include <cstring>\n#include \"True0_private.h\"\n#include \"rt_defines.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n/*\n * This function updates continuous states using the ODE3 fixed-step\n * solver algorithm\n */\nvoid True0::rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\n{\n  /* Solver Matrices */\n  static const real_T rt_ODE3_A[3]{\n    1.0/2.0, 3.0/4.0, 1.0\n  };\n\n  static const real_T rt_ODE3_B[3][3]{\n    { 1.0/2.0, 0.0, 0.0 },\n\n    { 0.0, 3.0/4.0, 0.0 },\n\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\n  };\n\n  time_T t { rtsiGetT(si) };\n\n  time_T tnew { rtsiGetSolverStopTime(si) };\n\n  time_T h { rtsiGetStepSize(si) };\n\n  real_T *x { rtsiGetContStates(si) };\n\n  ODE3_IntgData *id { static_cast<ODE3_IntgData *>(rtsiGetSolverData(si)) };\n\n  real_T *y { id->y };\n\n  real_T *f0 { id->f[0] };\n\n  real_T *f1 { id->f[1] };\n\n  real_T *f2 { id->f[2] };\n\n  real_T hB[3];\n  int_T i;\n  int_T nXc { 17 };\n\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\n\n  /* Save the state values at time t in y, we'll use x as ynew. */\n  (void) std::memcpy(y, x,\n                     static_cast<uint_T>(nXc)*sizeof(real_T));\n\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\n  /* f0 = f(t,y) */\n  rtsiSetdX(si, f0);\n  True0_derivatives();\n\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\n  hB[0] = h * rt_ODE3_B[0][0];\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\n  rtsiSetdX(si, f1);\n  this->step0();\n  True0_derivatives();\n\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\n  for (i = 0; i <= 1; i++) {\n    hB[i] = h * rt_ODE3_B[1][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\n  rtsiSetdX(si, f2);\n  this->step0();\n  True0_derivatives();\n\n  /* tnew = t + hA(3);\n     ynew = y + f*hB(:,3); */\n  for (i = 0; i <= 2; i++) {\n    hB[i] = h * rt_ODE3_B[2][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\n  }\n\n  rtsiSetT(si, tnew);\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\n}\n\nvoid rt_mldivide_U1d3x3_U2d_JBYZyA3A(const real_T u0[9], const real_T u1[3],\n  real_T y[3])\n{\n  real_T A[9];\n  real_T B[3];\n  real_T a21;\n  real_T maxval;\n  real_T x;\n  int32_T THREE;\n  int32_T r1;\n  int32_T r2;\n  std::memcpy(&A[0], &u0[0], 9U * sizeof(real_T));\n  B[0] = u1[0];\n  B[1] = u1[1];\n  B[2] = u1[2];\n  THREE = 2;\n  r1 = 0;\n  r2 = 1;\n  x = A[0];\n  x = std::abs(x);\n  maxval = x;\n  x = A[1];\n  x = std::abs(x);\n  a21 = x;\n  if (a21 > maxval) {\n    maxval = a21;\n    r1 = 1;\n    r2 = 0;\n  }\n\n  x = A[2];\n  x = std::abs(x);\n  a21 = x;\n  if (a21 > maxval) {\n    r1 = 2;\n    r2 = 1;\n    THREE = 0;\n  }\n\n  A[r2] /= A[r1];\n  A[THREE] /= A[r1];\n  A[r2 + 3] -= A[r1 + 3] * A[r2];\n  A[THREE + 3] -= A[r1 + 3] * A[THREE];\n  A[r2 + 6] -= A[r1 + 6] * A[r2];\n  A[THREE + 6] -= A[r1 + 6] * A[THREE];\n  x = A[THREE + 3];\n  x = std::abs(x);\n  a21 = x;\n  x = A[r2 + 3];\n  x = std::abs(x);\n  maxval = x;\n  if (a21 > maxval) {\n    int32_T ONE;\n    ONE = r2 + 1;\n    r2 = THREE;\n    THREE = ONE - 1;\n  }\n\n  A[THREE + 3] /= A[r2 + 3];\n  A[THREE + 6] -= A[THREE + 3] * A[r2 + 6];\n  y[0] = B[r1];\n  y[1] = B[r2] - y[0] * A[r2];\n  y[2] = (B[THREE] - y[0] * A[THREE]) - A[THREE + 3] * y[1];\n  y[2] /= A[THREE + 6];\n  y[0] -= A[r1 + 6] * y[2];\n  y[1] -= A[r2 + 6] * y[2];\n  y[1] /= A[r2 + 3];\n  y[0] -= A[r1 + 3] * y[1];\n  y[0] /= A[r1];\n}\n\nreal_T rt_atan2d_snf(real_T u0, real_T u1)\n{\n  real_T y;\n  if (std::isnan(u0) || std::isnan(u1)) {\n    y = (rtNaN);\n  } else if (std::isinf(u0) && std::isinf(u1)) {\n    int32_T tmp;\n    int32_T tmp_0;\n    if (u1 > 0.0) {\n      tmp = 1;\n    } else {\n      tmp = -1;\n    }\n\n    if (u0 > 0.0) {\n      tmp_0 = 1;\n    } else {\n      tmp_0 = -1;\n    }\n\n    y = std::atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));\n  } else if (u1 == 0.0) {\n    if (u0 > 0.0) {\n      y = RT_PI / 2.0;\n    } else if (u0 < 0.0) {\n      y = -(RT_PI / 2.0);\n    } else {\n      y = 0.0;\n    }\n  } else {\n    y = std::atan2(u0, u1);\n  }\n\n  return y;\n}\n\n/* Model step function for TID0 */\nvoid True0::step0()                    /* Sample time: [0.0s, 0.0s] */\n{\n  /* local scratch DWork variables */\n  int32_T ForEach_itr;\n  real_T rtb_ImpSel_InsertedFor_MotorMat[17];\n  real_T tmp[9];\n  real_T Product1_a_tmp;\n  real_T Product2_i4_tmp;\n  real_T Product_pk_tmp;\n  real_T TrigonometricFunction5_tmp;\n  real_T TrigonometricFunction_tmp;\n  real_T cphi;\n  real_T cpsi;\n  real_T ctheta;\n  real_T phi;\n  real_T psi;\n  real_T psi_tmp;\n  real_T psi_tmp_0;\n  real_T rtb_ImpSel_InsertedFor_RPM_comm;\n  real_T spsi;\n  real_T theta;\n  int32_T i;\n  int32_T tmp_0;\n  int8_T rtAction;\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* set solver stop time */\n    if (!((&True0_M)->Timing.clockTick0+1)) {\n      rtsiSetSolverStopTime(&(&True0_M)->solverInfo, (((&True0_M)\n        ->Timing.clockTickH0 + 1) * (&True0_M)->Timing.stepSize0 * 4294967296.0));\n    } else {\n      rtsiSetSolverStopTime(&(&True0_M)->solverInfo, (((&True0_M)\n        ->Timing.clockTick0 + 1) * (&True0_M)->Timing.stepSize0 + (&True0_M)\n        ->Timing.clockTickH0 * (&True0_M)->Timing.stepSize0 * 4294967296.0));\n    }\n\n    /* Update the flag to indicate when data transfers from\n     *  Sample time: [0.001s, 0.0s] to Sample time: [0.002s, 0.0s]  */\n    ((&True0_M)->Timing.RateInteraction.TID1_2)++;\n    if (((&True0_M)->Timing.RateInteraction.TID1_2) > 1) {\n      (&True0_M)->Timing.RateInteraction.TID1_2 = 0;\n    }\n  }                                    /* end MajorTimeStep */\n\n  /* Update absolute time of base rate at minor time step */\n  if (rtmIsMinorTimeStep((&True0_M))) {\n    (&True0_M)->Timing.t[0] = rtsiGetT(&(&True0_M)->solverInfo);\n  }\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* MATLAB Function: '<S7>/MATLAB Function' incorporates:\n     *  Constant: '<S2>/Constant'\n     */\n    /* :  roll  = quat_input(1); */\n    /* :  pitch = quat_input(2); */\n    /* :  yaw   = quat_input(3); */\n    /* :  phi   = roll / 2; */\n    phi = True0_P.Att_init[0] / 2.0;\n\n    /* :  theta = pitch / 2; */\n    theta = True0_P.Att_init[1] / 2.0;\n\n    /* :  psi   = yaw / 2; */\n    psi = True0_P.Att_init[2] / 2.0;\n\n    /* :  cphi   = cos(phi); */\n    cphi = std::cos(phi);\n\n    /* :  sphi   = sin(phi); */\n    phi = std::sin(phi);\n\n    /* :  ctheta = cos(theta); */\n    ctheta = std::cos(theta);\n\n    /* :  stheta = sin(theta); */\n    theta = std::sin(theta);\n\n    /* :  cpsi   = cos(psi); */\n    cpsi = std::cos(psi);\n\n    /* :  spsi   = sin(psi); */\n    spsi = std::sin(psi);\n\n    /* :  q0 = cphi * ctheta * cpsi + sphi * stheta * spsi; */\n    psi_tmp = cphi * ctheta;\n    psi_tmp_0 = phi * theta;\n    psi = psi_tmp * cpsi + psi_tmp_0 * spsi;\n\n    /* :  q1 = sphi * ctheta * cpsi - cphi * stheta * spsi; */\n    cphi *= theta;\n    ctheta *= phi;\n    phi = ctheta * cpsi - cphi * spsi;\n\n    /* :  q2 = cphi * stheta * cpsi + sphi * ctheta * spsi; */\n    ctheta = cphi * cpsi + ctheta * spsi;\n\n    /* :  q3 = cphi * ctheta * spsi - sphi * stheta * cpsi; */\n    cphi = psi_tmp * spsi - psi_tmp_0 * cpsi;\n\n    /* :  if (q0 < 0.0) */\n    if (psi < 0.0) {\n      /* :  q0 = -q0; */\n      psi = -psi;\n\n      /* :  q1 = -q1; */\n      phi = -phi;\n\n      /* :  q2 = -q2; */\n      ctheta = -ctheta;\n\n      /* :  q3 = -q3; */\n      cphi = -cphi;\n    }\n\n    /* :  quat_output = [0 0 0 0]'; */\n    /* :  quat_output(1,1) = q0; */\n    True0_B.quat_output[0] = psi;\n\n    /* :  quat_output(2,1) = q1; */\n    True0_B.quat_output[1] = phi;\n\n    /* :  quat_output(3,1) = q2; */\n    True0_B.quat_output[2] = ctheta;\n\n    /* :  quat_output(4,1) = q3; */\n    True0_B.quat_output[3] = cphi;\n\n    /* End of MATLAB Function: '<S7>/MATLAB Function' */\n  }\n\n  /* Integrator: '<S7>/Q-Integrator' */\n  if (True0_DW.QIntegrator_IWORK != 0) {\n    True0_X.QIntegrator_CSTATE[0] = True0_B.quat_output[0];\n    True0_X.QIntegrator_CSTATE[1] = True0_B.quat_output[1];\n    True0_X.QIntegrator_CSTATE[2] = True0_B.quat_output[2];\n    True0_X.QIntegrator_CSTATE[3] = True0_B.quat_output[3];\n  }\n\n  /* Integrator: '<S7>/Q-Integrator' */\n  psi = True0_X.QIntegrator_CSTATE[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.QIntegrator[0] = psi;\n\n  /* Math: '<S22>/transpose' */\n  True0_B.transpose[0] = psi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S22>/Product' */\n  Product_pk_tmp = psi * psi;\n\n  /* Integrator: '<S7>/Q-Integrator' */\n  psi = True0_X.QIntegrator_CSTATE[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.QIntegrator[1] = psi;\n\n  /* Math: '<S22>/transpose' */\n  True0_B.transpose[1] = psi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S22>/Product' */\n  Product_pk_tmp += psi * psi;\n\n  /* Integrator: '<S7>/Q-Integrator' */\n  psi = True0_X.QIntegrator_CSTATE[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.QIntegrator[2] = psi;\n\n  /* Math: '<S22>/transpose' */\n  True0_B.transpose[2] = psi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S22>/Product' */\n  Product_pk_tmp += psi * psi;\n\n  /* Integrator: '<S7>/Q-Integrator' */\n  psi = True0_X.QIntegrator_CSTATE[3];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.QIntegrator[3] = psi;\n\n  /* Math: '<S22>/transpose' */\n  True0_B.transpose[3] = psi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S22>/Product' */\n  Product_pk_tmp += psi * psi;\n\n  /* Product: '<S22>/Product' */\n  True0_B.Product = Product_pk_tmp;\n\n  /* Sqrt: '<S21>/Sqrt' */\n  True0_B.Sqrt = std::sqrt(True0_B.Product);\n\n  /* ComplexToRealImag: '<S21>/Complex to Real-Imag' */\n  True0_B.ComplextoRealImag = True0_B.Sqrt;\n\n  /* Product: '<S18>/Divide' incorporates:\n   *  Integrator: '<S7>/Q-Integrator'\n   */\n  True0_B.Divide[0] = True0_B.QIntegrator[0] / True0_B.ComplextoRealImag;\n  True0_B.Divide[1] = True0_B.QIntegrator[1] / True0_B.ComplextoRealImag;\n  True0_B.Divide[2] = True0_B.QIntegrator[2] / True0_B.ComplextoRealImag;\n  True0_B.Divide[3] = True0_B.QIntegrator[3] / True0_B.ComplextoRealImag;\n\n  /* Product: '<S23>/Product' incorporates:\n   *  Product: '<S24>/Product'\n   *  Product: '<S25>/Product'\n   */\n  cphi = True0_B.Divide[0] * True0_B.Divide[0];\n\n  /* Product: '<S23>/Product' */\n  True0_B.Product_o = cphi;\n\n  /* Product: '<S23>/Product2' incorporates:\n   *  Product: '<S24>/Product2'\n   *  Product: '<S25>/Product2'\n   */\n  phi = True0_B.Divide[1] * True0_B.Divide[1];\n\n  /* Product: '<S23>/Product2' */\n  True0_B.Product2 = phi;\n\n  /* Product: '<S23>/Product3' incorporates:\n   *  Product: '<S24>/Product3'\n   *  Product: '<S25>/Product3'\n   */\n  ctheta = True0_B.Divide[2] * True0_B.Divide[2];\n\n  /* Product: '<S23>/Product3' */\n  True0_B.Product3 = ctheta;\n\n  /* Product: '<S23>/Product4' incorporates:\n   *  Product: '<S24>/Product4'\n   *  Product: '<S25>/Product4'\n   */\n  theta = True0_B.Divide[3] * True0_B.Divide[3];\n\n  /* Product: '<S23>/Product4' */\n  True0_B.Product4 = theta;\n\n  /* Sum: '<S23>/Add' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   *  Fcn: '<S8>/Fcn4'\n   */\n  psi = ((True0_B.Product_o + True0_B.Product2) - True0_B.Product3) -\n    True0_B.Product4;\n  True0_B.VectorConcatenate[0] = psi;\n\n  /* Product: '<S28>/Product' incorporates:\n   *  Product: '<S26>/Product'\n   */\n  cpsi = True0_B.Divide[1] * True0_B.Divide[2];\n\n  /* Product: '<S28>/Product' */\n  True0_B.Product_p = cpsi;\n\n  /* Product: '<S28>/Product2' incorporates:\n   *  Product: '<S26>/Product2'\n   */\n  spsi = True0_B.Divide[0] * True0_B.Divide[3];\n\n  /* Product: '<S28>/Product2' */\n  True0_B.Product2_n = spsi;\n\n  /* Sum: '<S28>/Add' */\n  True0_B.Add = True0_B.Product_p - True0_B.Product2_n;\n\n  /* Gain: '<S28>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[1] = True0_P.Gain_Gain * True0_B.Add;\n\n  /* Product: '<S30>/Product' incorporates:\n   *  Product: '<S27>/Product'\n   */\n  psi_tmp = True0_B.Divide[1] * True0_B.Divide[3];\n\n  /* Product: '<S30>/Product' */\n  True0_B.Product_l = psi_tmp;\n\n  /* Product: '<S30>/Product2' incorporates:\n   *  Product: '<S27>/Product2'\n   */\n  psi_tmp_0 = True0_B.Divide[0] * True0_B.Divide[2];\n\n  /* Product: '<S30>/Product2' */\n  True0_B.Product2_nt = psi_tmp_0;\n\n  /* Sum: '<S30>/Add' */\n  True0_B.Add_c = True0_B.Product_l + True0_B.Product2_nt;\n\n  /* Gain: '<S30>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[2] = True0_P.Gain_Gain_e * True0_B.Add_c;\n\n  /* Product: '<S26>/Product' */\n  True0_B.Product_c = cpsi;\n\n  /* Product: '<S26>/Product2' */\n  True0_B.Product2_i = spsi;\n\n  /* Sum: '<S26>/Add' incorporates:\n   *  Fcn: '<S8>/Fcn2'\n   */\n  cpsi = True0_B.Product_c + True0_B.Product2_i;\n\n  /* Sum: '<S26>/Add' */\n  True0_B.Add_cz = cpsi;\n\n  /* Gain: '<S26>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[3] = True0_P.Gain_Gain_ex * True0_B.Add_cz;\n\n  /* Product: '<S24>/Product' */\n  True0_B.Product_lj = cphi;\n\n  /* Product: '<S24>/Product2' */\n  True0_B.Product2_ib = phi;\n\n  /* Product: '<S24>/Product3' */\n  True0_B.Product3_i = ctheta;\n\n  /* Product: '<S24>/Product4' */\n  True0_B.Product4_p = theta;\n\n  /* Sum: '<S24>/Add' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   *  Sum: '<S25>/Add'\n   */\n  spsi = True0_B.Product_lj - True0_B.Product2_ib;\n  True0_B.VectorConcatenate[4] = (spsi + True0_B.Product3_i) -\n    True0_B.Product4_p;\n\n  /* Product: '<S31>/Product' incorporates:\n   *  Product: '<S29>/Product'\n   */\n  Product_pk_tmp = True0_B.Divide[2] * True0_B.Divide[3];\n\n  /* Product: '<S31>/Product' */\n  True0_B.Product_pk = Product_pk_tmp;\n\n  /* Product: '<S31>/Product2' incorporates:\n   *  Product: '<S29>/Product2'\n   */\n  Product2_i4_tmp = True0_B.Divide[0] * True0_B.Divide[1];\n\n  /* Product: '<S31>/Product2' */\n  True0_B.Product2_i4 = Product2_i4_tmp;\n\n  /* Sum: '<S31>/Add' */\n  True0_B.Add_h = True0_B.Product_pk - True0_B.Product2_i4;\n\n  /* Gain: '<S31>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[5] = True0_P.Gain_Gain_f * True0_B.Add_h;\n\n  /* Product: '<S27>/Product' */\n  True0_B.Product_lb = psi_tmp;\n\n  /* Product: '<S27>/Product2' */\n  True0_B.Product2_o = psi_tmp_0;\n\n  /* Sum: '<S27>/Add' incorporates:\n   *  Fcn: '<S8>/Fcn1'\n   */\n  psi_tmp = True0_B.Product_lb - True0_B.Product2_o;\n\n  /* Sum: '<S27>/Add' */\n  True0_B.Add_i = psi_tmp;\n\n  /* Gain: '<S27>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[6] = True0_P.Gain_Gain_c * True0_B.Add_i;\n\n  /* Product: '<S29>/Product' */\n  True0_B.Product_f = Product_pk_tmp;\n\n  /* Product: '<S29>/Product2' */\n  True0_B.Product2_b = Product2_i4_tmp;\n\n  /* Sum: '<S29>/Add' incorporates:\n   *  Fcn: '<S8>/Fcn'\n   */\n  psi_tmp_0 = True0_B.Product_f + True0_B.Product2_b;\n\n  /* Sum: '<S29>/Add' */\n  True0_B.Add_k = psi_tmp_0;\n\n  /* Gain: '<S29>/Gain' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate[7] = True0_P.Gain_Gain_k * True0_B.Add_k;\n\n  /* Product: '<S25>/Product' */\n  True0_B.Product_cs = cphi;\n\n  /* Product: '<S25>/Product2' */\n  True0_B.Product2_k = phi;\n\n  /* Product: '<S25>/Product3' */\n  True0_B.Product3_k = ctheta;\n\n  /* Product: '<S25>/Product4' */\n  True0_B.Product4_b = theta;\n\n  /* Sum: '<S25>/Add' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   *  Fcn: '<S8>/Fcn3'\n   */\n  spsi = (spsi - True0_B.Product3_k) + True0_B.Product4_b;\n  True0_B.VectorConcatenate[8] = spsi;\n  for (i = 0; i < 3; i++) {\n    /* Math: '<S4>/Math Function2' incorporates:\n     *  Concatenate: '<S32>/Vector Concatenate'\n     */\n    True0_B.DCM_bi[3 * i] = True0_B.VectorConcatenate[i];\n    True0_B.DCM_bi[3 * i + 1] = True0_B.VectorConcatenate[i + 3];\n    True0_B.DCM_bi[3 * i + 2] = True0_B.VectorConcatenate[i + 6];\n\n    /* Integrator: '<S2>/V_b' */\n    True0_B.V_b[i] = True0_X.V_b_CSTATE[i];\n  }\n\n  /* Product: '<S4>/Product' incorporates:\n   *  Integrator: '<S2>/V_b'\n   *  Math: '<S4>/Math Function2'\n   */\n  std::memcpy(&tmp[0], &True0_B.DCM_bi[0], 9U * sizeof(real_T));\n  phi = True0_B.V_b[0];\n  ctheta = True0_B.V_b[1];\n  theta = True0_B.V_b[2];\n  for (i = 0; i < 3; i++) {\n    /* Product: '<S4>/Product' */\n    cphi = tmp[i] * phi;\n\n    /* Math: '<S5>/Math Function2' incorporates:\n     *  Concatenate: '<S32>/Vector Concatenate'\n     */\n    True0_B.DCM_bi_c[3 * i] = True0_B.VectorConcatenate[i];\n\n    /* Product: '<S4>/Product' */\n    cphi += tmp[i + 3] * ctheta;\n\n    /* Math: '<S5>/Math Function2' incorporates:\n     *  Concatenate: '<S32>/Vector Concatenate'\n     */\n    True0_B.DCM_bi_c[3 * i + 1] = True0_B.VectorConcatenate[i + 3];\n\n    /* Product: '<S4>/Product' */\n    cphi += tmp[i + 6] * theta;\n\n    /* Math: '<S5>/Math Function2' incorporates:\n     *  Concatenate: '<S32>/Vector Concatenate'\n     */\n    True0_B.DCM_bi_c[3 * i + 2] = True0_B.VectorConcatenate[i + 6];\n\n    /* Product: '<S4>/Product' */\n    True0_B.Product_b[i] = cphi;\n  }\n\n  /* RateTransition: '<S1>/Rate Transition1' */\n  if (rtmIsMajorTimeStep((&True0_M)) && ((&True0_M)\n       ->Timing.RateInteraction.TID1_2 == 1)) {\n    /* RateTransition: '<S1>/Rate Transition1' */\n    True0_B.RateTransition1[0] = True0_DW.RateTransition1_Buffer0[0];\n    True0_B.RateTransition1[1] = True0_DW.RateTransition1_Buffer0[1];\n    True0_B.RateTransition1[2] = True0_DW.RateTransition1_Buffer0[2];\n    True0_B.RateTransition1[3] = True0_DW.RateTransition1_Buffer0[3];\n  }\n\n  /* End of RateTransition: '<S1>/Rate Transition1' */\n\n  /* Integrator: '<S2>/omega' */\n  True0_B.omega[0] = True0_X.omega_CSTATE[0];\n  True0_B.omega[1] = True0_X.omega_CSTATE[1];\n  True0_B.omega[2] = True0_X.omega_CSTATE[2];\n\n  /* Product: '<S111>/Product' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   *  Inport: '<Root>/Wind_i'\n   */\n  std::memcpy(&tmp[0], &True0_B.VectorConcatenate[0], 9U * sizeof(real_T));\n  phi = True0_U.Wind_i[0];\n  ctheta = True0_U.Wind_i[1];\n  theta = True0_U.Wind_i[2];\n  for (i = 0; i < 3; i++) {\n    /* Product: '<S111>/Product' */\n    cphi = tmp[i] * phi;\n    cphi += tmp[i + 3] * ctheta;\n    cphi += tmp[i + 6] * theta;\n    True0_B.Product_oc[i] = cphi;\n\n    /* Sum: '<S56>/Sum1' incorporates:\n     *  Integrator: '<S2>/V_b'\n     *  Product: '<S111>/Product'\n     */\n    True0_B.TrueairspeedBodyaxes[i] = True0_B.V_b[i] - cphi;\n  }\n\n  /* Outputs for Iterator SubSystem: '<S37>/For Each Subsystem' incorporates:\n   *  ForEach: '<S55>/For Each'\n   */\n  for (ForEach_itr = 0; ForEach_itr < 4; ForEach_itr++) {\n    /* ForEachSliceSelector generated from: '<S55>/MotorMatrix_real' incorporates:\n     *  Inport: '<Root>/MotorMatrix_real'\n     */\n    for (i = 0; i < 17; i++) {\n      rtb_ImpSel_InsertedFor_MotorMat[i] = True0_U.MotorMatrix_real[(i << 2) +\n        ForEach_itr];\n    }\n\n    /* End of ForEachSliceSelector generated from: '<S55>/MotorMatrix_real' */\n\n    /* ForEachSliceSelector generated from: '<S55>/RPM_commands' incorporates:\n     *  RateTransition: '<S1>/Rate Transition1'\n     */\n    rtb_ImpSel_InsertedFor_RPM_comm = True0_B.RateTransition1[ForEach_itr];\n\n    /* Integrator: '<S61>/Integrator' */\n    True0_B.CoreSubsys[ForEach_itr].Integrator = True0_X.CoreSubsys[ForEach_itr]\n      .Integrator_CSTATE;\n\n    /* RelationalOperator: '<S64>/LowerRelop1' */\n    True0_B.CoreSubsys[ForEach_itr].LowerRelop1 =\n      (True0_B.CoreSubsys[ForEach_itr].Integrator >\n       rtb_ImpSel_InsertedFor_MotorMat[11]);\n\n    /* Switch: '<S64>/Switch2' */\n    if (True0_B.CoreSubsys[ForEach_itr].LowerRelop1) {\n      /* Switch: '<S64>/Switch2' */\n      True0_B.CoreSubsys[ForEach_itr].Switch2 = rtb_ImpSel_InsertedFor_MotorMat\n        [11];\n    } else {\n      /* RelationalOperator: '<S64>/UpperRelop' */\n      True0_B.CoreSubsys[ForEach_itr].UpperRelop =\n        (True0_B.CoreSubsys[ForEach_itr].Integrator <\n         rtb_ImpSel_InsertedFor_MotorMat[10]);\n\n      /* Switch: '<S64>/Switch' */\n      if (True0_B.CoreSubsys[ForEach_itr].UpperRelop) {\n        /* Switch: '<S64>/Switch' */\n        True0_B.CoreSubsys[ForEach_itr].Switch_k =\n          rtb_ImpSel_InsertedFor_MotorMat[10];\n      } else {\n        /* Switch: '<S64>/Switch' */\n        True0_B.CoreSubsys[ForEach_itr].Switch_k =\n          True0_B.CoreSubsys[ForEach_itr].Integrator;\n      }\n\n      /* End of Switch: '<S64>/Switch' */\n\n      /* Switch: '<S64>/Switch2' */\n      True0_B.CoreSubsys[ForEach_itr].Switch2 = True0_B.CoreSubsys[ForEach_itr].\n        Switch_k;\n    }\n\n    /* End of Switch: '<S64>/Switch2' */\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Product: '<S57>/Product' */\n      True0_B.CoreSubsys[ForEach_itr].Product = rtb_ImpSel_InsertedFor_RPM_comm *\n        rtb_ImpSel_InsertedFor_MotorMat[4];\n    }\n\n    /* Sum: '<S57>/Sum1' */\n    True0_B.CoreSubsys[ForEach_itr].Sum1 = True0_B.CoreSubsys[ForEach_itr].\n      Product - True0_B.CoreSubsys[ForEach_itr].Switch2;\n\n    /* Product: '<S57>/Divide' */\n    True0_B.CoreSubsys[ForEach_itr].Divide = True0_B.CoreSubsys[ForEach_itr].\n      Sum1 / rtb_ImpSel_InsertedFor_MotorMat[5];\n\n    /* RelationalOperator: '<S62>/Compare' incorporates:\n     *  Constant: '<S62>/Constant'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Compare = (True0_B.CoreSubsys[ForEach_itr].\n      Divide < True0_P.CoreSubsys.Constant_Value_e);\n\n    /* RelationalOperator: '<S63>/Compare' incorporates:\n     *  Constant: '<S63>/Constant'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Compare_j = (True0_B.CoreSubsys[ForEach_itr]\n      .Divide > True0_P.CoreSubsys.Constant_Value_c);\n\n    /* RelationalOperator: '<S61>/Relational Operator' */\n    True0_B.CoreSubsys[ForEach_itr].RelationalOperator =\n      (True0_B.CoreSubsys[ForEach_itr].Integrator <=\n       rtb_ImpSel_InsertedFor_MotorMat[11]);\n\n    /* Logic: '<S61>/Logical Operator' */\n    True0_B.CoreSubsys[ForEach_itr].LogicalOperator =\n      (True0_B.CoreSubsys[ForEach_itr].RelationalOperator ||\n       (True0_B.CoreSubsys[ForEach_itr].Compare != 0));\n\n    /* RelationalOperator: '<S61>/Relational Operator1' */\n    True0_B.CoreSubsys[ForEach_itr].RelationalOperator1 =\n      (True0_B.CoreSubsys[ForEach_itr].Integrator >=\n       rtb_ImpSel_InsertedFor_MotorMat[10]);\n\n    /* Logic: '<S61>/Logical Operator1' */\n    True0_B.CoreSubsys[ForEach_itr].LogicalOperator1 =\n      ((True0_B.CoreSubsys[ForEach_itr].Compare_j != 0) ||\n       True0_B.CoreSubsys[ForEach_itr].RelationalOperator1);\n\n    /* Logic: '<S61>/Logical Operator2' */\n    True0_B.CoreSubsys[ForEach_itr].LogicalOperator2 =\n      (True0_B.CoreSubsys[ForEach_itr].LogicalOperator &&\n       True0_B.CoreSubsys[ForEach_itr].LogicalOperator1);\n\n    /* Switch: '<S61>/Switch' */\n    if (True0_B.CoreSubsys[ForEach_itr].LogicalOperator2) {\n      /* Switch: '<S61>/Switch' */\n      True0_B.CoreSubsys[ForEach_itr].Switch = True0_B.CoreSubsys[ForEach_itr].\n        Divide;\n    } else {\n      /* Switch: '<S61>/Switch' incorporates:\n       *  Constant: '<S61>/Constant'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Switch =\n        True0_P.CoreSubsys.Constant_Value_g;\n    }\n\n    /* End of Switch: '<S61>/Switch' */\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Gain: '<S59>/Conversion deg to rad' */\n      True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad = True0_P.d2r *\n        rtb_ImpSel_InsertedFor_MotorMat[0];\n\n      /* Trigonometry: '<S59>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].Motorarmxcomponent = std::cos\n        (True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad);\n\n      /* Trigonometry: '<S59>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].Motorarmycomponent = std::sin\n        (True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad);\n\n      /* Abs: '<S59>/Abs' */\n      True0_B.CoreSubsys[ForEach_itr].Abs = std::abs\n        (rtb_ImpSel_InsertedFor_MotorMat[1]);\n\n      /* Product: '<S59>/Product4' */\n      True0_B.CoreSubsys[ForEach_itr].Motorlocationxyvector[0] =\n        True0_B.CoreSubsys[ForEach_itr].Motorarmxcomponent *\n        True0_B.CoreSubsys[ForEach_itr].Abs;\n      True0_B.CoreSubsys[ForEach_itr].Motorlocationxyvector[1] =\n        True0_B.CoreSubsys[ForEach_itr].Motorarmycomponent *\n        True0_B.CoreSubsys[ForEach_itr].Abs;\n\n      /* Reshape: '<S59>/Reshape' */\n      True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[0] =\n        True0_B.CoreSubsys[ForEach_itr].Motorlocationxyvector[0];\n      True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[1] =\n        True0_B.CoreSubsys[ForEach_itr].Motorlocationxyvector[1];\n      True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[2] =\n        rtb_ImpSel_InsertedFor_MotorMat[2];\n\n      /* Sum: '<S59>/Subtract' incorporates:\n       *  Inport: '<Root>/CoG_real'\n       *  Reshape: '<S59>/Reshape'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[0] =\n        True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[0] -\n        True0_U.CoG_real[0];\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[1] =\n        True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[1] -\n        True0_U.CoG_real[1];\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[2] =\n        True0_B.CoreSubsys[ForEach_itr].Vectorfromgeometriccentertoprop[2] -\n        True0_U.CoG_real[2];\n    }\n\n    /* Product: '<S65>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].u2v3 = True0_B.omega[1] *\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[2];\n\n    /* Product: '<S65>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].u3v1 = True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[0] * True0_B.omega[2];\n\n    /* Product: '<S65>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].u1v2 = True0_B.omega[0] *\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[1];\n\n    /* Product: '<S66>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].u3v2 = True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[1] * True0_B.omega[2];\n\n    /* Product: '<S66>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].u1v3 = True0_B.omega[0] *\n      True0_B.CoreSubsys[ForEach_itr].VectorfromrealCoGtopropellerBod[2];\n\n    /* Product: '<S66>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].u2v1 = True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[0] * True0_B.omega[1];\n\n    /* Sum: '<S58>/Sum' */\n    True0_B.CoreSubsys[ForEach_itr].Sum[0] = True0_B.CoreSubsys[ForEach_itr].\n      u2v3 - True0_B.CoreSubsys[ForEach_itr].u3v2;\n    True0_B.CoreSubsys[ForEach_itr].Sum[1] = True0_B.CoreSubsys[ForEach_itr].\n      u3v1 - True0_B.CoreSubsys[ForEach_itr].u1v3;\n    True0_B.CoreSubsys[ForEach_itr].Sum[2] = True0_B.CoreSubsys[ForEach_itr].\n      u1v2 - True0_B.CoreSubsys[ForEach_itr].u2v1;\n\n    /* Product: '<S74>/Product4' */\n    True0_B.CoreSubsys[ForEach_itr].Product4 = True0_B.CoreSubsys[ForEach_itr].\n      Switch2 * rtb_ImpSel_InsertedFor_MotorMat[6];\n\n    /* Product: '<S74>/Product5' incorporates:\n     *  Product: '<S73>/Product1'\n     */\n    cphi = True0_B.CoreSubsys[ForEach_itr].Switch2 *\n      True0_B.CoreSubsys[ForEach_itr].Switch2;\n\n    /* Product: '<S74>/Product5' */\n    True0_B.CoreSubsys[ForEach_itr].Product5 = cphi;\n\n    /* Product: '<S74>/Product6' */\n    True0_B.CoreSubsys[ForEach_itr].Product6 = True0_B.CoreSubsys[ForEach_itr].\n      Product5 * rtb_ImpSel_InsertedFor_MotorMat[7];\n\n    /* Sum: '<S74>/Sum1' */\n    True0_B.CoreSubsys[ForEach_itr].Hoverthrustmagnitude =\n      True0_B.CoreSubsys[ForEach_itr].Product4 + True0_B.CoreSubsys[ForEach_itr]\n      .Product6;\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Gain: '<S68>/Conversion deg to rad' */\n      True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[0] = True0_P.d2r *\n        rtb_ImpSel_InsertedFor_MotorMat[12];\n      True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[1] = True0_P.d2r *\n        rtb_ImpSel_InsertedFor_MotorMat[13];\n      True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[2] = True0_P.d2r *\n        rtb_ImpSel_InsertedFor_MotorMat[14];\n\n      /* Trigonometry: '<S99>/Trigonometric Function1' incorporates:\n       *  Trigonometry: '<S100>/Trigonometric Function1'\n       *  Trigonometry: '<S104>/Trigonometric Function1'\n       *  Trigonometry: '<S107>/Trigonometric Function1'\n       */\n      phi = std::cos(True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[1]);\n\n      /* Trigonometry: '<S99>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1 = phi;\n\n      /* Trigonometry: '<S99>/Trigonometric Function3' incorporates:\n       *  Trigonometry: '<S102>/Trigonometric Function3'\n       *  Trigonometry: '<S103>/Trigonometric Function'\n       *  Trigonometry: '<S105>/Trigonometric Function4'\n       *  Trigonometry: '<S106>/Trigonometric Function'\n       */\n      ctheta = std::cos(True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[2]);\n\n      /* Trigonometry: '<S99>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3 = ctheta;\n\n      /* Product: '<S99>/Product' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[0] =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1 *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3;\n\n      /* Trigonometry: '<S102>/Trigonometric Function12' incorporates:\n       *  Trigonometry: '<S103>/Trigonometric Function12'\n       *  Trigonometry: '<S104>/Trigonometric Function3'\n       *  Trigonometry: '<S105>/Trigonometric Function5'\n       *  Trigonometry: '<S106>/Trigonometric Function5'\n       */\n      theta = std::sin(True0_B.CoreSubsys[ForEach_itr].Conversiondegtorad_n[0]);\n\n      /* Trigonometry: '<S102>/Trigonometric Function12' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12 = theta;\n\n      /* Trigonometry: '<S102>/Trigonometric Function1' incorporates:\n       *  Trigonometry: '<S101>/Trigonometric Function1'\n       *  Trigonometry: '<S103>/Trigonometric Function2'\n       *  Trigonometry: '<S105>/Trigonometric Function2'\n       *  Trigonometry: '<S106>/Trigonometric Function1'\n       */\n      Product_pk_tmp = std::sin(True0_B.CoreSubsys[ForEach_itr].\n        Conversiondegtorad_n[1]);\n\n      /* Trigonometry: '<S102>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_h = Product_pk_tmp;\n\n      /* Trigonometry: '<S102>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_m = ctheta;\n\n      /* Product: '<S102>/Product' incorporates:\n       *  Product: '<S103>/Product1'\n       */\n      Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12 *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_h;\n\n      /* Product: '<S102>/Product' */\n      True0_B.CoreSubsys[ForEach_itr].Product_d = Product2_i4_tmp *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_m;\n\n      /* Trigonometry: '<S102>/Trigonometric Function5' incorporates:\n       *  Trigonometry: '<S103>/Trigonometric Function5'\n       *  Trigonometry: '<S105>/Trigonometric Function12'\n       *  Trigonometry: '<S106>/Trigonometric Function12'\n       *  Trigonometry: '<S107>/Trigonometric Function3'\n       */\n      TrigonometricFunction5_tmp = std::cos(True0_B.CoreSubsys[ForEach_itr].\n        Conversiondegtorad_n[0]);\n\n      /* Trigonometry: '<S102>/Trigonometric Function5' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5 =\n        TrigonometricFunction5_tmp;\n\n      /* Trigonometry: '<S102>/Trigonometric Function' incorporates:\n       *  Trigonometry: '<S100>/Trigonometric Function3'\n       *  Trigonometry: '<S103>/Trigonometric Function4'\n       *  Trigonometry: '<S105>/Trigonometric Function'\n       *  Trigonometry: '<S106>/Trigonometric Function3'\n       */\n      TrigonometricFunction_tmp = std::sin(True0_B.CoreSubsys[ForEach_itr].\n        Conversiondegtorad_n[2]);\n\n      /* Trigonometry: '<S102>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction =\n        TrigonometricFunction_tmp;\n\n      /* Product: '<S102>/Product1' */\n      True0_B.CoreSubsys[ForEach_itr].Product1 = True0_B.CoreSubsys[ForEach_itr]\n        .TrigonometricFunction5 * True0_B.CoreSubsys[ForEach_itr].\n        TrigonometricFunction;\n\n      /* Sum: '<S102>/Sum' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[1] =\n        True0_B.CoreSubsys[ForEach_itr].Product_d -\n        True0_B.CoreSubsys[ForEach_itr].Product1;\n\n      /* Trigonometry: '<S105>/Trigonometric Function12' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12_c =\n        TrigonometricFunction5_tmp;\n\n      /* Trigonometry: '<S105>/Trigonometric Function2' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction2 = Product_pk_tmp;\n\n      /* Trigonometry: '<S105>/Trigonometric Function4' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction4 = ctheta;\n\n      /* Product: '<S105>/Product1' incorporates:\n       *  Product: '<S106>/Product'\n       */\n      Product1_a_tmp = True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12_c\n        * True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction2;\n\n      /* Product: '<S105>/Product1' */\n      True0_B.CoreSubsys[ForEach_itr].Product1_a = Product1_a_tmp *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction4;\n\n      /* Trigonometry: '<S105>/Trigonometric Function5' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5_f = theta;\n\n      /* Trigonometry: '<S105>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_o =\n        TrigonometricFunction_tmp;\n\n      /* Product: '<S105>/Product2' */\n      True0_B.CoreSubsys[ForEach_itr].Product2 = True0_B.CoreSubsys[ForEach_itr]\n        .TrigonometricFunction5_f * True0_B.CoreSubsys[ForEach_itr].\n        TrigonometricFunction_o;\n\n      /* Sum: '<S105>/Sum' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[2] =\n        True0_B.CoreSubsys[ForEach_itr].Product1_a +\n        True0_B.CoreSubsys[ForEach_itr].Product2;\n\n      /* Trigonometry: '<S100>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_c = phi;\n\n      /* Trigonometry: '<S100>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_e =\n        TrigonometricFunction_tmp;\n\n      /* Product: '<S100>/Product' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[3] =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_c *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_e;\n\n      /* Trigonometry: '<S103>/Trigonometric Function12' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12_n = theta;\n\n      /* Trigonometry: '<S103>/Trigonometric Function2' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction2_a = Product_pk_tmp;\n\n      /* Trigonometry: '<S103>/Trigonometric Function4' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction4_h =\n        TrigonometricFunction_tmp;\n\n      /* Product: '<S103>/Product1' */\n      True0_B.CoreSubsys[ForEach_itr].Product1_f = Product2_i4_tmp *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction4_h;\n\n      /* Trigonometry: '<S103>/Trigonometric Function5' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5_a =\n        TrigonometricFunction5_tmp;\n\n      /* Trigonometry: '<S103>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_f = ctheta;\n\n      /* Product: '<S103>/Product2' */\n      True0_B.CoreSubsys[ForEach_itr].Product2_c =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5_a *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_f;\n\n      /* Sum: '<S103>/Sum' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[4] =\n        True0_B.CoreSubsys[ForEach_itr].Product1_f +\n        True0_B.CoreSubsys[ForEach_itr].Product2_c;\n\n      /* Trigonometry: '<S106>/Trigonometric Function12' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction12_o =\n        TrigonometricFunction5_tmp;\n\n      /* Trigonometry: '<S106>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_l = Product_pk_tmp;\n\n      /* Trigonometry: '<S106>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_n =\n        TrigonometricFunction_tmp;\n\n      /* Product: '<S106>/Product' */\n      True0_B.CoreSubsys[ForEach_itr].Product_e = Product1_a_tmp *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_n;\n\n      /* Trigonometry: '<S106>/Trigonometric Function5' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5_k = theta;\n\n      /* Trigonometry: '<S106>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_f0 = ctheta;\n\n      /* Product: '<S106>/Product1' */\n      True0_B.CoreSubsys[ForEach_itr].Product1_j =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction5_k *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_f0;\n\n      /* Sum: '<S106>/Sum' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[5] =\n        True0_B.CoreSubsys[ForEach_itr].Product_e -\n        True0_B.CoreSubsys[ForEach_itr].Product1_j;\n\n      /* Trigonometry: '<S101>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_m = Product_pk_tmp;\n\n      /* Gain: '<S101>/Gain' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[6] =\n        True0_P.CoreSubsys.Gain_Gain_hr * True0_B.CoreSubsys[ForEach_itr].\n        TrigonometricFunction1_m;\n\n      /* Trigonometry: '<S104>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_mh = theta;\n\n      /* Trigonometry: '<S104>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_a = phi;\n\n      /* Product: '<S104>/Product' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[7] =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_mh *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_a;\n\n      /* Trigonometry: '<S107>/Trigonometric Function3' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_j =\n        TrigonometricFunction5_tmp;\n\n      /* Trigonometry: '<S107>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_m3 = phi;\n\n      /* Product: '<S107>/Product' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       */\n      True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[8] =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction3_j *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_m3;\n    }\n\n    /* Sum: '<S55>/Sum1' incorporates:\n     *  Sum: '<S56>/Sum1'\n     *  Sum: '<S58>/Sum'\n     */\n    True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[0] =\n      True0_B.CoreSubsys[ForEach_itr].Sum[0] + True0_B.TrueairspeedBodyaxes[0];\n    True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[1] =\n      True0_B.CoreSubsys[ForEach_itr].Sum[1] + True0_B.TrueairspeedBodyaxes[1];\n    True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[2] =\n      True0_B.CoreSubsys[ForEach_itr].Sum[2] + True0_B.TrueairspeedBodyaxes[2];\n\n    /* Product: '<S68>/Product' incorporates:\n     *  Concatenate: '<S108>/Vector Concatenate'\n     *  Sum: '<S55>/Sum1'\n     */\n    std::memcpy(&tmp[0], &True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[0],\n                9U * sizeof(real_T));\n    phi = True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[0];\n    ctheta = True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[1];\n    theta = True0_B.CoreSubsys[ForEach_itr].TotallinearvelocityatpropBodyax[2];\n    for (i = 0; i < 3; i++) {\n      /* Product: '<S68>/Product' */\n      Product2_i4_tmp = tmp[i] * phi;\n      Product2_i4_tmp += tmp[i + 3] * ctheta;\n      Product2_i4_tmp += tmp[i + 6] * theta;\n      True0_B.CoreSubsys[ForEach_itr].TrueairspeedatpropMotoraxes[i] =\n        Product2_i4_tmp;\n    }\n\n    /* Gain: '<S83>/Gain' */\n    True0_B.CoreSubsys[ForEach_itr].Climbspeedv_c =\n      True0_P.CoreSubsys.Gain_Gain_k * True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[2];\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Outputs for IfAction SubSystem: '<S84>/Vortex ring state -2 <= vc//vh < 0 ' incorporates:\n       *  ActionPort: '<S92>/Action Port'\n       */\n      /* If: '<S84>/If' incorporates:\n       *  Constant: '<S71>/Induced velocity at hover'\n       *  Product: '<S84>/Divide'\n       *  Product: '<S92>/Divide'\n       */\n      phi = True0_B.CoreSubsys[ForEach_itr].Climbspeedv_c / True0_P.v_h;\n\n      /* End of Outputs for SubSystem: '<S84>/Vortex ring state -2 <= vc//vh < 0 ' */\n\n      /* Product: '<S84>/Divide' */\n      True0_B.CoreSubsys[ForEach_itr].v_cv_h = phi;\n\n      /* If: '<S84>/If' */\n      if (rtsiIsModeUpdateTimeStep(&(&True0_M)->solverInfo)) {\n        if (True0_B.CoreSubsys[ForEach_itr].v_cv_h >= 0.0) {\n          rtAction = 0;\n        } else if (True0_B.CoreSubsys[ForEach_itr].v_cv_h >= -2.0) {\n          rtAction = 1;\n        } else {\n          rtAction = 2;\n        }\n\n        True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem = rtAction;\n      } else {\n        rtAction = True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem;\n      }\n\n      switch (rtAction) {\n       case 0:\n        /* Outputs for IfAction SubSystem: '<S84>/Normal working state vc//vh >= 0' incorporates:\n         *  ActionPort: '<S91>/Action Port'\n         */\n        /* Gain: '<S91>/Gain' */\n        True0_B.CoreSubsys[ForEach_itr].Gain_a = True0_P.CoreSubsys.Gain_Gain *\n          True0_B.CoreSubsys[ForEach_itr].Climbspeedv_c;\n\n        /* Product: '<S91>/Product' */\n        True0_B.CoreSubsys[ForEach_itr].Product_o =\n          True0_B.CoreSubsys[ForEach_itr].Gain_a *\n          True0_B.CoreSubsys[ForEach_itr].Gain_a;\n\n        /* Product: '<S91>/Product1' incorporates:\n         *  Constant: '<S91>/Induced velocity at hover'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Product1_h = True0_P.v_h * True0_P.v_h;\n\n        /* Sum: '<S91>/Sum1' */\n        True0_B.CoreSubsys[ForEach_itr].Sum1_i = True0_B.CoreSubsys[ForEach_itr]\n          .Product_o + True0_B.CoreSubsys[ForEach_itr].Product1_h;\n\n        /* Sqrt: '<S91>/Sqrt' */\n        True0_B.CoreSubsys[ForEach_itr].Sqrt_e = std::sqrt\n          (True0_B.CoreSubsys[ForEach_itr].Sum1_i);\n\n        /* Merge: '<S84>/Merge' incorporates:\n         *  Sum: '<S91>/Sum'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Merge = True0_B.CoreSubsys[ForEach_itr].\n          Sqrt_e - True0_B.CoreSubsys[ForEach_itr].Gain_a;\n\n        /* End of Outputs for SubSystem: '<S84>/Normal working state vc//vh >= 0' */\n        break;\n\n       case 1:\n        /* Outputs for IfAction SubSystem: '<S84>/Vortex ring state -2 <= vc//vh < 0 ' incorporates:\n         *  ActionPort: '<S92>/Action Port'\n         */\n        /* Product: '<S92>/Divide' */\n        True0_B.CoreSubsys[ForEach_itr].Divide_n = phi;\n\n        /* Gain: '<S92>/Gain' */\n        True0_B.CoreSubsys[ForEach_itr].Gain_e = True0_P.k1 *\n          True0_B.CoreSubsys[ForEach_itr].Divide_n;\n\n        /* Product: '<S92>/Product' */\n        True0_B.CoreSubsys[ForEach_itr].Product_ge =\n          True0_B.CoreSubsys[ForEach_itr].Divide_n *\n          True0_B.CoreSubsys[ForEach_itr].Divide_n;\n\n        /* Gain: '<S92>/Gain1' */\n        True0_B.CoreSubsys[ForEach_itr].Gain1_e = True0_P.k2 *\n          True0_B.CoreSubsys[ForEach_itr].Product_ge;\n\n        /* Product: '<S92>/Product1' */\n        True0_B.CoreSubsys[ForEach_itr].Product1_o =\n          True0_B.CoreSubsys[ForEach_itr].Product_ge *\n          True0_B.CoreSubsys[ForEach_itr].Divide_n;\n\n        /* Gain: '<S92>/Gain2' */\n        True0_B.CoreSubsys[ForEach_itr].Gain2_c = True0_P.k3 *\n          True0_B.CoreSubsys[ForEach_itr].Product1_o;\n\n        /* Product: '<S92>/Product2' */\n        True0_B.CoreSubsys[ForEach_itr].Product2_es =\n          True0_B.CoreSubsys[ForEach_itr].Product1_o *\n          True0_B.CoreSubsys[ForEach_itr].Divide_n;\n\n        /* Gain: '<S92>/Gain3' */\n        True0_B.CoreSubsys[ForEach_itr].Gain3 = True0_P.k4 *\n          True0_B.CoreSubsys[ForEach_itr].Product2_es;\n\n        /* Sum: '<S92>/Add' incorporates:\n         *  Constant: '<S92>/Constant'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Add_c = (((True0_P.kappa +\n          True0_B.CoreSubsys[ForEach_itr].Gain_e) +\n          True0_B.CoreSubsys[ForEach_itr].Gain1_e) +\n          True0_B.CoreSubsys[ForEach_itr].Gain2_c) +\n          True0_B.CoreSubsys[ForEach_itr].Gain3;\n\n        /* Merge: '<S84>/Merge' incorporates:\n         *  Constant: '<S92>/Induced velocity at hover'\n         *  Product: '<S92>/Product3'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Merge = True0_B.CoreSubsys[ForEach_itr].\n          Add_c * True0_P.v_h;\n\n        /* End of Outputs for SubSystem: '<S84>/Vortex ring state -2 <= vc//vh < 0 ' */\n        break;\n\n       default:\n        /* Outputs for IfAction SubSystem: '<S84>/Windmill braking state vc//vh < -2' incorporates:\n         *  ActionPort: '<S93>/Action Port'\n         */\n        /* Gain: '<S93>/Gain' */\n        True0_B.CoreSubsys[ForEach_itr].Gain_l = True0_P.CoreSubsys.Gain_Gain_b *\n          True0_B.CoreSubsys[ForEach_itr].Climbspeedv_c;\n\n        /* Product: '<S93>/Product' */\n        True0_B.CoreSubsys[ForEach_itr].Product_j =\n          True0_B.CoreSubsys[ForEach_itr].Gain_l *\n          True0_B.CoreSubsys[ForEach_itr].Gain_l;\n\n        /* Product: '<S93>/Product1' incorporates:\n         *  Constant: '<S93>/Induced velocity at hover'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Product1_c = True0_P.v_h * True0_P.v_h;\n\n        /* Sum: '<S93>/Sum1' */\n        True0_B.CoreSubsys[ForEach_itr].Sum1_c = True0_B.CoreSubsys[ForEach_itr]\n          .Product_j - True0_B.CoreSubsys[ForEach_itr].Product1_c;\n\n        /* Sqrt: '<S93>/Sqrt' */\n        True0_B.CoreSubsys[ForEach_itr].Sqrt_d = std::sqrt\n          (True0_B.CoreSubsys[ForEach_itr].Sum1_c);\n\n        /* Merge: '<S84>/Merge' incorporates:\n         *  Sum: '<S93>/Sum'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Merge = (0.0 -\n          True0_B.CoreSubsys[ForEach_itr].Gain_l) -\n          True0_B.CoreSubsys[ForEach_itr].Sqrt_d;\n\n        /* End of Outputs for SubSystem: '<S84>/Windmill braking state vc//vh < -2' */\n        break;\n      }\n    }\n\n    /* Math: '<S90>/transpose' incorporates:\n     *  Product: '<S68>/Product'\n     */\n    Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[0];\n\n    /* Math: '<S90>/transpose' */\n    True0_B.CoreSubsys[ForEach_itr].transpose[0] = Product2_i4_tmp;\n\n    /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n     *  ActionPort: '<S76>/Action Port'\n     */\n    /* Outputs for IfAction SubSystem: '<S82>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S85>/Action Port'\n     */\n    /* If: '<S70>/If' incorporates:\n     *  If: '<S82>/If'\n     *  Product: '<S80>/Product'\n     *  Product: '<S81>/Product'\n     *  Product: '<S89>/Product'\n     *  Product: '<S90>/Product'\n     */\n    Product_pk_tmp = Product2_i4_tmp * Product2_i4_tmp;\n\n    /* End of Outputs for SubSystem: '<S82>/Nonzero airspeed' */\n    /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n\n    /* Math: '<S90>/transpose' incorporates:\n     *  Product: '<S68>/Product'\n     */\n    Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[1];\n\n    /* Math: '<S90>/transpose' */\n    True0_B.CoreSubsys[ForEach_itr].transpose[1] = Product2_i4_tmp;\n\n    /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n     *  ActionPort: '<S76>/Action Port'\n     */\n    /* Outputs for IfAction SubSystem: '<S82>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S85>/Action Port'\n     */\n    /* If: '<S70>/If' incorporates:\n     *  If: '<S82>/If'\n     *  Product: '<S80>/Product'\n     *  Product: '<S81>/Product'\n     *  Product: '<S89>/Product'\n     *  Product: '<S90>/Product'\n     */\n    phi = Product2_i4_tmp * Product2_i4_tmp + Product_pk_tmp;\n\n    /* End of Outputs for SubSystem: '<S82>/Nonzero airspeed' */\n    /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n\n    /* Product: '<S90>/Product' */\n    Product_pk_tmp = phi;\n\n    /* Math: '<S90>/transpose' incorporates:\n     *  Product: '<S68>/Product'\n     */\n    Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[2];\n\n    /* Math: '<S90>/transpose' */\n    True0_B.CoreSubsys[ForEach_itr].transpose[2] = Product2_i4_tmp;\n\n    /* Product: '<S90>/Product' */\n    Product_pk_tmp += Product2_i4_tmp * Product2_i4_tmp;\n\n    /* Product: '<S90>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_g = Product_pk_tmp;\n\n    /* Sqrt: '<S87>/Sqrt' */\n    True0_B.CoreSubsys[ForEach_itr].Sqrt = std::sqrt\n      (True0_B.CoreSubsys[ForEach_itr].Product_g);\n\n    /* ComplexToRealImag: '<S87>/Complex to Real-Imag' */\n    True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag =\n      True0_B.CoreSubsys[ForEach_itr].Sqrt;\n\n    /* If: '<S82>/If' */\n    if (rtsiIsModeUpdateTimeStep(&(&True0_M)->solverInfo)) {\n      rtAction = static_cast<int8_T>(!(True0_B.CoreSubsys[ForEach_itr].\n        ComplextoRealImag == 0.0));\n      True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_l = rtAction;\n    } else {\n      rtAction = True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_l;\n    }\n\n    if (rtAction == 0) {\n      /* Outputs for IfAction SubSystem: '<S82>/Zero airspeed' incorporates:\n       *  ActionPort: '<S86>/Action Port'\n       */\n      if (rtmIsMajorTimeStep((&True0_M))) {\n        /* Merge: '<S82>/Merge' incorporates:\n         *  Constant: '<S86>/Constant'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Angleofattackrad =\n          True0_P.CoreSubsys.Constant_Value;\n      }\n\n      /* End of Outputs for SubSystem: '<S82>/Zero airspeed' */\n    } else {\n      /* Outputs for IfAction SubSystem: '<S82>/Nonzero airspeed' incorporates:\n       *  ActionPort: '<S85>/Action Port'\n       */\n      /* Math: '<S89>/transpose' */\n      Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n        TrueairspeedatpropMotoraxes[0];\n\n      /* End of Outputs for SubSystem: '<S82>/Nonzero airspeed' */\n\n      /* Math: '<S89>/transpose' */\n      True0_B.CoreSubsys[ForEach_itr].transpose_i[0] = Product2_i4_tmp;\n\n      /* Outputs for IfAction SubSystem: '<S82>/Nonzero airspeed' incorporates:\n       *  ActionPort: '<S85>/Action Port'\n       */\n      /* Math: '<S89>/transpose' */\n      Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n        TrueairspeedatpropMotoraxes[1];\n\n      /* End of Outputs for SubSystem: '<S82>/Nonzero airspeed' */\n\n      /* Math: '<S89>/transpose' */\n      True0_B.CoreSubsys[ForEach_itr].transpose_i[1] = Product2_i4_tmp;\n\n      /* Outputs for IfAction SubSystem: '<S82>/Nonzero airspeed' incorporates:\n       *  ActionPort: '<S85>/Action Port'\n       */\n      /* Product: '<S89>/Product' */\n      True0_B.CoreSubsys[ForEach_itr].Product_l = phi;\n\n      /* Sqrt: '<S88>/Sqrt' */\n      True0_B.CoreSubsys[ForEach_itr].Sqrt_a = std::sqrt\n        (True0_B.CoreSubsys[ForEach_itr].Product_l);\n\n      /* ComplexToRealImag: '<S88>/Complex to Real-Imag' */\n      True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_n =\n        True0_B.CoreSubsys[ForEach_itr].Sqrt_a;\n\n      /* Product: '<S85>/Divide1' */\n      True0_B.CoreSubsys[ForEach_itr].Divide1 = 1.0 /\n        True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_n *\n        True0_B.CoreSubsys[ForEach_itr].TrueairspeedatpropMotoraxes[2];\n\n      /* Merge: '<S82>/Merge' incorporates:\n       *  Trigonometry: '<S85>/Trigonometric Function'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Angleofattackrad = std::atan\n        (True0_B.CoreSubsys[ForEach_itr].Divide1);\n\n      /* End of Outputs for SubSystem: '<S82>/Nonzero airspeed' */\n    }\n\n    /* Switch: '<S71>/Switch' incorporates:\n     *  Constant: '<S71>/Constant1'\n     */\n    if (True0_P.Dyn_thrust > True0_P.CoreSubsys.Switch_Threshold_n) {\n      /* Trigonometry: '<S71>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_j = std::sin\n        (True0_B.CoreSubsys[ForEach_itr].Angleofattackrad);\n\n      /* Product: '<S71>/Product2' */\n      True0_B.CoreSubsys[ForEach_itr].Product2_nr =\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_j *\n        True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag;\n\n      /* Sum: '<S71>/Sum2' */\n      True0_B.CoreSubsys[ForEach_itr].Sum2 = True0_B.CoreSubsys[ForEach_itr].\n        Merge - True0_B.CoreSubsys[ForEach_itr].Product2_nr;\n\n      /* Product: '<S71>/Divide' incorporates:\n       *  Constant: '<S71>/Induced velocity at hover'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Divide_p = True0_P.v_h /\n        True0_B.CoreSubsys[ForEach_itr].Sum2;\n\n      /* Switch: '<S71>/Switch' */\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h =\n        True0_B.CoreSubsys[ForEach_itr].Divide_p;\n    } else {\n      /* Switch: '<S71>/Switch' incorporates:\n       *  Constant: '<S71>/Constant'\n       */\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h =\n        True0_P.CoreSubsys.Constant_Value_im;\n    }\n\n    /* End of Switch: '<S71>/Switch' */\n\n    /* Product: '<S67>/Product7' */\n    True0_B.CoreSubsys[ForEach_itr].Dynamicthrustmagnitude =\n      True0_B.CoreSubsys[ForEach_itr].Hoverthrustmagnitude *\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h;\n\n    /* Math: '<S81>/transpose' */\n    Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[0];\n\n    /* Math: '<S81>/transpose' */\n    True0_B.CoreSubsys[ForEach_itr].transpose_e[0] = Product2_i4_tmp;\n\n    /* Math: '<S81>/transpose' */\n    Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n      TrueairspeedatpropMotoraxes[1];\n\n    /* Math: '<S81>/transpose' */\n    True0_B.CoreSubsys[ForEach_itr].transpose_e[1] = Product2_i4_tmp;\n\n    /* Product: '<S81>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_eh = phi;\n\n    /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n     *  ActionPort: '<S76>/Action Port'\n     */\n    /* If: '<S70>/If' incorporates:\n     *  Sqrt: '<S78>/Sqrt'\n     *  Sqrt: '<S79>/Sqrt'\n     */\n    ctheta = std::sqrt(True0_B.CoreSubsys[ForEach_itr].Product_eh);\n\n    /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n\n    /* Sqrt: '<S78>/Sqrt' */\n    True0_B.CoreSubsys[ForEach_itr].Sqrt_n = ctheta;\n\n    /* ComplexToRealImag: '<S78>/Complex to Real-Imag' */\n    True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_p =\n      True0_B.CoreSubsys[ForEach_itr].Sqrt_n;\n\n    /* If: '<S70>/If' */\n    if (rtsiIsModeUpdateTimeStep(&(&True0_M)->solverInfo)) {\n      rtAction = static_cast<int8_T>(!(True0_B.CoreSubsys[ForEach_itr].\n        ComplextoRealImag_p == 0.0));\n      True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_e = rtAction;\n    } else {\n      rtAction = True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_e;\n    }\n\n    if (rtAction == 0) {\n      /* Outputs for IfAction SubSystem: '<S70>/Zero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S77>/Action Port'\n       */\n      if (rtmIsMajorTimeStep((&True0_M))) {\n        /* Merge: '<S70>/Merge' incorporates:\n         *  Constant: '<S77>/Constant'\n         */\n        True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[0] =\n          True0_P.CoreSubsys.Constant_Value_l[0];\n\n        /* Merge: '<S70>/Merge1' incorporates:\n         *  Constant: '<S77>/Constant1'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[0] =\n          True0_P.CoreSubsys.Constant1_Value[0];\n\n        /* Merge: '<S70>/Merge' incorporates:\n         *  Constant: '<S77>/Constant'\n         */\n        True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[1] =\n          True0_P.CoreSubsys.Constant_Value_l[1];\n\n        /* Merge: '<S70>/Merge1' incorporates:\n         *  Constant: '<S77>/Constant1'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[1] =\n          True0_P.CoreSubsys.Constant1_Value[1];\n\n        /* Merge: '<S70>/Merge' incorporates:\n         *  Constant: '<S77>/Constant'\n         */\n        True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[2] =\n          True0_P.CoreSubsys.Constant_Value_l[2];\n\n        /* Merge: '<S70>/Merge1' incorporates:\n         *  Constant: '<S77>/Constant1'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[2] =\n          True0_P.CoreSubsys.Constant1_Value[2];\n      }\n\n      /* End of Outputs for SubSystem: '<S70>/Zero airspeed in rotor plane' */\n    } else {\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Math: '<S80>/transpose' */\n      Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n        TrueairspeedatpropMotoraxes[0];\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n\n      /* Math: '<S80>/transpose' */\n      True0_B.CoreSubsys[ForEach_itr].transpose_h[0] = Product2_i4_tmp;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Math: '<S80>/transpose' */\n      Product2_i4_tmp = True0_B.CoreSubsys[ForEach_itr].\n        TrueairspeedatpropMotoraxes[1];\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n\n      /* Math: '<S80>/transpose' */\n      True0_B.CoreSubsys[ForEach_itr].transpose_h[1] = Product2_i4_tmp;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Product: '<S80>/Product' */\n      True0_B.CoreSubsys[ForEach_itr].Product_dg = phi;\n\n      /* Sqrt: '<S79>/Sqrt' */\n      True0_B.CoreSubsys[ForEach_itr].Sqrt_f = ctheta;\n\n      /* ComplexToRealImag: '<S79>/Complex to Real-Imag' */\n      True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_m =\n        True0_B.CoreSubsys[ForEach_itr].Sqrt_f;\n\n      /* Switch: '<S76>/Switch' incorporates:\n       *  Constant: '<S76>/Constant2'\n       */\n      if (True0_P.Blade_flapping > True0_P.CoreSubsys.Switch_Threshold) {\n        /* Switch: '<S76>/Switch' incorporates:\n         *  Constant: '<S76>/Blade flapping gain [deg//(m//s)]'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Switch_e = True0_P.k_a1s;\n      } else {\n        /* Switch: '<S76>/Switch' incorporates:\n         *  Constant: '<S76>/Blade flapping disengaged'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Switch_e =\n          True0_P.CoreSubsys.Bladeflappingdisengaged_Value;\n      }\n\n      /* End of Switch: '<S76>/Switch' */\n\n      /* Product: '<S76>/Product4' */\n      True0_B.CoreSubsys[ForEach_itr].Bladeflappinganglea_1sdeg =\n        True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_m *\n        True0_B.CoreSubsys[ForEach_itr].Switch_e;\n\n      /* Gain: '<S76>/Conversion deg to rad' */\n      True0_B.CoreSubsys[ForEach_itr].Flappinganglerad = True0_P.d2r *\n        True0_B.CoreSubsys[ForEach_itr].Bladeflappinganglea_1sdeg;\n\n      /* Trigonometry: '<S76>/Trigonometric Function1' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_o = std::cos\n        (True0_B.CoreSubsys[ForEach_itr].Flappinganglerad);\n\n      /* Gain: '<S76>/Gain1' */\n      True0_B.CoreSubsys[ForEach_itr].Gain1_o = True0_P.CoreSubsys.Gain1_Gain *\n        True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction1_o;\n\n      /* Trigonometry: '<S76>/Trigonometric Function' */\n      True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_p = std::sin\n        (True0_B.CoreSubsys[ForEach_itr].Flappinganglerad);\n\n      /* Product: '<S76>/Product1' incorporates:\n       *  Constant: '<S76>/Constant'\n       *  Constant: '<S76>/Constant1'\n       */\n      True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[2] =\n        True0_P.CoreSubsys.Constant_Value_i * True0_P.k_beta *\n        True0_B.CoreSubsys[ForEach_itr].Flappinganglerad;\n\n      /* Product: '<S76>/Divide' */\n      phi = True0_B.CoreSubsys[ForEach_itr].TrueairspeedatpropMotoraxes[0] /\n        True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_m;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Airspeeddirectionintherotorplan[0] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Gain: '<S76>/Gain' incorporates:\n       *  Product: '<S76>/Divide'\n       */\n      phi *= True0_P.CoreSubsys.Gain_Gain_h;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Gain_m[0] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Product: '<S76>/Product' incorporates:\n       *  Gain: '<S76>/Gain'\n       */\n      phi *= True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_p;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Product_d5[0] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Reshape: '<S76>/Reshape1' */\n      True0_B.CoreSubsys[ForEach_itr].Reshape1[0] = phi;\n\n      /* Product: '<S76>/Divide' */\n      phi = True0_B.CoreSubsys[ForEach_itr].TrueairspeedatpropMotoraxes[1] /\n        True0_B.CoreSubsys[ForEach_itr].ComplextoRealImag_m;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Airspeeddirectionintherotorplan[1] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Gain: '<S76>/Gain' incorporates:\n       *  Product: '<S76>/Divide'\n       */\n      phi *= True0_P.CoreSubsys.Gain_Gain_h;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Gain_m[1] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Product: '<S76>/Product' incorporates:\n       *  Gain: '<S76>/Gain'\n       */\n      phi *= True0_B.CoreSubsys[ForEach_itr].TrigonometricFunction_p;\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n      True0_B.CoreSubsys[ForEach_itr].Product_d5[1] = phi;\n\n      /* Outputs for IfAction SubSystem: '<S70>/Nonzero airspeed in rotor plane' incorporates:\n       *  ActionPort: '<S76>/Action Port'\n       */\n      /* Reshape: '<S76>/Reshape1' */\n      True0_B.CoreSubsys[ForEach_itr].Reshape1[1] = phi;\n\n      /* Gain: '<S76>/Gain2' */\n      True0_B.CoreSubsys[ForEach_itr].Gain2 = True0_P.CoreSubsys.Gain2_Gain *\n        True0_B.CoreSubsys[ForEach_itr].Airspeeddirectionintherotorplan[1];\n\n      /* Product: '<S76>/Product1' incorporates:\n       *  Constant: '<S76>/Constant1'\n       */\n      True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[0] =\n        True0_B.CoreSubsys[ForEach_itr].Gain2 * True0_P.k_beta *\n        True0_B.CoreSubsys[ForEach_itr].Flappinganglerad;\n      True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[1] =\n        True0_B.CoreSubsys[ForEach_itr].Airspeeddirectionintherotorplan[0] *\n        True0_P.k_beta * True0_B.CoreSubsys[ForEach_itr].Flappinganglerad;\n\n      /* Reshape: '<S76>/Reshape1' */\n      True0_B.CoreSubsys[ForEach_itr].Reshape1[2] =\n        True0_B.CoreSubsys[ForEach_itr].Gain1_o;\n\n      /* Product: '<S76>/Product2' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       *  Reshape: '<S76>/Reshape1'\n       */\n      phi = True0_B.CoreSubsys[ForEach_itr].Reshape1[0];\n      ctheta = True0_B.CoreSubsys[ForEach_itr].Reshape1[1];\n      theta = True0_B.CoreSubsys[ForEach_itr].Reshape1[2];\n      std::memcpy(&tmp[0], &True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[0],\n                  9U * sizeof(real_T));\n      for (i = 0; i < 3; i++) {\n        /* Product: '<S76>/Product2' */\n        Product_pk_tmp = tmp[3 * i] * phi;\n        Product_pk_tmp += tmp[3 * i + 1] * ctheta;\n        Product_pk_tmp += tmp[3 * i + 2] * theta;\n        True0_B.CoreSubsys[ForEach_itr].Product2_j[i] = Product_pk_tmp;\n      }\n\n      /* Product: '<S76>/Product3' incorporates:\n       *  Concatenate: '<S108>/Vector Concatenate'\n       *  Product: '<S76>/Product1'\n       */\n      phi = True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[0];\n      ctheta = True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[1];\n      theta = True0_B.CoreSubsys[ForEach_itr].MotorhubmomentMotoraxes[2];\n      std::memcpy(&tmp[0], &True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[0],\n                  9U * sizeof(real_T));\n      for (i = 0; i < 3; i++) {\n        /* Product: '<S76>/Product3' */\n        Product_pk_tmp = tmp[3 * i] * phi;\n        Product_pk_tmp += tmp[3 * i + 1] * ctheta;\n        Product_pk_tmp += tmp[3 * i + 2] * theta;\n        True0_B.CoreSubsys[ForEach_itr].Product3[i] = Product_pk_tmp;\n\n        /* Merge: '<S70>/Merge' incorporates:\n         *  Product: '<S76>/Product2'\n         *  Reshape: '<S76>/Reshape2'\n         */\n        True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[i] =\n          True0_B.CoreSubsys[ForEach_itr].Product2_j[i];\n\n        /* Merge: '<S70>/Merge1' incorporates:\n         *  Product: '<S76>/Product3'\n         *  Reshape: '<S76>/Reshape4'\n         */\n        True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[i] =\n          Product_pk_tmp;\n      }\n\n      /* End of Outputs for SubSystem: '<S70>/Nonzero airspeed in rotor plane' */\n    }\n\n    /* Product: '<S67>/Product9' incorporates:\n     *  Merge: '<S70>/Merge'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Product9[0] = True0_B.CoreSubsys[ForEach_itr]\n      .Dynamicthrustmagnitude * True0_B.CoreSubsys[ForEach_itr].\n      NewtiltedthrustdirectionBodyaxe[0];\n    True0_B.CoreSubsys[ForEach_itr].Product9[1] = True0_B.CoreSubsys[ForEach_itr]\n      .Dynamicthrustmagnitude * True0_B.CoreSubsys[ForEach_itr].\n      NewtiltedthrustdirectionBodyaxe[1];\n    True0_B.CoreSubsys[ForEach_itr].Product9[2] = True0_B.CoreSubsys[ForEach_itr]\n      .Dynamicthrustmagnitude * True0_B.CoreSubsys[ForEach_itr].\n      NewtiltedthrustdirectionBodyaxe[2];\n\n    /* Product: '<S73>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_i = True0_B.CoreSubsys[ForEach_itr].\n      Switch2 * rtb_ImpSel_InsertedFor_MotorMat[8];\n\n    /* Product: '<S73>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].Product1_ar = cphi *\n      rtb_ImpSel_InsertedFor_MotorMat[9];\n\n    /* Sum: '<S73>/Sum' */\n    True0_B.CoreSubsys[ForEach_itr].Motortorquemagnitude =\n      True0_B.CoreSubsys[ForEach_itr].Product_i + True0_B.CoreSubsys[ForEach_itr]\n      .Product1_ar;\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      for (i = 0; i < 3; i++) {\n        /* Math: '<S75>/Math Function' incorporates:\n         *  Concatenate: '<S108>/Vector Concatenate'\n         */\n        True0_B.CoreSubsys[ForEach_itr].MathFunction[3 * i] =\n          True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[i];\n        True0_B.CoreSubsys[ForEach_itr].MathFunction[3 * i + 1] =\n          True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[i + 3];\n        True0_B.CoreSubsys[ForEach_itr].MathFunction[3 * i + 2] =\n          True0_B.CoreSubsys[ForEach_itr].VectorConcatenate[i + 6];\n      }\n\n      /* Product: '<S75>/Product9' incorporates:\n       *  Constant: '<S75>/Constant'\n       *  Math: '<S75>/Math Function'\n       */\n      std::memcpy(&tmp[0], &True0_B.CoreSubsys[ForEach_itr].MathFunction[0], 9U *\n                  sizeof(real_T));\n      phi = True0_P.CoreSubsys.Constant_Value_b[0];\n      ctheta = True0_P.CoreSubsys.Constant_Value_b[1];\n      theta = True0_P.CoreSubsys.Constant_Value_b[2];\n      for (i = 0; i < 3; i++) {\n        Product_pk_tmp = tmp[i] * phi;\n        Product_pk_tmp += tmp[i + 3] * ctheta;\n        Product_pk_tmp += tmp[i + 6] * theta;\n\n        /* Product: '<S75>/Product9' */\n        True0_B.CoreSubsys[ForEach_itr].Product9_p[i] = Product_pk_tmp;\n      }\n\n      /* End of Product: '<S75>/Product9' */\n    }\n\n    /* Product: '<S67>/Product3' */\n    cphi = True0_B.CoreSubsys[ForEach_itr].Motortorquemagnitude *\n      rtb_ImpSel_InsertedFor_MotorMat[3];\n\n    /* Product: '<S67>/Product3' incorporates:\n     *  Product: '<S75>/Product9'\n     */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Product9_p[0];\n    True0_B.CoreSubsys[ForEach_itr].Momentinducedbyaerodynamicdragp[0] = phi;\n\n    /* Product: '<S67>/Product8' incorporates:\n     *  Product: '<S67>/Product3'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Product8[0] = phi *\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h;\n\n    /* Product: '<S67>/Product3' incorporates:\n     *  Product: '<S75>/Product9'\n     */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Product9_p[1];\n    True0_B.CoreSubsys[ForEach_itr].Momentinducedbyaerodynamicdragp[1] = phi;\n\n    /* Product: '<S67>/Product8' incorporates:\n     *  Product: '<S67>/Product3'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Product8[1] = phi *\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h;\n\n    /* Product: '<S67>/Product3' incorporates:\n     *  Product: '<S75>/Product9'\n     */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Product9_p[2];\n    True0_B.CoreSubsys[ForEach_itr].Momentinducedbyaerodynamicdragp[2] = phi;\n\n    /* Product: '<S67>/Product8' incorporates:\n     *  Product: '<S67>/Product3'\n     */\n    True0_B.CoreSubsys[ForEach_itr].Product8[2] = phi *\n      True0_B.CoreSubsys[ForEach_itr].ThrustratioTT_h;\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Gain: '<S95>/Gain' */\n      True0_B.CoreSubsys[ForEach_itr].Gain = True0_P.CoreSubsys.Gain_Gain_n *\n        rtb_ImpSel_InsertedFor_MotorMat[15];\n\n      /* Product: '<S95>/Product7' */\n      True0_B.CoreSubsys[ForEach_itr].Product7 = True0_B.CoreSubsys[ForEach_itr]\n        .Gain * True0_B.CoreSubsys[ForEach_itr].Gain *\n        rtb_ImpSel_InsertedFor_MotorMat[16];\n\n      /* Gain: '<S95>/Gain1' */\n      True0_B.CoreSubsys[ForEach_itr].Gain1 = True0_P.CoreSubsys.Gain1_Gain_c *\n        True0_B.CoreSubsys[ForEach_itr].Product7;\n    }\n\n    /* Product: '<S96>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_h = True0_B.omega[1] *\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[2];\n\n    /* Product: '<S96>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].Product1_m = True0_B.CoreSubsys[ForEach_itr]\n      .NewtiltedthrustdirectionBodyaxe[0] * True0_B.omega[2];\n\n    /* Product: '<S96>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].Product2_e = True0_B.omega[0] *\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[1];\n\n    /* Product: '<S97>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_i4 = True0_B.CoreSubsys[ForEach_itr]\n      .NewtiltedthrustdirectionBodyaxe[1] * True0_B.omega[2];\n\n    /* Product: '<S97>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].Product1_ar5 = True0_B.omega[0] *\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[2];\n\n    /* Product: '<S97>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].Product2_h = True0_B.CoreSubsys[ForEach_itr]\n      .NewtiltedthrustdirectionBodyaxe[0] * True0_B.omega[1];\n\n    /* Sum: '<S94>/Sum' */\n    True0_B.CoreSubsys[ForEach_itr].Sum_j[0] = True0_B.CoreSubsys[ForEach_itr].\n      Product_h - True0_B.CoreSubsys[ForEach_itr].Product_i4;\n    True0_B.CoreSubsys[ForEach_itr].Sum_j[1] = True0_B.CoreSubsys[ForEach_itr].\n      Product1_m - True0_B.CoreSubsys[ForEach_itr].Product1_ar5;\n    True0_B.CoreSubsys[ForEach_itr].Sum_j[2] = True0_B.CoreSubsys[ForEach_itr].\n      Product2_e - True0_B.CoreSubsys[ForEach_itr].Product2_h;\n\n    /* Gain: '<S72>/Conversion rpm to rad//s' */\n    True0_B.CoreSubsys[ForEach_itr].Conversionrpmtorads = True0_P.rpm2radpersec *\n      True0_B.CoreSubsys[ForEach_itr].Switch2;\n\n    /* Product: '<S109>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_ez = True0_B.CoreSubsys[ForEach_itr]\n      .VectorfromrealCoGtopropellerBod[1] * True0_B.CoreSubsys[ForEach_itr].\n      Product9[2];\n\n    /* Product: '<S109>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].Product1_jt = True0_B.CoreSubsys[ForEach_itr]\n      .Product9[0] * True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[2];\n\n    /* Product: '<S109>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].Product2_p = True0_B.CoreSubsys[ForEach_itr]\n      .VectorfromrealCoGtopropellerBod[0] * True0_B.CoreSubsys[ForEach_itr].\n      Product9[1];\n\n    /* Product: '<S110>/Product' */\n    True0_B.CoreSubsys[ForEach_itr].Product_m = True0_B.CoreSubsys[ForEach_itr].\n      Product9[1] * True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[2];\n\n    /* Product: '<S110>/Product1' */\n    True0_B.CoreSubsys[ForEach_itr].Product1_k = True0_B.CoreSubsys[ForEach_itr]\n      .VectorfromrealCoGtopropellerBod[0] * True0_B.CoreSubsys[ForEach_itr].\n      Product9[2];\n\n    /* Product: '<S110>/Product2' */\n    True0_B.CoreSubsys[ForEach_itr].Product2_n = True0_B.CoreSubsys[ForEach_itr]\n      .Product9[0] * True0_B.CoreSubsys[ForEach_itr].\n      VectorfromrealCoGtopropellerBod[1];\n\n    /* Sum: '<S69>/Sum' */\n    True0_B.CoreSubsys[ForEach_itr].Sum_h[0] = True0_B.CoreSubsys[ForEach_itr].\n      Product_ez - True0_B.CoreSubsys[ForEach_itr].Product_m;\n    True0_B.CoreSubsys[ForEach_itr].Sum_h[1] = True0_B.CoreSubsys[ForEach_itr].\n      Product1_jt - True0_B.CoreSubsys[ForEach_itr].Product1_k;\n    True0_B.CoreSubsys[ForEach_itr].Sum_h[2] = True0_B.CoreSubsys[ForEach_itr].\n      Product2_p - True0_B.CoreSubsys[ForEach_itr].Product2_n;\n\n    /* Product: '<S72>/Product5' */\n    cphi = True0_B.CoreSubsys[ForEach_itr].Gain1 *\n      rtb_ImpSel_InsertedFor_MotorMat[3];\n\n    /* Product: '<S72>/Product5' */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Sum_j[0] *\n      True0_B.CoreSubsys[ForEach_itr].Conversionrpmtorads;\n    True0_B.CoreSubsys[ForEach_itr].Product5_k[0] = phi;\n\n    /* Sum: '<S60>/Add' incorporates:\n     *  Merge: '<S70>/Merge1'\n     *  Product: '<S67>/Product8'\n     *  Product: '<S72>/Product5'\n     *  Sum: '<S69>/Sum'\n     */\n    phi = ((True0_B.CoreSubsys[ForEach_itr].Product8[0] +\n            True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[0])\n           + phi) + True0_B.CoreSubsys[ForEach_itr].Sum_h[0];\n    True0_B.CoreSubsys[ForEach_itr].Add[0] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_moment' incorporates:\n     *  Sum: '<S60>/Add'\n     */\n    True0_B.ImpAsg_InsertedFor_Motor_moment[3 * ForEach_itr] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_force' incorporates:\n     *  Product: '<S67>/Product9'\n     */\n    True0_B.ImpAsg_InsertedFor_Motor_force_[3 * ForEach_itr] =\n      True0_B.CoreSubsys[ForEach_itr].Product9[0];\n\n    /* Product: '<S72>/Product5' */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Sum_j[1] *\n      True0_B.CoreSubsys[ForEach_itr].Conversionrpmtorads;\n    True0_B.CoreSubsys[ForEach_itr].Product5_k[1] = phi;\n\n    /* Sum: '<S60>/Add' incorporates:\n     *  Merge: '<S70>/Merge1'\n     *  Product: '<S67>/Product8'\n     *  Product: '<S72>/Product5'\n     *  Sum: '<S69>/Sum'\n     */\n    phi = ((True0_B.CoreSubsys[ForEach_itr].Product8[1] +\n            True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[1])\n           + phi) + True0_B.CoreSubsys[ForEach_itr].Sum_h[1];\n    True0_B.CoreSubsys[ForEach_itr].Add[1] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_moment' incorporates:\n     *  ForEachSliceAssignment generated from: '<S55>/Motor_force'\n     *  Sum: '<S60>/Add'\n     */\n    i = 3 * ForEach_itr + 1;\n    True0_B.ImpAsg_InsertedFor_Motor_moment[i] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_force' incorporates:\n     *  Product: '<S67>/Product9'\n     */\n    True0_B.ImpAsg_InsertedFor_Motor_force_[i] = True0_B.CoreSubsys[ForEach_itr]\n      .Product9[1];\n\n    /* Product: '<S72>/Product5' */\n    phi = cphi * True0_B.CoreSubsys[ForEach_itr].Sum_j[2] *\n      True0_B.CoreSubsys[ForEach_itr].Conversionrpmtorads;\n    True0_B.CoreSubsys[ForEach_itr].Product5_k[2] = phi;\n\n    /* Sum: '<S60>/Add' incorporates:\n     *  Merge: '<S70>/Merge1'\n     *  Product: '<S67>/Product8'\n     *  Product: '<S72>/Product5'\n     *  Sum: '<S69>/Sum'\n     */\n    phi = ((True0_B.CoreSubsys[ForEach_itr].Product8[2] +\n            True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[2])\n           + phi) + True0_B.CoreSubsys[ForEach_itr].Sum_h[2];\n    True0_B.CoreSubsys[ForEach_itr].Add[2] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_moment' incorporates:\n     *  ForEachSliceAssignment generated from: '<S55>/Motor_force'\n     *  Sum: '<S60>/Add'\n     */\n    i = 3 * ForEach_itr + 2;\n    True0_B.ImpAsg_InsertedFor_Motor_moment[i] = phi;\n\n    /* ForEachSliceAssignment generated from: '<S55>/Motor_force' incorporates:\n     *  Product: '<S67>/Product9'\n     */\n    True0_B.ImpAsg_InsertedFor_Motor_force_[i] = True0_B.CoreSubsys[ForEach_itr]\n      .Product9[2];\n  }\n\n  /* End of Outputs for SubSystem: '<S37>/For Each Subsystem' */\n\n  /* Sum: '<S37>/Sum of Elements' incorporates:\n   *  ForEachSliceAssignment generated from: '<S55>/Motor_force'\n   */\n  for (i = 0; i < 3; i++) {\n    tmp_0 = i;\n    cphi = True0_B.ImpAsg_InsertedFor_Motor_force_[tmp_0];\n    tmp_0 = i + 3;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_force_[tmp_0];\n    tmp_0 = i + 6;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_force_[tmp_0];\n    tmp_0 = i + 9;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_force_[tmp_0];\n    True0_B.SumofElements[i] = cphi;\n  }\n\n  /* End of Sum: '<S37>/Sum of Elements' */\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* Product: '<S36>/Product1' incorporates:\n     *  Constant: '<S36>/Gravity (Inertial axes)'\n     *  Inport: '<Root>/mass_real'\n     */\n    True0_B.ForceofgravityInertialaxes[0] = True0_P.GravityInertialaxes_Value[0]\n      * True0_U.mass_real;\n    True0_B.ForceofgravityInertialaxes[1] = True0_P.GravityInertialaxes_Value[1]\n      * True0_U.mass_real;\n    True0_B.ForceofgravityInertialaxes[2] = True0_P.GravityInertialaxes_Value[2]\n      * True0_U.mass_real;\n  }\n\n  /* Product: '<S36>/Product' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  std::memcpy(&tmp[0], &True0_B.VectorConcatenate[0], 9U * sizeof(real_T));\n  phi = True0_B.ForceofgravityInertialaxes[0];\n  ctheta = True0_B.ForceofgravityInertialaxes[1];\n  theta = True0_B.ForceofgravityInertialaxes[2];\n  for (i = 0; i < 3; i++) {\n    cphi = tmp[i] * phi;\n    cphi += tmp[i + 3] * ctheta;\n    cphi += tmp[i + 6] * theta;\n\n    /* Product: '<S36>/Product' */\n    True0_B.ForceofgravityBodyaxes[i] = cphi;\n\n    /* Sum: '<S3>/Sum' incorporates:\n     *  Product: '<S36>/Product'\n     *  Sum: '<S37>/Sum of Elements'\n     */\n    True0_B.Sum[i] = True0_B.SumofElements[i] + cphi;\n  }\n\n  /* End of Product: '<S36>/Product' */\n\n  /* Product: '<S54>/Product' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   *  Inport: '<Root>/Wind_i'\n   */\n  std::memcpy(&tmp[0], &True0_B.VectorConcatenate[0], 9U * sizeof(real_T));\n  phi = True0_U.Wind_i[0];\n  ctheta = True0_U.Wind_i[1];\n  theta = True0_U.Wind_i[2];\n  for (i = 0; i < 3; i++) {\n    /* Product: '<S54>/Product' */\n    cphi = tmp[i] * phi;\n    cphi += tmp[i + 3] * ctheta;\n    cphi += tmp[i + 6] * theta;\n    True0_B.Product_n[i] = cphi;\n\n    /* Sum: '<S39>/Sum1' incorporates:\n     *  Integrator: '<S2>/V_b'\n     *  Product: '<S54>/Product'\n     */\n    cphi = True0_B.V_b[i] - cphi;\n    True0_B.TrueairspeedBodyaxes_m[i] = cphi;\n\n    /* Math: '<S53>/transpose' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    True0_B.transpose_i[i] = cphi;\n  }\n\n  /* Product: '<S53>/Product' incorporates:\n   *  Math: '<S53>/transpose'\n   *  Sum: '<S39>/Sum1'\n   */\n  Product_pk_tmp = True0_B.transpose_i[0];\n  phi = True0_B.TrueairspeedBodyaxes_m[0];\n  cphi = Product_pk_tmp * phi;\n  Product_pk_tmp = True0_B.transpose_i[1];\n  phi = True0_B.TrueairspeedBodyaxes_m[1];\n  cphi += Product_pk_tmp * phi;\n  Product_pk_tmp = True0_B.transpose_i[2];\n  phi = True0_B.TrueairspeedBodyaxes_m[2];\n  cphi += Product_pk_tmp * phi;\n\n  /* Product: '<S53>/Product' */\n  True0_B.Product_f1 = cphi;\n\n  /* Sqrt: '<S42>/Sqrt' */\n  True0_B.Sqrt_o = std::sqrt(True0_B.Product_f1);\n\n  /* ComplexToRealImag: '<S42>/Complex to Real-Imag' */\n  True0_B.ComplextoRealImag_b = True0_B.Sqrt_o;\n\n  /* If: '<S38>/If' */\n  if (rtsiIsModeUpdateTimeStep(&(&True0_M)->solverInfo)) {\n    rtAction = static_cast<int8_T>(!(True0_B.ComplextoRealImag_b == 0.0));\n    True0_DW.If_ActiveSubsystem = rtAction;\n  } else {\n    rtAction = True0_DW.If_ActiveSubsystem;\n  }\n\n  if (rtAction == 0) {\n    /* Outputs for IfAction SubSystem: '<S38>/Zero airspeed' incorporates:\n     *  ActionPort: '<S41>/Action Port'\n     */\n    if (rtmIsMajorTimeStep((&True0_M))) {\n      /* Merge: '<S38>/Merge' incorporates:\n       *  Constant: '<S41>/Constant'\n       */\n      True0_B.Forceagainstdirectionofmotiondu[0] = True0_P.Constant_Value[0];\n      True0_B.Forceagainstdirectionofmotiondu[1] = True0_P.Constant_Value[1];\n      True0_B.Forceagainstdirectionofmotiondu[2] = True0_P.Constant_Value[2];\n    }\n\n    /* End of Outputs for SubSystem: '<S38>/Zero airspeed' */\n  } else {\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Math: '<S52>/transpose' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[0];\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S52>/transpose' */\n    True0_B.transpose_j[0] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S52>/Product' incorporates:\n     *  Product: '<S47>/Product'\n     */\n    Product_pk_tmp = cphi * cphi;\n\n    /* Math: '<S52>/transpose' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[1];\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S52>/transpose' */\n    True0_B.transpose_j[1] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S52>/Product' incorporates:\n     *  Product: '<S47>/Product'\n     */\n    Product_pk_tmp += cphi * cphi;\n\n    /* Math: '<S52>/transpose' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[2];\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S52>/transpose' */\n    True0_B.transpose_j[2] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S52>/Product' incorporates:\n     *  Product: '<S47>/Product'\n     */\n    Product_pk_tmp += cphi * cphi;\n\n    /* Product: '<S52>/Product' */\n    True0_B.Product_m = Product_pk_tmp;\n\n    /* Product: '<S48>/Divide' incorporates:\n     *  Inport: '<Root>/Surface_params'\n     */\n    True0_B.Divide_i = True0_B.TrueairspeedBodyaxes_m[0] /\n      True0_U.Surface_params[0];\n\n    /* Product: '<S48>/Product' */\n    True0_B.Product_fu = True0_B.Divide_i * True0_B.Divide_i;\n\n    /* Product: '<S48>/Divide1' incorporates:\n     *  Inport: '<Root>/Surface_params'\n     */\n    True0_B.Divide1 = True0_B.TrueairspeedBodyaxes_m[1] /\n      True0_U.Surface_params[1];\n\n    /* Product: '<S48>/Product1' */\n    True0_B.Product1_f = True0_B.Divide1 * True0_B.Divide1;\n\n    /* Product: '<S48>/Divide2' incorporates:\n     *  Inport: '<Root>/Surface_params'\n     */\n    True0_B.Divide2 = True0_B.TrueairspeedBodyaxes_m[2] /\n      True0_U.Surface_params[2];\n\n    /* Product: '<S48>/Product2' */\n    True0_B.Product2_j = True0_B.Divide2 * True0_B.Divide2;\n\n    /* Sum: '<S48>/Add' */\n    True0_B.Add_f = (True0_B.Product_fu + True0_B.Product1_f) +\n      True0_B.Product2_j;\n\n    /* Sqrt: '<S48>/Reciprocal Sqrt' */\n    cphi = True0_B.Add_f;\n    if (cphi > 0.0) {\n      if (std::isinf(cphi)) {\n        /* Sqrt: '<S48>/Reciprocal Sqrt' */\n        True0_B.ReciprocalSqrt = 0.0;\n      } else {\n        /* Sqrt: '<S48>/Reciprocal Sqrt' */\n        True0_B.ReciprocalSqrt = 1.0 / std::sqrt(cphi);\n      }\n    } else if (cphi == 0.0) {\n      /* Sqrt: '<S48>/Reciprocal Sqrt' */\n      True0_B.ReciprocalSqrt = (rtInf);\n    } else {\n      /* Sqrt: '<S48>/Reciprocal Sqrt' */\n      True0_B.ReciprocalSqrt = (rtNaN);\n    }\n\n    /* End of Sqrt: '<S48>/Reciprocal Sqrt' */\n\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[0];\n\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    ctheta = cphi * True0_B.ReciprocalSqrt;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product_fb[0] = ctheta;\n\n    /* Math: '<S51>/transpose' */\n    True0_B.transpose_e[0] = ctheta;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S51>/Product' */\n    phi = ctheta * ctheta;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S47>/transpose' */\n    True0_B.transpose_h[0] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[1];\n\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    ctheta = cphi * True0_B.ReciprocalSqrt;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product_fb[1] = ctheta;\n\n    /* Math: '<S51>/transpose' */\n    True0_B.transpose_e[1] = ctheta;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S51>/Product' */\n    phi += ctheta * ctheta;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S47>/transpose' */\n    True0_B.transpose_h[1] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[2];\n\n    /* Product: '<S49>/Product' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    ctheta = cphi * True0_B.ReciprocalSqrt;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product_fb[2] = ctheta;\n\n    /* Math: '<S51>/transpose' */\n    True0_B.transpose_e[2] = ctheta;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S51>/Product' */\n    phi += ctheta * ctheta;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n\n    /* Math: '<S47>/transpose' */\n    True0_B.transpose_h[2] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S51>/Product' */\n    True0_B.Product_nx = phi;\n\n    /* Sqrt: '<S50>/Sqrt' */\n    True0_B.Sqrt_a = std::sqrt(True0_B.Product_nx);\n\n    /* ComplexToRealImag: '<S50>/Complex to Real-Imag' */\n    True0_B.ComplextoRealImag_i = True0_B.Sqrt_a;\n\n    /* Product: '<S40>/Product' incorporates:\n     *  Constant: '<S40>/Constant'\n     *  Constant: '<S40>/Constant1'\n     *  Constant: '<S40>/Constant2'\n     */\n    True0_B.Product_d = True0_P.Constant_Value_e * True0_P.rho *\n      True0_B.Product_m * True0_P.C_D * True0_B.ComplextoRealImag_i;\n\n    /* Abs: '<S40>/Abs' */\n    True0_B.Magnitudeofdragforce = std::abs(True0_B.Product_d);\n\n    /* Product: '<S47>/Product' */\n    True0_B.Product_dc = Product_pk_tmp;\n\n    /* Sqrt: '<S46>/Sqrt' */\n    True0_B.Sqrt_oc = std::sqrt(True0_B.Product_dc);\n\n    /* ComplexToRealImag: '<S46>/Complex to Real-Imag' */\n    True0_B.ComplextoRealImag_m = True0_B.Sqrt_oc;\n\n    /* Product: '<S43>/Divide' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[0] / True0_B.ComplextoRealImag_m;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Divide_n[0] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S40>/Product1' incorporates:\n     *  Product: '<S43>/Divide'\n     */\n    cphi *= True0_B.Magnitudeofdragforce;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product1_m[0] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Merge: '<S38>/Merge' incorporates:\n     *  Gain: '<S40>/Drag force opposes direction of airspeed'\n     *  Product: '<S40>/Product1'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[0] =\n      True0_P.Dragforceopposesdirectionofairs * cphi;\n\n    /* Product: '<S43>/Divide' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[1] / True0_B.ComplextoRealImag_m;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Divide_n[1] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S40>/Product1' incorporates:\n     *  Product: '<S43>/Divide'\n     */\n    cphi *= True0_B.Magnitudeofdragforce;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product1_m[1] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Merge: '<S38>/Merge' incorporates:\n     *  Gain: '<S40>/Drag force opposes direction of airspeed'\n     *  Product: '<S40>/Product1'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[1] =\n      True0_P.Dragforceopposesdirectionofairs * cphi;\n\n    /* Product: '<S43>/Divide' incorporates:\n     *  Sum: '<S39>/Sum1'\n     */\n    cphi = True0_B.TrueairspeedBodyaxes_m[2] / True0_B.ComplextoRealImag_m;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Divide_n[2] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Product: '<S40>/Product1' incorporates:\n     *  Product: '<S43>/Divide'\n     */\n    cphi *= True0_B.Magnitudeofdragforce;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n    True0_B.Product1_m[2] = cphi;\n\n    /* Outputs for IfAction SubSystem: '<S38>/Nonzero airspeed' incorporates:\n     *  ActionPort: '<S40>/Action Port'\n     */\n    /* Merge: '<S38>/Merge' incorporates:\n     *  Gain: '<S40>/Drag force opposes direction of airspeed'\n     *  Product: '<S40>/Product1'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[2] =\n      True0_P.Dragforceopposesdirectionofairs * cphi;\n\n    /* End of Outputs for SubSystem: '<S38>/Nonzero airspeed' */\n  }\n\n  /* End of If: '<S38>/If' */\n\n  /* Product: '<S33>/Product' */\n  True0_B.u2v3 = True0_B.omega[1] * True0_B.V_b[2];\n\n  /* Product: '<S33>/Product1' */\n  True0_B.u3v1 = True0_B.V_b[0] * True0_B.omega[2];\n\n  /* Product: '<S33>/Product2' */\n  True0_B.u1v2 = True0_B.omega[0] * True0_B.V_b[1];\n\n  /* Product: '<S34>/Product' */\n  True0_B.u3v2 = True0_B.V_b[1] * True0_B.omega[2];\n\n  /* Product: '<S34>/Product1' */\n  True0_B.u1v3 = True0_B.omega[0] * True0_B.V_b[2];\n\n  /* Product: '<S34>/Product2' */\n  True0_B.u2v1 = True0_B.V_b[0] * True0_B.omega[1];\n\n  /* Sum: '<S10>/Sum' */\n  True0_B.Sum_c[0] = True0_B.u2v3 - True0_B.u3v2;\n  True0_B.Sum_c[1] = True0_B.u3v1 - True0_B.u1v3;\n  True0_B.Sum_c[2] = True0_B.u1v2 - True0_B.u2v1;\n\n  /* Sum: '<S3>/Sum3' incorporates:\n   *  Merge: '<S38>/Merge'\n   *  Sum: '<S3>/Sum'\n   */\n  cphi = True0_B.Sum[0] + True0_B.Forceagainstdirectionofmotiondu[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum3[0] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S3>/Sum1' incorporates:\n   *  Inport: '<Root>/Force_disturb'\n   *  Sum: '<S3>/Sum3'\n   */\n  cphi += True0_U.Force_disturb[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum1[0] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S2>/Product1' incorporates:\n   *  Inport: '<Root>/mass_real'\n   *  Sum: '<S3>/Sum1'\n   */\n  cphi /= True0_U.mass_real;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product1[0] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S2>/Sum1' incorporates:\n   *  Product: '<S2>/Product1'\n   */\n  True0_B.Sum1_o[0] = cphi - True0_B.Sum_c[0];\n\n  /* Sum: '<S3>/Sum3' incorporates:\n   *  Merge: '<S38>/Merge'\n   *  Sum: '<S3>/Sum'\n   */\n  cphi = True0_B.Sum[1] + True0_B.Forceagainstdirectionofmotiondu[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum3[1] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S3>/Sum1' incorporates:\n   *  Inport: '<Root>/Force_disturb'\n   *  Sum: '<S3>/Sum3'\n   */\n  cphi += True0_U.Force_disturb[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum1[1] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S2>/Product1' incorporates:\n   *  Inport: '<Root>/mass_real'\n   *  Sum: '<S3>/Sum1'\n   */\n  cphi /= True0_U.mass_real;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product1[1] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S2>/Sum1' incorporates:\n   *  Product: '<S2>/Product1'\n   */\n  True0_B.Sum1_o[1] = cphi - True0_B.Sum_c[1];\n\n  /* Sum: '<S3>/Sum3' incorporates:\n   *  Merge: '<S38>/Merge'\n   *  Sum: '<S3>/Sum'\n   */\n  cphi = True0_B.Sum[2] + True0_B.Forceagainstdirectionofmotiondu[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum3[2] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S3>/Sum1' incorporates:\n   *  Inport: '<Root>/Force_disturb'\n   *  Sum: '<S3>/Sum3'\n   */\n  cphi += True0_U.Force_disturb[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum1[2] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Product: '<S2>/Product1' incorporates:\n   *  Inport: '<Root>/mass_real'\n   *  Sum: '<S3>/Sum1'\n   */\n  cphi /= True0_U.mass_real;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product1[2] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S2>/Sum1' incorporates:\n   *  Product: '<S2>/Product1'\n   */\n  True0_B.Sum1_o[2] = cphi - True0_B.Sum_c[2];\n\n  /* Product: '<S5>/Product' incorporates:\n   *  Math: '<S5>/Math Function2'\n   *  Sum: '<S2>/Sum1'\n   */\n  std::memcpy(&tmp[0], &True0_B.DCM_bi_c[0], 9U * sizeof(real_T));\n  phi = True0_B.Sum1_o[0];\n  ctheta = True0_B.Sum1_o[1];\n  theta = True0_B.Sum1_o[2];\n  for (i = 0; i < 3; i++) {\n    /* Product: '<S5>/Product' */\n    cphi = tmp[i] * phi;\n    cphi += tmp[i + 3] * ctheta;\n    cphi += tmp[i + 6] * theta;\n    True0_B.Product_e[i] = cphi;\n  }\n\n  /* Product: '<S12>/Product' incorporates:\n   *  Inport: '<Root>/J_real'\n   *  Integrator: '<S2>/omega'\n   */\n  std::memcpy(&tmp[0], &True0_U.J_real[0], 9U * sizeof(real_T));\n  phi = True0_B.omega[0];\n  ctheta = True0_B.omega[1];\n  theta = True0_B.omega[2];\n  for (i = 0; i < 3; i++) {\n    /* Product: '<S12>/Product' */\n    cphi = tmp[i] * phi;\n    cphi += tmp[i + 3] * ctheta;\n    cphi += tmp[i + 6] * theta;\n    True0_B.Product_na[i] = cphi;\n\n    /* Sum: '<S37>/Sum of Elements1' incorporates:\n     *  ForEachSliceAssignment generated from: '<S55>/Motor_moment'\n     */\n    tmp_0 = i;\n    cphi = True0_B.ImpAsg_InsertedFor_Motor_moment[tmp_0];\n    tmp_0 = i + 3;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_moment[tmp_0];\n    tmp_0 = i + 6;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_moment[tmp_0];\n    tmp_0 = i + 9;\n    cphi += True0_B.ImpAsg_InsertedFor_Motor_moment[tmp_0];\n    True0_B.SumofElements1[i] = cphi;\n  }\n\n  /* Product: '<S13>/Product' */\n  True0_B.u2v3_m = True0_B.omega[1] * True0_B.Product_na[2];\n\n  /* Product: '<S13>/Product1' */\n  True0_B.u3v1_m = True0_B.Product_na[0] * True0_B.omega[2];\n\n  /* Product: '<S13>/Product2' */\n  True0_B.u1v2_h = True0_B.omega[0] * True0_B.Product_na[1];\n\n  /* Product: '<S14>/Product' */\n  True0_B.u3v2_b = True0_B.Product_na[1] * True0_B.omega[2];\n\n  /* Product: '<S14>/Product1' */\n  True0_B.u1v3_k = True0_B.omega[0] * True0_B.Product_na[2];\n\n  /* Product: '<S14>/Product2' */\n  True0_B.u2v1_m = True0_B.Product_na[0] * True0_B.omega[1];\n\n  /* Sum: '<S11>/Sum' */\n  True0_B.Sum_k[0] = True0_B.u2v3_m - True0_B.u3v2_b;\n  True0_B.Sum_k[1] = True0_B.u3v1_m - True0_B.u1v3_k;\n  True0_B.Sum_k[2] = True0_B.u1v2_h - True0_B.u2v1_m;\n\n  /* Sum: '<S3>/Sum2' incorporates:\n   *  Inport: '<Root>/Moment_disturb'\n   *  Sum: '<S37>/Sum of Elements1'\n   */\n  cphi = True0_B.SumofElements1[0] + True0_U.Moment_disturb[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum2[0] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S6>/Sum1' incorporates:\n   *  Sum: '<S11>/Sum'\n   *  Sum: '<S3>/Sum2'\n   */\n  True0_B.Sum1_n[0] = cphi - True0_B.Sum_k[0];\n\n  /* Math: '<S16>/transpose' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_B.transpose_g[0] = True0_B.omega[0];\n\n  /* Sum: '<S3>/Sum2' incorporates:\n   *  Inport: '<Root>/Moment_disturb'\n   *  Sum: '<S37>/Sum of Elements1'\n   */\n  cphi = True0_B.SumofElements1[1] + True0_U.Moment_disturb[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum2[1] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S6>/Sum1' incorporates:\n   *  Sum: '<S11>/Sum'\n   *  Sum: '<S3>/Sum2'\n   */\n  True0_B.Sum1_n[1] = cphi - True0_B.Sum_k[1];\n\n  /* Math: '<S16>/transpose' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_B.transpose_g[1] = True0_B.omega[1];\n\n  /* Sum: '<S3>/Sum2' incorporates:\n   *  Inport: '<Root>/Moment_disturb'\n   *  Sum: '<S37>/Sum of Elements1'\n   */\n  cphi = True0_B.SumofElements1[2] + True0_U.Moment_disturb[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Sum2[2] = cphi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S6>/Sum1' incorporates:\n   *  Sum: '<S11>/Sum'\n   *  Sum: '<S3>/Sum2'\n   */\n  True0_B.Sum1_n[2] = cphi - True0_B.Sum_k[2];\n\n  /* Math: '<S16>/transpose' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_B.transpose_g[2] = True0_B.omega[2];\n\n  /* Product: '<S6>/Product' incorporates:\n   *  Inport: '<Root>/J_real'\n   *  Sum: '<S6>/Sum1'\n   */\n  rt_mldivide_U1d3x3_U2d_JBYZyA3A(True0_U.J_real, True0_B.Sum1_n,\n    True0_B.Product_lc);\n\n  /* Product: '<S19>/Product' */\n  True0_B.u2v3_j = True0_B.omega[1] * True0_B.Divide[3];\n\n  /* Product: '<S19>/Product1' */\n  True0_B.u3v1_h = True0_B.Divide[1] * True0_B.omega[2];\n\n  /* Product: '<S19>/Product2' */\n  True0_B.u1v2_i = True0_B.omega[0] * True0_B.Divide[2];\n\n  /* Product: '<S20>/Product' */\n  True0_B.u3v2_d = True0_B.omega[2] * True0_B.Divide[2];\n\n  /* Product: '<S20>/Product1' */\n  True0_B.u1v3_p = True0_B.omega[0] * True0_B.Divide[3];\n\n  /* Product: '<S20>/Product2' */\n  True0_B.u2v1_b = True0_B.omega[1] * True0_B.Divide[1];\n\n  /* Sum: '<S15>/Sum' */\n  True0_B.Sum_o[0] = True0_B.u2v3_j - True0_B.u3v2_d;\n  True0_B.Sum_o[1] = True0_B.u3v1_h - True0_B.u1v3_p;\n  True0_B.Sum_o[2] = True0_B.u1v2_i - True0_B.u2v1_b;\n\n  /* Product: '<S16>/Product' incorporates:\n   *  Math: '<S16>/transpose'\n   */\n  Product_pk_tmp = True0_B.transpose_g[0];\n  phi = True0_B.Divide[1];\n  cphi = Product_pk_tmp * phi;\n\n  /* Product: '<S7>/Product' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  phi = True0_B.Divide[0] * True0_B.omega[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product_i[0] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S7>/Subtract' incorporates:\n   *  Product: '<S7>/Product'\n   */\n  phi -= True0_B.Sum_o[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Subtract[0] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Gain: '<S7>/1//2' incorporates:\n   *  Sum: '<S7>/Subtract'\n   */\n  phi *= True0_P.u2_Gain_c;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.u2_d[0] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* SignalConversion generated from: '<S7>/Q-Integrator' */\n  True0_B.TmpSignalConversionAtQIntegrato[1] = phi;\n\n  /* Product: '<S16>/Product' incorporates:\n   *  Math: '<S16>/transpose'\n   */\n  Product_pk_tmp = True0_B.transpose_g[1];\n  phi = True0_B.Divide[2];\n  cphi += Product_pk_tmp * phi;\n\n  /* Product: '<S7>/Product' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  phi = True0_B.Divide[0] * True0_B.omega[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product_i[1] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S7>/Subtract' incorporates:\n   *  Product: '<S7>/Product'\n   */\n  phi -= True0_B.Sum_o[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Subtract[1] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Gain: '<S7>/1//2' incorporates:\n   *  Sum: '<S7>/Subtract'\n   */\n  phi *= True0_P.u2_Gain_c;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.u2_d[1] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* SignalConversion generated from: '<S7>/Q-Integrator' */\n  True0_B.TmpSignalConversionAtQIntegrato[2] = phi;\n\n  /* Product: '<S16>/Product' incorporates:\n   *  Math: '<S16>/transpose'\n   */\n  Product_pk_tmp = True0_B.transpose_g[2];\n  phi = True0_B.Divide[3];\n  cphi += Product_pk_tmp * phi;\n\n  /* Product: '<S7>/Product' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  phi = True0_B.Divide[0] * True0_B.omega[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Product_i[2] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Sum: '<S7>/Subtract' incorporates:\n   *  Product: '<S7>/Product'\n   */\n  phi -= True0_B.Sum_o[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.Subtract[2] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Gain: '<S7>/1//2' incorporates:\n   *  Sum: '<S7>/Subtract'\n   */\n  phi *= True0_P.u2_Gain_c;\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.u2_d[2] = phi;\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* SignalConversion generated from: '<S7>/Q-Integrator' */\n  True0_B.TmpSignalConversionAtQIntegrato[3] = phi;\n\n  /* Product: '<S16>/Product' */\n  True0_B.Product_py = cphi;\n\n  /* Gain: '<S7>/-1//2' */\n  True0_B.u2 = True0_P.u2_Gain * True0_B.Product_py;\n\n  /* SignalConversion generated from: '<S7>/Q-Integrator' */\n  True0_B.TmpSignalConversionAtQIntegrato[0] = True0_B.u2;\n\n  /* Fcn: '<S8>/Fcn' */\n  True0_B.Fcn = psi_tmp_0 * 2.0;\n\n  /* Fcn: '<S8>/Fcn1' */\n  True0_B.Fcn1 = psi_tmp * 2.0;\n\n  /* Fcn: '<S8>/Fcn2' */\n  True0_B.Fcn2 = cpsi * 2.0;\n\n  /* Fcn: '<S8>/Fcn3' */\n  True0_B.Fcn3 = spsi;\n\n  /* Fcn: '<S8>/Fcn4' */\n  True0_B.Fcn4 = psi;\n\n  /* Trigonometry: '<S8>/Trigonometric Function' */\n  psi = True0_B.Fcn1;\n  if (psi > 1.0) {\n    psi = 1.0;\n  } else if (psi < -1.0) {\n    psi = -1.0;\n  }\n\n  /* Trigonometry: '<S8>/Trigonometric Function' */\n  True0_B.TrigonometricFunction = std::asin(psi);\n\n  /* Gain: '<S8>/Gain' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate_h[1] = True0_P.Gain_Gain_d *\n    True0_B.TrigonometricFunction;\n\n  /* Trigonometry: '<S8>/Trigonometric Function1' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate_h[0] = rt_atan2d_snf(True0_B.Fcn, True0_B.Fcn3);\n\n  /* Trigonometry: '<S8>/Trigonometric Function2' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_B.VectorConcatenate_h[2] = rt_atan2d_snf(True0_B.Fcn2, True0_B.Fcn4);\n\n  /* Integrator: '<S2>/X_i' */\n  psi = True0_X.X_i_CSTATE[0];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.X_i[0] = psi;\n\n  /* Outport: '<Root>/X_i' incorporates:\n   *  Integrator: '<S2>/X_i'\n   */\n  True0_Y.X_i[0] = psi;\n\n  /* Outport: '<Root>/V_i' incorporates:\n   *  Product: '<S4>/Product'\n   */\n  True0_Y.V_i[0] = True0_B.Product_b[0];\n\n  /* Outport: '<Root>/V_b' incorporates:\n   *  Integrator: '<S2>/V_b'\n   */\n  True0_Y.V_b[0] = True0_B.V_b[0];\n\n  /* Outport: '<Root>/a_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  True0_Y.a_b[0] = True0_B.Sum1_o[0];\n\n  /* Outport: '<Root>/a_i' incorporates:\n   *  Product: '<S5>/Product'\n   */\n  True0_Y.a_i[0] = True0_B.Product_e[0];\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Integrator: '<S2>/X_i' */\n  psi = True0_X.X_i_CSTATE[1];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.X_i[1] = psi;\n\n  /* Outport: '<Root>/X_i' incorporates:\n   *  Integrator: '<S2>/X_i'\n   */\n  True0_Y.X_i[1] = psi;\n\n  /* Outport: '<Root>/V_i' incorporates:\n   *  Product: '<S4>/Product'\n   */\n  True0_Y.V_i[1] = True0_B.Product_b[1];\n\n  /* Outport: '<Root>/V_b' incorporates:\n   *  Integrator: '<S2>/V_b'\n   */\n  True0_Y.V_b[1] = True0_B.V_b[1];\n\n  /* Outport: '<Root>/a_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  True0_Y.a_b[1] = True0_B.Sum1_o[1];\n\n  /* Outport: '<Root>/a_i' incorporates:\n   *  Product: '<S5>/Product'\n   */\n  True0_Y.a_i[1] = True0_B.Product_e[1];\n\n  /* Outputs for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Integrator: '<S2>/X_i' */\n  psi = True0_X.X_i_CSTATE[2];\n\n  /* End of Outputs for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  True0_B.X_i[2] = psi;\n\n  /* Outport: '<Root>/X_i' incorporates:\n   *  Integrator: '<S2>/X_i'\n   */\n  True0_Y.X_i[2] = psi;\n\n  /* Outport: '<Root>/V_i' incorporates:\n   *  Product: '<S4>/Product'\n   */\n  True0_Y.V_i[2] = True0_B.Product_b[2];\n\n  /* Outport: '<Root>/V_b' incorporates:\n   *  Integrator: '<S2>/V_b'\n   */\n  True0_Y.V_b[2] = True0_B.V_b[2];\n\n  /* Outport: '<Root>/a_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  True0_Y.a_b[2] = True0_B.Sum1_o[2];\n\n  /* Outport: '<Root>/a_i' incorporates:\n   *  Product: '<S5>/Product'\n   */\n  True0_Y.a_i[2] = True0_B.Product_e[2];\n\n  /* Outport: '<Root>/DCM_ib' incorporates:\n   *  Concatenate: '<S32>/Vector Concatenate'\n   */\n  std::memcpy(&True0_Y.DCM_ib[0], &True0_B.VectorConcatenate[0], 9U * sizeof\n              (real_T));\n\n  /* Outport: '<Root>/Quat q' incorporates:\n   *  Product: '<S18>/Divide'\n   */\n  True0_Y.Quatq[0] = True0_B.Divide[0];\n  True0_Y.Quatq[1] = True0_B.Divide[1];\n  True0_Y.Quatq[2] = True0_B.Divide[2];\n  True0_Y.Quatq[3] = True0_B.Divide[3];\n\n  /* Outport: '<Root>/Euler' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_Y.Euler[0] = True0_B.VectorConcatenate_h[0];\n\n  /* Outport: '<Root>/omega' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_Y.omega[0] = True0_B.omega[0];\n\n  /* Outport: '<Root>/omega_dot' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  True0_Y.omega_dot[0] = True0_B.Product_lc[0];\n\n  /* Outport: '<Root>/Euler' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_Y.Euler[1] = True0_B.VectorConcatenate_h[1];\n\n  /* Outport: '<Root>/omega' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_Y.omega[1] = True0_B.omega[1];\n\n  /* Outport: '<Root>/omega_dot' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  True0_Y.omega_dot[1] = True0_B.Product_lc[1];\n\n  /* Outport: '<Root>/Euler' incorporates:\n   *  Concatenate: '<S8>/Vector Concatenate'\n   */\n  True0_Y.Euler[2] = True0_B.VectorConcatenate_h[2];\n\n  /* Outport: '<Root>/omega' incorporates:\n   *  Integrator: '<S2>/omega'\n   */\n  True0_Y.omega[2] = True0_B.omega[2];\n\n  /* Outport: '<Root>/omega_dot' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  True0_Y.omega_dot[2] = True0_B.Product_lc[2];\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* Matfile logging */\n    rt_UpdateTXYLogVars((&True0_M)->rtwLogInfo, ((&True0_M)->Timing.t));\n  }                                    /* end MajorTimeStep */\n\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* Update for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n    /* Update for Integrator: '<S7>/Q-Integrator' */\n    True0_DW.QIntegrator_IWORK = 0;\n\n    /* End of Update for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  }                                    /* end MajorTimeStep */\n\n  if (rtmIsMajorTimeStep((&True0_M))) {\n    /* signal main to stop simulation */\n    {                                  /* Sample time: [0.0s, 0.0s] */\n      if ((rtmGetTFinal((&True0_M))!=-1) &&\n          !((rtmGetTFinal((&True0_M))-((((&True0_M)->Timing.clockTick1+(&True0_M)\n               ->Timing.clockTickH1* 4294967296.0)) * 0.001)) > ((((&True0_M)\n              ->Timing.clockTick1+(&True0_M)->Timing.clockTickH1* 4294967296.0))\n            * 0.001) * (DBL_EPSILON))) {\n        rtmSetErrorStatus((&True0_M), \"Simulation finished\");\n      }\n    }\n\n    rt_ertODEUpdateContinuousStates(&(&True0_M)->solverInfo);\n\n    /* Update absolute time */\n    /* The \"clockTick0\" counts the number of times the code of this task has\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\n     * overflow during the application lifespan selected.\n     * Timer of this task consists of two 32 bit unsigned integers.\n     * The two integers represent the low bits Timing.clockTick0 and the high bits\n     * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\n     */\n    if (!(++(&True0_M)->Timing.clockTick0)) {\n      ++(&True0_M)->Timing.clockTickH0;\n    }\n\n    (&True0_M)->Timing.t[0] = rtsiGetSolverStopTime(&(&True0_M)->solverInfo);\n\n    /* Update absolute time */\n    /* The \"clockTick1\" counts the number of times the code of this task has\n     * been executed. The resolution of this integer timer is 0.001, which is the step size\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\n     * application lifespan selected.\n     * Timer of this task consists of two 32 bit unsigned integers.\n     * The two integers represent the low bits Timing.clockTick1 and the high bits\n     * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\n     */\n    (&True0_M)->Timing.clockTick1++;\n    if (!(&True0_M)->Timing.clockTick1) {\n      (&True0_M)->Timing.clockTickH1++;\n    }\n  }                                    /* end MajorTimeStep */\n}\n\n/* Derivatives for root system: '<Root>' */\nvoid True0::True0_derivatives()\n{\n  /* local scratch DWork variables */\n  int32_T ForEach_itr;\n  XDot_True0_T *_rtXdot;\n  _rtXdot = ((XDot_True0_T *) (&True0_M)->derivs);\n\n  /* Derivatives for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Derivatives for Integrator: '<S7>/Q-Integrator' incorporates:\n   *  SignalConversion generated from: '<S7>/Q-Integrator'\n   */\n  _rtXdot->QIntegrator_CSTATE[0] = True0_B.TmpSignalConversionAtQIntegrato[0];\n  _rtXdot->QIntegrator_CSTATE[1] = True0_B.TmpSignalConversionAtQIntegrato[1];\n  _rtXdot->QIntegrator_CSTATE[2] = True0_B.TmpSignalConversionAtQIntegrato[2];\n  _rtXdot->QIntegrator_CSTATE[3] = True0_B.TmpSignalConversionAtQIntegrato[3];\n\n  /* Derivatives for Integrator: '<S2>/V_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  _rtXdot->V_b_CSTATE[0] = True0_B.Sum1_o[0];\n\n  /* Derivatives for Integrator: '<S2>/omega' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  _rtXdot->omega_CSTATE[0] = True0_B.Product_lc[0];\n\n  /* Derivatives for Integrator: '<S2>/V_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  _rtXdot->V_b_CSTATE[1] = True0_B.Sum1_o[1];\n\n  /* Derivatives for Integrator: '<S2>/omega' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  _rtXdot->omega_CSTATE[1] = True0_B.Product_lc[1];\n\n  /* Derivatives for Integrator: '<S2>/V_b' incorporates:\n   *  Sum: '<S2>/Sum1'\n   */\n  _rtXdot->V_b_CSTATE[2] = True0_B.Sum1_o[2];\n\n  /* Derivatives for Integrator: '<S2>/omega' incorporates:\n   *  Product: '<S6>/Product'\n   */\n  _rtXdot->omega_CSTATE[2] = True0_B.Product_lc[2];\n\n  /* Derivatives for Iterator SubSystem: '<S37>/For Each Subsystem' */\n  for (ForEach_itr = 0; ForEach_itr < 4; ForEach_itr++) {\n    /* Derivatives for Integrator: '<S61>/Integrator' */\n    _rtXdot->CoreSubsys[ForEach_itr].Integrator_CSTATE =\n      True0_B.CoreSubsys[ForEach_itr].Switch;\n  }\n\n  /* End of Derivatives for SubSystem: '<S37>/For Each Subsystem' */\n\n  /* Derivatives for Integrator: '<S2>/X_i' incorporates:\n   *  Product: '<S4>/Product'\n   */\n  _rtXdot->X_i_CSTATE[0] = True0_B.Product_b[0];\n  _rtXdot->X_i_CSTATE[1] = True0_B.Product_b[1];\n  _rtXdot->X_i_CSTATE[2] = True0_B.Product_b[2];\n\n  /* End of Derivatives for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n}\n\n/* Model step function for TID2 */\nvoid True0::step2()                    /* Sample time: [0.002s, 0.0s] */\n{\n  /* Update for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  /* Update for RateTransition: '<S1>/Rate Transition1' incorporates:\n   *  Inport: '<Root>/RPM commands'\n   */\n  True0_DW.RateTransition1_Buffer0[0] = True0_U.RPMcommands[0];\n  True0_DW.RateTransition1_Buffer0[1] = True0_U.RPMcommands[1];\n  True0_DW.RateTransition1_Buffer0[2] = True0_U.RPMcommands[2];\n  True0_DW.RateTransition1_Buffer0[3] = True0_U.RPMcommands[3];\n\n  /* End of Update for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n}\n\n/* Model initialize function */\nvoid True0::initialize()\n{\n  /* Registration code */\n\n  /* initialize non-finites */\n  rt_InitInfAndNaN(sizeof(real_T));\n\n  /* Set task counter limit used by the static main program */\n  ((&True0_M))->Timing.TaskCounters.cLimit[0] = 1;\n  ((&True0_M))->Timing.TaskCounters.cLimit[1] = 1;\n  ((&True0_M))->Timing.TaskCounters.cLimit[2] = 2;\n\n  {\n    /* Setup solver object */\n    rtsiSetSimTimeStepPtr(&(&True0_M)->solverInfo, &(&True0_M)\n                          ->Timing.simTimeStep);\n    rtsiSetTPtr(&(&True0_M)->solverInfo, &rtmGetTPtr((&True0_M)));\n    rtsiSetStepSizePtr(&(&True0_M)->solverInfo, &(&True0_M)->Timing.stepSize0);\n    rtsiSetdXPtr(&(&True0_M)->solverInfo, &(&True0_M)->derivs);\n    rtsiSetContStatesPtr(&(&True0_M)->solverInfo, (real_T **) &(&True0_M)\n                         ->contStates);\n    rtsiSetNumContStatesPtr(&(&True0_M)->solverInfo, &(&True0_M)\n      ->Sizes.numContStates);\n    rtsiSetNumPeriodicContStatesPtr(&(&True0_M)->solverInfo, &(&True0_M)\n      ->Sizes.numPeriodicContStates);\n    rtsiSetPeriodicContStateIndicesPtr(&(&True0_M)->solverInfo, &(&True0_M)\n      ->periodicContStateIndices);\n    rtsiSetPeriodicContStateRangesPtr(&(&True0_M)->solverInfo, &(&True0_M)\n      ->periodicContStateRanges);\n    rtsiSetErrorStatusPtr(&(&True0_M)->solverInfo, (&rtmGetErrorStatus((&True0_M))));\n    rtsiSetRTModelPtr(&(&True0_M)->solverInfo, (&True0_M));\n  }\n\n  rtsiSetSimTimeStep(&(&True0_M)->solverInfo, MAJOR_TIME_STEP);\n  (&True0_M)->intgData.y = (&True0_M)->odeY;\n  (&True0_M)->intgData.f[0] = (&True0_M)->odeF[0];\n  (&True0_M)->intgData.f[1] = (&True0_M)->odeF[1];\n  (&True0_M)->intgData.f[2] = (&True0_M)->odeF[2];\n  (&True0_M)->contStates = ((X_True0_T *) &True0_X);\n  rtsiSetSolverData(&(&True0_M)->solverInfo, static_cast<void *>(&(&True0_M)\n    ->intgData));\n  rtsiSetIsMinorTimeStepWithModeChange(&(&True0_M)->solverInfo, false);\n  rtsiSetSolverName(&(&True0_M)->solverInfo,\"ode3\");\n  rtmSetTPtr((&True0_M), &(&True0_M)->Timing.tArray[0]);\n  rtmSetTFinal((&True0_M), 10.0);\n  (&True0_M)->Timing.stepSize0 = 0.001;\n  rtmSetFirstInitCond((&True0_M), 1);\n\n  /* Setup for data logging */\n  {\n    static RTWLogInfo rt_DataLoggingInfo;\n    rt_DataLoggingInfo.loggingInterval = (nullptr);\n    (&True0_M)->rtwLogInfo = &rt_DataLoggingInfo;\n  }\n\n  /* Setup for data logging */\n  {\n    rtliSetLogXSignalInfo((&True0_M)->rtwLogInfo, (nullptr));\n    rtliSetLogXSignalPtrs((&True0_M)->rtwLogInfo, (nullptr));\n    rtliSetLogT((&True0_M)->rtwLogInfo, \"tout\");\n    rtliSetLogX((&True0_M)->rtwLogInfo, \"\");\n    rtliSetLogXFinal((&True0_M)->rtwLogInfo, \"\");\n    rtliSetLogVarNameModifier((&True0_M)->rtwLogInfo, \"rt_\");\n    rtliSetLogFormat((&True0_M)->rtwLogInfo, 1);\n    rtliSetLogMaxRows((&True0_M)->rtwLogInfo, 1000);\n    rtliSetLogDecimation((&True0_M)->rtwLogInfo, 1);\n\n    /*\n     * Set pointers to the data and signal info for each output\n     */\n    {\n      static void * rt_LoggedOutputSignalPtrs[10];\n      rt_LoggedOutputSignalPtrs[0] = &True0_Y.X_i[0];\n      rt_LoggedOutputSignalPtrs[1] = &True0_Y.V_i[0];\n      rt_LoggedOutputSignalPtrs[2] = &True0_Y.V_b[0];\n      rt_LoggedOutputSignalPtrs[3] = &True0_Y.a_b[0];\n      rt_LoggedOutputSignalPtrs[4] = &True0_Y.a_i[0];\n      rt_LoggedOutputSignalPtrs[5] = &True0_Y.DCM_ib[0];\n      rt_LoggedOutputSignalPtrs[6] = &True0_Y.Quatq[0];\n      rt_LoggedOutputSignalPtrs[7] = &True0_Y.Euler[0];\n      rt_LoggedOutputSignalPtrs[8] = &True0_Y.omega[0];\n      rt_LoggedOutputSignalPtrs[9] = &True0_Y.omega_dot[0];\n      rtliSetLogYSignalPtrs((&True0_M)->rtwLogInfo, ((LogSignalPtrsType)\n        rt_LoggedOutputSignalPtrs));\n    }\n\n    {\n      static int_T rt_LoggedOutputWidths[] {\n        3,\n        3,\n        3,\n        3,\n        3,\n        9,\n        4,\n        3,\n        3,\n        3\n      };\n\n      static int_T rt_LoggedOutputNumDimensions[] {\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2,\n        2\n      };\n\n      static int_T rt_LoggedOutputDimensions[] {\n        3, 1,\n        3, 1,\n        3, 1,\n        3, 1,\n        3, 1,\n        3, 3,\n        4, 1,\n        3, 1,\n        3, 1,\n        3, 1\n      };\n\n      static boolean_T rt_LoggedOutputIsVarDims[] {\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      };\n\n      static void* rt_LoggedCurrentSignalDimensions[] {\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr),\n        (nullptr), (nullptr)\n      };\n\n      static int_T rt_LoggedCurrentSignalDimensionsSize[] {\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4,\n        4, 4\n      };\n\n      static BuiltInDTypeId rt_LoggedOutputDataTypeIds[] {\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE,\n        SS_DOUBLE\n      };\n\n      static int_T rt_LoggedOutputComplexSignals[] {\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      };\n\n      static RTWPreprocessingFcnPtr rt_LoggingPreprocessingFcnPtrs[] {\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr),\n        (nullptr)\n      };\n\n      static const char_T *rt_LoggedOutputLabels[]{\n        \"<X_i>\",\n        \"<V_i>\",\n        \"<V_b>\",\n        \"<a_b>\",\n        \"<a_i>\",\n        \"<DCM_ib>\",\n        \"<Quat q>\",\n        \"<Euler>\",\n        \"<omega>\",\n        \"<omega_dot>\" };\n\n      static const char_T *rt_LoggedOutputBlockNames[]{\n        \"True0/X_i\",\n        \"True0/V_i\",\n        \"True0/V_b\",\n        \"True0/a_b\",\n        \"True0/a_i\",\n        \"True0/DCM_ib\",\n        \"True0/Quat q\",\n        \"True0/Euler\",\n        \"True0/omega\",\n        \"True0/omega_dot\" };\n\n      static RTWLogDataTypeConvert rt_RTWLogDataTypeConvert[] {\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 },\n\n        { 0, SS_DOUBLE, SS_DOUBLE, 0, 0, 0, 1.0, 0, 0.0 }\n      };\n\n      static RTWLogSignalInfo rt_LoggedOutputSignalInfo[] {\n        {\n          10,\n          rt_LoggedOutputWidths,\n          rt_LoggedOutputNumDimensions,\n          rt_LoggedOutputDimensions,\n          rt_LoggedOutputIsVarDims,\n          rt_LoggedCurrentSignalDimensions,\n          rt_LoggedCurrentSignalDimensionsSize,\n          rt_LoggedOutputDataTypeIds,\n          rt_LoggedOutputComplexSignals,\n          (nullptr),\n          rt_LoggingPreprocessingFcnPtrs,\n\n          { rt_LoggedOutputLabels },\n          (nullptr),\n          (nullptr),\n          (nullptr),\n\n          { rt_LoggedOutputBlockNames },\n\n          { (nullptr) },\n          (nullptr),\n          rt_RTWLogDataTypeConvert\n        }\n      };\n\n      rtliSetLogYSignalInfo((&True0_M)->rtwLogInfo, rt_LoggedOutputSignalInfo);\n\n      /* set currSigDims field */\n      rt_LoggedCurrentSignalDimensions[0] = &rt_LoggedOutputWidths[0];\n      rt_LoggedCurrentSignalDimensions[1] = &rt_LoggedOutputWidths[0];\n      rt_LoggedCurrentSignalDimensions[2] = &rt_LoggedOutputWidths[1];\n      rt_LoggedCurrentSignalDimensions[3] = &rt_LoggedOutputWidths[1];\n      rt_LoggedCurrentSignalDimensions[4] = &rt_LoggedOutputWidths[2];\n      rt_LoggedCurrentSignalDimensions[5] = &rt_LoggedOutputWidths[2];\n      rt_LoggedCurrentSignalDimensions[6] = &rt_LoggedOutputWidths[3];\n      rt_LoggedCurrentSignalDimensions[7] = &rt_LoggedOutputWidths[3];\n      rt_LoggedCurrentSignalDimensions[8] = &rt_LoggedOutputWidths[4];\n      rt_LoggedCurrentSignalDimensions[9] = &rt_LoggedOutputWidths[4];\n      rt_LoggedCurrentSignalDimensions[10] = &rt_LoggedOutputWidths[5];\n      rt_LoggedCurrentSignalDimensions[11] = &rt_LoggedOutputWidths[5];\n      rt_LoggedCurrentSignalDimensions[12] = &rt_LoggedOutputWidths[6];\n      rt_LoggedCurrentSignalDimensions[13] = &rt_LoggedOutputWidths[6];\n      rt_LoggedCurrentSignalDimensions[14] = &rt_LoggedOutputWidths[7];\n      rt_LoggedCurrentSignalDimensions[15] = &rt_LoggedOutputWidths[7];\n      rt_LoggedCurrentSignalDimensions[16] = &rt_LoggedOutputWidths[8];\n      rt_LoggedCurrentSignalDimensions[17] = &rt_LoggedOutputWidths[8];\n      rt_LoggedCurrentSignalDimensions[18] = &rt_LoggedOutputWidths[9];\n      rt_LoggedCurrentSignalDimensions[19] = &rt_LoggedOutputWidths[9];\n    }\n\n    rtliSetLogY((&True0_M)->rtwLogInfo, \"yout\");\n  }\n\n  /* Matfile logging */\n  rt_StartDataLoggingWithStartTime((&True0_M)->rtwLogInfo, 0.0, rtmGetTFinal\n    ((&True0_M)), (&True0_M)->Timing.stepSize0, (&rtmGetErrorStatus((&True0_M))));\n\n  {\n    /* local scratch DWork variables */\n    int32_T ForEach_itr;\n\n    /* Start for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n    /* Start for RateTransition: '<S1>/Rate Transition1' */\n    True0_B.RateTransition1[0] = True0_P.rpm_init;\n    True0_B.RateTransition1[1] = True0_P.rpm_init;\n    True0_B.RateTransition1[2] = True0_P.rpm_init;\n    True0_B.RateTransition1[3] = True0_P.rpm_init;\n\n    /* Start for Iterator SubSystem: '<S37>/For Each Subsystem' */\n    for (ForEach_itr = 0; ForEach_itr < 4; ForEach_itr++) {\n      /* Start for If: '<S84>/If' */\n      True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem = -1;\n\n      /* Start for If: '<S82>/If' */\n      True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_l = -1;\n\n      /* Start for If: '<S70>/If' */\n      True0_DW.CoreSubsys[ForEach_itr].If_ActiveSubsystem_e = -1;\n    }\n\n    /* End of Start for SubSystem: '<S37>/For Each Subsystem' */\n\n    /* Start for If: '<S38>/If' */\n    True0_DW.If_ActiveSubsystem = -1;\n\n    /* End of Start for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n  }\n\n  {\n    /* local scratch DWork variables */\n    int32_T ForEach_itr;\n\n    /* SystemInitialize for Atomic SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n    /* InitializeConditions for Integrator: '<S7>/Q-Integrator' */\n    if (rtmIsFirstInitCond((&True0_M))) {\n      True0_X.QIntegrator_CSTATE[0] = 0.0;\n      True0_X.QIntegrator_CSTATE[1] = 0.0;\n      True0_X.QIntegrator_CSTATE[2] = 0.0;\n      True0_X.QIntegrator_CSTATE[3] = 0.0;\n    }\n\n    True0_DW.QIntegrator_IWORK = 1;\n\n    /* End of InitializeConditions for Integrator: '<S7>/Q-Integrator' */\n\n    /* InitializeConditions for Integrator: '<S2>/V_b' */\n    True0_X.V_b_CSTATE[0] = True0_P.Vb_init[0];\n    True0_X.V_b_CSTATE[1] = True0_P.Vb_init[1];\n    True0_X.V_b_CSTATE[2] = True0_P.Vb_init[2];\n\n    /* InitializeConditions for RateTransition: '<S1>/Rate Transition1' */\n    True0_DW.RateTransition1_Buffer0[0] = True0_P.rpm_init;\n    True0_DW.RateTransition1_Buffer0[1] = True0_P.rpm_init;\n    True0_DW.RateTransition1_Buffer0[2] = True0_P.rpm_init;\n    True0_DW.RateTransition1_Buffer0[3] = True0_P.rpm_init;\n\n    /* InitializeConditions for Integrator: '<S2>/omega' */\n    True0_X.omega_CSTATE[0] = True0_P.omega_init[0];\n\n    /* InitializeConditions for Integrator: '<S2>/X_i' */\n    True0_X.X_i_CSTATE[0] = True0_P.Xi_init[0];\n\n    /* SystemInitialize for IfAction SubSystem: '<S38>/Zero airspeed' */\n    /* SystemInitialize for Merge: '<S38>/Merge' incorporates:\n     *  Outport: '<S41>/Drag force'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[0] = True0_P.Dragforce_Y0[0];\n\n    /* End of SystemInitialize for SubSystem: '<S38>/Zero airspeed' */\n\n    /* InitializeConditions for Integrator: '<S2>/omega' */\n    True0_X.omega_CSTATE[1] = True0_P.omega_init[1];\n\n    /* InitializeConditions for Integrator: '<S2>/X_i' */\n    True0_X.X_i_CSTATE[1] = True0_P.Xi_init[1];\n\n    /* SystemInitialize for IfAction SubSystem: '<S38>/Zero airspeed' */\n    /* SystemInitialize for Merge: '<S38>/Merge' incorporates:\n     *  Outport: '<S41>/Drag force'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[1] = True0_P.Dragforce_Y0[1];\n\n    /* End of SystemInitialize for SubSystem: '<S38>/Zero airspeed' */\n\n    /* InitializeConditions for Integrator: '<S2>/omega' */\n    True0_X.omega_CSTATE[2] = True0_P.omega_init[2];\n\n    /* InitializeConditions for Integrator: '<S2>/X_i' */\n    True0_X.X_i_CSTATE[2] = True0_P.Xi_init[2];\n\n    /* SystemInitialize for IfAction SubSystem: '<S38>/Zero airspeed' */\n    /* SystemInitialize for Merge: '<S38>/Merge' incorporates:\n     *  Outport: '<S41>/Drag force'\n     */\n    True0_B.Forceagainstdirectionofmotiondu[2] = True0_P.Dragforce_Y0[2];\n\n    /* End of SystemInitialize for SubSystem: '<S38>/Zero airspeed' */\n\n    /* SystemInitialize for Iterator SubSystem: '<S37>/For Each Subsystem' */\n    for (ForEach_itr = 0; ForEach_itr < 4; ForEach_itr++) {\n      /* InitializeConditions for Integrator: '<S61>/Integrator' */\n      True0_X.CoreSubsys[ForEach_itr].Integrator_CSTATE = True0_P.rpm_init;\n\n      /* SystemInitialize for IfAction SubSystem: '<S70>/Zero airspeed in rotor plane' */\n      /* SystemInitialize for Merge: '<S70>/Merge' incorporates:\n       *  Outport: '<S77>/Thrust direction (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[0] =\n        True0_P.CoreSubsys.ThrustdirectionBody_Y0[0];\n\n      /* SystemInitialize for Merge: '<S70>/Merge1' incorporates:\n       *  Outport: '<S77>/Hub moment (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[0] =\n        True0_P.CoreSubsys.HubmomentBody_Y0[0];\n\n      /* SystemInitialize for Merge: '<S70>/Merge' incorporates:\n       *  Outport: '<S77>/Thrust direction (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[1] =\n        True0_P.CoreSubsys.ThrustdirectionBody_Y0[1];\n\n      /* SystemInitialize for Merge: '<S70>/Merge1' incorporates:\n       *  Outport: '<S77>/Hub moment (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[1] =\n        True0_P.CoreSubsys.HubmomentBody_Y0[1];\n\n      /* SystemInitialize for Merge: '<S70>/Merge' incorporates:\n       *  Outport: '<S77>/Thrust direction (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].NewtiltedthrustdirectionBodyaxe[2] =\n        True0_P.CoreSubsys.ThrustdirectionBody_Y0[2];\n\n      /* SystemInitialize for Merge: '<S70>/Merge1' incorporates:\n       *  Outport: '<S77>/Hub moment (Body)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Momentinthemotorhubduetobending[2] =\n        True0_P.CoreSubsys.HubmomentBody_Y0[2];\n\n      /* End of SystemInitialize for SubSystem: '<S70>/Zero airspeed in rotor plane' */\n\n      /* SystemInitialize for IfAction SubSystem: '<S82>/Zero airspeed' */\n      /* SystemInitialize for Merge: '<S82>/Merge' incorporates:\n       *  Outport: '<S86>/AoA (rad)'\n       */\n      True0_B.CoreSubsys[ForEach_itr].Angleofattackrad =\n        True0_P.CoreSubsys.AoArad_Y0;\n\n      /* End of SystemInitialize for SubSystem: '<S82>/Zero airspeed' */\n    }\n\n    /* End of SystemInitialize for SubSystem: '<S37>/For Each Subsystem' */\n    /* End of SystemInitialize for SubSystem: '<Root>/True dynamic system representation of a multirotor UAV' */\n\n    /* set \"at time zero\" to false */\n    if (rtmIsFirstInitCond((&True0_M))) {\n      rtmSetFirstInitCond((&True0_M), 0);\n    }\n  }\n}\n\n/* Model terminate function */\nvoid True0::terminate()\n{\n  /* (no terminate code required) */\n}\n\n/* Constructor */\nTrue0::True0() :\n  True0_U(),\n  True0_Y(),\n  True0_B(),\n  True0_DW(),\n  True0_X(),\n  True0_M()\n{\n  /* Currently there is no constructor body generated.*/\n}\n\n/* Destructor */\n/* Currently there is no destructor body generated.*/\nTrue0::~True0() = default;\n\n/* Real-Time Model get method */\nRT_MODEL_True0_T * True0::getRTM()\n{\n  return (&True0_M);\n}\n"},{"name":"True0.h","type":"header","group":"model","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * True0.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_True0_h_\n#define RTW_HEADER_True0_h_\n#include \"rtwtypes.h\"\n#include \"rtw_continuous.h\"\n#include \"rtw_solver.h\"\n#include \"rt_logging.h\"\n#include \"True0_types.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\nextern \"C\"\n{\n\n#include \"rtGetInf.h\"\n\n}\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\n#include <cfloat>\n#include <cstring>\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetContStateDisabled\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\n#endif\n\n#ifndef rtmSetContStateDisabled\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\n#endif\n\n#ifndef rtmGetContStates\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\n#endif\n\n#ifndef rtmSetContStates\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\n#endif\n\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\n#endif\n\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\n#endif\n\n#ifndef rtmGetDerivCacheNeedsReset\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\n#endif\n\n#ifndef rtmSetDerivCacheNeedsReset\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGetFinalTime\n#define rtmGetFinalTime(rtm)           ((rtm)->Timing.tFinal)\n#endif\n\n#ifndef rtmGetIntgData\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\n#endif\n\n#ifndef rtmSetIntgData\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\n#endif\n\n#ifndef rtmGetOdeF\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\n#endif\n\n#ifndef rtmSetOdeF\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\n#endif\n\n#ifndef rtmGetOdeY\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\n#endif\n\n#ifndef rtmSetOdeY\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\n#endif\n\n#ifndef rtmGetPeriodicContStateIndices\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\n#endif\n\n#ifndef rtmSetPeriodicContStateIndices\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\n#endif\n\n#ifndef rtmGetPeriodicContStateRanges\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\n#endif\n\n#ifndef rtmSetPeriodicContStateRanges\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\n#endif\n\n#ifndef rtmGetRTWLogInfo\n#define rtmGetRTWLogInfo(rtm)          ((rtm)->rtwLogInfo)\n#endif\n\n#ifndef rtmGetZCCacheNeedsReset\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\n#endif\n\n#ifndef rtmSetZCCacheNeedsReset\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGetdX\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\n#endif\n\n#ifndef rtmSetdX\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\n#endif\n\n#ifndef rtmCounterLimit\n#define rtmCounterLimit(rtm, idx)      ((rtm)->Timing.TaskCounters.cLimit[(idx)])\n#endif\n\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n#ifndef rtmStepTask\n#define rtmStepTask(rtm, idx)          ((rtm)->Timing.TaskCounters.TID[(idx)] == 0)\n#endif\n\n#ifndef rtmGetStopRequested\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\n#endif\n\n#ifndef rtmSetStopRequested\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\n#endif\n\n#ifndef rtmGetStopRequestedPtr\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\n#endif\n\n#ifndef rtmGetT\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\n#endif\n\n#ifndef rtmGetTFinal\n#define rtmGetTFinal(rtm)              ((rtm)->Timing.tFinal)\n#endif\n\n#ifndef rtmGetTPtr\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\n#endif\n\n#ifndef rtmTaskCounter\n#define rtmTaskCounter(rtm, idx)       ((rtm)->Timing.TaskCounters.TID[(idx)])\n#endif\n\n/* Block signals for system '<S37>/For Each Subsystem' */\nstruct B_CoreSubsys_True0_T {\n  real_T Integrator;                   /* '<S61>/Integrator' */\n  real_T Switch2;                      /* '<S64>/Switch2' */\n  real_T Product;                      /* '<S57>/Product' */\n  real_T Sum1;                         /* '<S57>/Sum1' */\n  real_T Divide;                       /* '<S57>/Divide' */\n  real_T Switch;                       /* '<S61>/Switch' */\n  real_T Conversiondegtorad;           /* '<S59>/Conversion deg to rad' */\n  real_T Motorarmxcomponent;           /* '<S59>/Trigonometric Function1' */\n  real_T Motorarmycomponent;           /* '<S59>/Trigonometric Function' */\n  real_T Abs;                          /* '<S59>/Abs' */\n  real_T Motorlocationxyvector[2];     /* '<S59>/Product4' */\n  real_T Vectorfromgeometriccentertoprop[3];/* '<S59>/Reshape' */\n  real_T VectorfromrealCoGtopropellerBod[3];/* '<S59>/Subtract' */\n  real_T u2v3;                         /* '<S65>/Product' */\n  real_T u3v1;                         /* '<S65>/Product1' */\n  real_T u1v2;                         /* '<S65>/Product2' */\n  real_T u3v2;                         /* '<S66>/Product' */\n  real_T u1v3;                         /* '<S66>/Product1' */\n  real_T u2v1;                         /* '<S66>/Product2' */\n  real_T Sum[3];                       /* '<S58>/Sum' */\n  real_T Product4;                     /* '<S74>/Product4' */\n  real_T Product5;                     /* '<S74>/Product5' */\n  real_T Product6;                     /* '<S74>/Product6' */\n  real_T Hoverthrustmagnitude;         /* '<S74>/Sum1' */\n  real_T Conversiondegtorad_n[3];      /* '<S68>/Conversion deg to rad' */\n  real_T TrigonometricFunction1;       /* '<S99>/Trigonometric Function1' */\n  real_T TrigonometricFunction3;       /* '<S99>/Trigonometric Function3' */\n  real_T TrigonometricFunction12;      /* '<S102>/Trigonometric Function12' */\n  real_T TrigonometricFunction1_h;     /* '<S102>/Trigonometric Function1' */\n  real_T TrigonometricFunction3_m;     /* '<S102>/Trigonometric Function3' */\n  real_T Product_d;                    /* '<S102>/Product' */\n  real_T TrigonometricFunction5;       /* '<S102>/Trigonometric Function5' */\n  real_T TrigonometricFunction;        /* '<S102>/Trigonometric Function' */\n  real_T Product1;                     /* '<S102>/Product1' */\n  real_T TrigonometricFunction12_c;    /* '<S105>/Trigonometric Function12' */\n  real_T TrigonometricFunction2;       /* '<S105>/Trigonometric Function2' */\n  real_T TrigonometricFunction4;       /* '<S105>/Trigonometric Function4' */\n  real_T Product1_a;                   /* '<S105>/Product1' */\n  real_T TrigonometricFunction5_f;     /* '<S105>/Trigonometric Function5' */\n  real_T TrigonometricFunction_o;      /* '<S105>/Trigonometric Function' */\n  real_T Product2;                     /* '<S105>/Product2' */\n  real_T TrigonometricFunction1_c;     /* '<S100>/Trigonometric Function1' */\n  real_T TrigonometricFunction3_e;     /* '<S100>/Trigonometric Function3' */\n  real_T TrigonometricFunction12_n;    /* '<S103>/Trigonometric Function12' */\n  real_T TrigonometricFunction2_a;     /* '<S103>/Trigonometric Function2' */\n  real_T TrigonometricFunction4_h;     /* '<S103>/Trigonometric Function4' */\n  real_T Product1_f;                   /* '<S103>/Product1' */\n  real_T TrigonometricFunction5_a;     /* '<S103>/Trigonometric Function5' */\n  real_T TrigonometricFunction_f;      /* '<S103>/Trigonometric Function' */\n  real_T Product2_c;                   /* '<S103>/Product2' */\n  real_T TrigonometricFunction12_o;    /* '<S106>/Trigonometric Function12' */\n  real_T TrigonometricFunction1_l;     /* '<S106>/Trigonometric Function1' */\n  real_T TrigonometricFunction3_n;     /* '<S106>/Trigonometric Function3' */\n  real_T Product_e;                    /* '<S106>/Product' */\n  real_T TrigonometricFunction5_k;     /* '<S106>/Trigonometric Function5' */\n  real_T TrigonometricFunction_f0;     /* '<S106>/Trigonometric Function' */\n  real_T Product1_j;                   /* '<S106>/Product1' */\n  real_T TrigonometricFunction1_m;     /* '<S101>/Trigonometric Function1' */\n  real_T TrigonometricFunction3_mh;    /* '<S104>/Trigonometric Function3' */\n  real_T TrigonometricFunction1_a;     /* '<S104>/Trigonometric Function1' */\n  real_T TrigonometricFunction3_j;     /* '<S107>/Trigonometric Function3' */\n  real_T TrigonometricFunction1_m3;    /* '<S107>/Trigonometric Function1' */\n  real_T VectorConcatenate[9];         /* '<S108>/Vector Concatenate' */\n  real_T TotallinearvelocityatpropBodyax[3];/* '<S55>/Sum1' */\n  real_T TrueairspeedatpropMotoraxes[3];/* '<S68>/Product' */\n  real_T Climbspeedv_c;                /* '<S83>/Gain' */\n  real_T v_cv_h;                       /* '<S84>/Divide' */\n  real_T Merge;                        /* '<S84>/Merge' */\n  real_T transpose[3];                 /* '<S90>/transpose' */\n  real_T Product_g;                    /* '<S90>/Product' */\n  real_T Sqrt;                         /* '<S87>/Sqrt' */\n  real_T ComplextoRealImag;            /* '<S87>/Complex to Real-Imag' */\n  real_T Angleofattackrad;             /* '<S82>/Merge' */\n  real_T ThrustratioTT_h;              /* '<S71>/Switch' */\n  real_T Dynamicthrustmagnitude;       /* '<S67>/Product7' */\n  real_T transpose_e[2];               /* '<S81>/transpose' */\n  real_T Product_eh;                   /* '<S81>/Product' */\n  real_T Sqrt_n;                       /* '<S78>/Sqrt' */\n  real_T ComplextoRealImag_p;          /* '<S78>/Complex to Real-Imag' */\n  real_T NewtiltedthrustdirectionBodyaxe[3];/* '<S70>/Merge' */\n  real_T Product9[3];                  /* '<S67>/Product9' */\n  real_T Product_i;                    /* '<S73>/Product' */\n  real_T Product1_ar;                  /* '<S73>/Product1' */\n  real_T Motortorquemagnitude;         /* '<S73>/Sum' */\n  real_T MathFunction[9];              /* '<S75>/Math Function' */\n  real_T Product9_p[3];                /* '<S75>/Product9' */\n  real_T Momentinducedbyaerodynamicdragp[3];/* '<S67>/Product3' */\n  real_T Product8[3];                  /* '<S67>/Product8' */\n  real_T Momentinthemotorhubduetobending[3];/* '<S70>/Merge1' */\n  real_T Gain;                         /* '<S95>/Gain' */\n  real_T Product7;                     /* '<S95>/Product7' */\n  real_T Gain1;                        /* '<S95>/Gain1' */\n  real_T Product_h;                    /* '<S96>/Product' */\n  real_T Product1_m;                   /* '<S96>/Product1' */\n  real_T Product2_e;                   /* '<S96>/Product2' */\n  real_T Product_i4;                   /* '<S97>/Product' */\n  real_T Product1_ar5;                 /* '<S97>/Product1' */\n  real_T Product2_h;                   /* '<S97>/Product2' */\n  real_T Sum_j[3];                     /* '<S94>/Sum' */\n  real_T Conversionrpmtorads;          /* '<S72>/Conversion rpm to rad//s' */\n  real_T Product5_k[3];                /* '<S72>/Product5' */\n  real_T Product_ez;                   /* '<S109>/Product' */\n  real_T Product1_jt;                  /* '<S109>/Product1' */\n  real_T Product2_p;                   /* '<S109>/Product2' */\n  real_T Product_m;                    /* '<S110>/Product' */\n  real_T Product1_k;                   /* '<S110>/Product1' */\n  real_T Product2_n;                   /* '<S110>/Product2' */\n  real_T Sum_h[3];                     /* '<S69>/Sum' */\n  real_T Add[3];                       /* '<S60>/Add' */\n  real_T Switch_k;                     /* '<S64>/Switch' */\n  real_T transpose_h[2];               /* '<S80>/transpose' */\n  real_T Product_dg;                   /* '<S80>/Product' */\n  real_T Sqrt_f;                       /* '<S79>/Sqrt' */\n  real_T ComplextoRealImag_m;          /* '<S79>/Complex to Real-Imag' */\n  real_T Switch_e;                     /* '<S76>/Switch' */\n  real_T Bladeflappinganglea_1sdeg;    /* '<S76>/Product4' */\n  real_T Flappinganglerad;             /* '<S76>/Conversion deg to rad' */\n  real_T Airspeeddirectionintherotorplan[2];/* '<S76>/Divide' */\n  real_T Gain_m[2];                    /* '<S76>/Gain' */\n  real_T TrigonometricFunction1_o;     /* '<S76>/Trigonometric Function1' */\n  real_T Gain1_o;                      /* '<S76>/Gain1' */\n  real_T Gain2;                        /* '<S76>/Gain2' */\n  real_T TrigonometricFunction_p;      /* '<S76>/Trigonometric Function' */\n  real_T Product_d5[2];                /* '<S76>/Product' */\n  real_T MotorhubmomentMotoraxes[3];   /* '<S76>/Product1' */\n  real_T Reshape1[3];                  /* '<S76>/Reshape1' */\n  real_T Product2_j[3];                /* '<S76>/Product2' */\n  real_T Product3[3];                  /* '<S76>/Product3' */\n  real_T TrigonometricFunction_j;      /* '<S71>/Trigonometric Function' */\n  real_T Product2_nr;                  /* '<S71>/Product2' */\n  real_T Sum2;                         /* '<S71>/Sum2' */\n  real_T Divide_p;                     /* '<S71>/Divide' */\n  real_T transpose_i[2];               /* '<S89>/transpose' */\n  real_T Product_l;                    /* '<S89>/Product' */\n  real_T Sqrt_a;                       /* '<S88>/Sqrt' */\n  real_T ComplextoRealImag_n;          /* '<S88>/Complex to Real-Imag' */\n  real_T Divide1;                      /* '<S85>/Divide1' */\n  real_T Gain_l;                       /* '<S93>/Gain' */\n  real_T Product_j;                    /* '<S93>/Product' */\n  real_T Product1_c;                   /* '<S93>/Product1' */\n  real_T Sum1_c;                       /* '<S93>/Sum1' */\n  real_T Sqrt_d;                       /* '<S93>/Sqrt' */\n  real_T Divide_n;                     /* '<S92>/Divide' */\n  real_T Gain_e;                       /* '<S92>/Gain' */\n  real_T Product_ge;                   /* '<S92>/Product' */\n  real_T Gain1_e;                      /* '<S92>/Gain1' */\n  real_T Product1_o;                   /* '<S92>/Product1' */\n  real_T Gain2_c;                      /* '<S92>/Gain2' */\n  real_T Product2_es;                  /* '<S92>/Product2' */\n  real_T Gain3;                        /* '<S92>/Gain3' */\n  real_T Add_c;                        /* '<S92>/Add' */\n  real_T Gain_a;                       /* '<S91>/Gain' */\n  real_T Product_o;                    /* '<S91>/Product' */\n  real_T Product1_h;                   /* '<S91>/Product1' */\n  real_T Sum1_i;                       /* '<S91>/Sum1' */\n  real_T Sqrt_e;                       /* '<S91>/Sqrt' */\n  uint8_T Compare;                     /* '<S62>/Compare' */\n  uint8_T Compare_j;                   /* '<S63>/Compare' */\n  boolean_T LowerRelop1;               /* '<S64>/LowerRelop1' */\n  boolean_T RelationalOperator;        /* '<S61>/Relational Operator' */\n  boolean_T LogicalOperator;           /* '<S61>/Logical Operator' */\n  boolean_T RelationalOperator1;       /* '<S61>/Relational Operator1' */\n  boolean_T LogicalOperator1;          /* '<S61>/Logical Operator1' */\n  boolean_T LogicalOperator2;          /* '<S61>/Logical Operator2' */\n  boolean_T UpperRelop;                /* '<S64>/UpperRelop' */\n};\n\n/* Block states (default storage) for system '<S37>/For Each Subsystem' */\nstruct DW_CoreSubsys_True0_T {\n  int8_T If_ActiveSubsystem;           /* '<S84>/If' */\n  int8_T If_ActiveSubsystem_l;         /* '<S82>/If' */\n  int8_T If_ActiveSubsystem_e;         /* '<S70>/If' */\n};\n\n/* Continuous states for system '<S37>/For Each Subsystem' */\nstruct X_CoreSubsys_True0_T {\n  real_T Integrator_CSTATE;            /* '<S61>/Integrator' */\n};\n\n/* State derivatives for system '<S37>/For Each Subsystem' */\nstruct XDot_CoreSubsys_True0_T {\n  real_T Integrator_CSTATE;            /* '<S61>/Integrator' */\n};\n\n/* State Disabled for system '<S37>/For Each Subsystem' */\nstruct XDis_CoreSubsys_True0_T {\n  boolean_T Integrator_CSTATE;         /* '<S61>/Integrator' */\n};\n\n/* Block signals (default storage) */\nstruct B_True0_T {\n  real_T QIntegrator[4];               /* '<S7>/Q-Integrator' */\n  real_T transpose[4];                 /* '<S22>/transpose' */\n  real_T Product;                      /* '<S22>/Product' */\n  real_T Sqrt;                         /* '<S21>/Sqrt' */\n  real_T ComplextoRealImag;            /* '<S21>/Complex to Real-Imag' */\n  real_T Divide[4];                    /* '<S18>/Divide' */\n  real_T Product_o;                    /* '<S23>/Product' */\n  real_T Product2;                     /* '<S23>/Product2' */\n  real_T Product3;                     /* '<S23>/Product3' */\n  real_T Product4;                     /* '<S23>/Product4' */\n  real_T Product_p;                    /* '<S28>/Product' */\n  real_T Product2_n;                   /* '<S28>/Product2' */\n  real_T Add;                          /* '<S28>/Add' */\n  real_T Product_l;                    /* '<S30>/Product' */\n  real_T Product2_nt;                  /* '<S30>/Product2' */\n  real_T Add_c;                        /* '<S30>/Add' */\n  real_T Product_c;                    /* '<S26>/Product' */\n  real_T Product2_i;                   /* '<S26>/Product2' */\n  real_T Add_cz;                       /* '<S26>/Add' */\n  real_T Product_lj;                   /* '<S24>/Product' */\n  real_T Product2_ib;                  /* '<S24>/Product2' */\n  real_T Product3_i;                   /* '<S24>/Product3' */\n  real_T Product4_p;                   /* '<S24>/Product4' */\n  real_T Product_pk;                   /* '<S31>/Product' */\n  real_T Product2_i4;                  /* '<S31>/Product2' */\n  real_T Add_h;                        /* '<S31>/Add' */\n  real_T Product_lb;                   /* '<S27>/Product' */\n  real_T Product2_o;                   /* '<S27>/Product2' */\n  real_T Add_i;                        /* '<S27>/Add' */\n  real_T Product_f;                    /* '<S29>/Product' */\n  real_T Product2_b;                   /* '<S29>/Product2' */\n  real_T Add_k;                        /* '<S29>/Add' */\n  real_T Product_cs;                   /* '<S25>/Product' */\n  real_T Product2_k;                   /* '<S25>/Product2' */\n  real_T Product3_k;                   /* '<S25>/Product3' */\n  real_T Product4_b;                   /* '<S25>/Product4' */\n  real_T VectorConcatenate[9];         /* '<S32>/Vector Concatenate' */\n  real_T DCM_bi[9];                    /* '<S4>/Math Function2' */\n  real_T V_b[3];                       /* '<S2>/V_b' */\n  real_T Product_b[3];                 /* '<S4>/Product' */\n  real_T DCM_bi_c[9];                  /* '<S5>/Math Function2' */\n  real_T RateTransition1[4];           /* '<S1>/Rate Transition1' */\n  real_T omega[3];                     /* '<S2>/omega' */\n  real_T Product_oc[3];                /* '<S111>/Product' */\n  real_T TrueairspeedBodyaxes[3];      /* '<S56>/Sum1' */\n  real_T SumofElements[3];             /* '<S37>/Sum of Elements' */\n  real_T ForceofgravityInertialaxes[3];/* '<S36>/Product1' */\n  real_T ForceofgravityBodyaxes[3];    /* '<S36>/Product' */\n  real_T Sum[3];                       /* '<S3>/Sum' */\n  real_T Product_n[3];                 /* '<S54>/Product' */\n  real_T TrueairspeedBodyaxes_m[3];    /* '<S39>/Sum1' */\n  real_T transpose_i[3];               /* '<S53>/transpose' */\n  real_T Product_f1;                   /* '<S53>/Product' */\n  real_T Sqrt_o;                       /* '<S42>/Sqrt' */\n  real_T ComplextoRealImag_b;          /* '<S42>/Complex to Real-Imag' */\n  real_T Forceagainstdirectionofmotiondu[3];/* '<S38>/Merge' */\n  real_T Sum3[3];                      /* '<S3>/Sum3' */\n  real_T Sum1[3];                      /* '<S3>/Sum1' */\n  real_T Product1[3];                  /* '<S2>/Product1' */\n  real_T u2v3;                         /* '<S33>/Product' */\n  real_T u3v1;                         /* '<S33>/Product1' */\n  real_T u1v2;                         /* '<S33>/Product2' */\n  real_T u3v2;                         /* '<S34>/Product' */\n  real_T u1v3;                         /* '<S34>/Product1' */\n  real_T u2v1;                         /* '<S34>/Product2' */\n  real_T Sum_c[3];                     /* '<S10>/Sum' */\n  real_T Sum1_o[3];                    /* '<S2>/Sum1' */\n  real_T Product_e[3];                 /* '<S5>/Product' */\n  real_T Product_na[3];                /* '<S12>/Product' */\n  real_T u2v3_m;                       /* '<S13>/Product' */\n  real_T u3v1_m;                       /* '<S13>/Product1' */\n  real_T u1v2_h;                       /* '<S13>/Product2' */\n  real_T u3v2_b;                       /* '<S14>/Product' */\n  real_T u1v3_k;                       /* '<S14>/Product1' */\n  real_T u2v1_m;                       /* '<S14>/Product2' */\n  real_T Sum_k[3];                     /* '<S11>/Sum' */\n  real_T SumofElements1[3];            /* '<S37>/Sum of Elements1' */\n  real_T Sum2[3];                      /* '<S3>/Sum2' */\n  real_T Sum1_n[3];                    /* '<S6>/Sum1' */\n  real_T Product_lc[3];                /* '<S6>/Product' */\n  real_T transpose_g[3];               /* '<S16>/transpose' */\n  real_T Product_py;                   /* '<S16>/Product' */\n  real_T u2;                           /* '<S7>/-1//2' */\n  real_T Product_i[3];                 /* '<S7>/Product' */\n  real_T u2v3_j;                       /* '<S19>/Product' */\n  real_T u3v1_h;                       /* '<S19>/Product1' */\n  real_T u1v2_i;                       /* '<S19>/Product2' */\n  real_T u3v2_d;                       /* '<S20>/Product' */\n  real_T u1v3_p;                       /* '<S20>/Product1' */\n  real_T u2v1_b;                       /* '<S20>/Product2' */\n  real_T Sum_o[3];                     /* '<S15>/Sum' */\n  real_T Subtract[3];                  /* '<S7>/Subtract' */\n  real_T u2_d[3];                      /* '<S7>/1//2' */\n  real_T TmpSignalConversionAtQIntegrato[4];\n  real_T Fcn;                          /* '<S8>/Fcn' */\n  real_T Fcn1;                         /* '<S8>/Fcn1' */\n  real_T Fcn2;                         /* '<S8>/Fcn2' */\n  real_T Fcn3;                         /* '<S8>/Fcn3' */\n  real_T Fcn4;                         /* '<S8>/Fcn4' */\n  real_T TrigonometricFunction;        /* '<S8>/Trigonometric Function' */\n  real_T VectorConcatenate_h[3];       /* '<S8>/Vector Concatenate' */\n  real_T X_i[3];                       /* '<S2>/X_i' */\n  real_T ImpAsg_InsertedFor_Motor_moment[12];\n              /* '<S55>/Thrust//moment vector for each propeller (Body axes)' */\n  real_T ImpAsg_InsertedFor_Motor_force_[12];\n              /* '<S55>/Thrust//moment vector for each propeller (Body axes)' */\n  real_T transpose_j[3];               /* '<S52>/transpose' */\n  real_T Product_m;                    /* '<S52>/Product' */\n  real_T Divide_i;                     /* '<S48>/Divide' */\n  real_T Product_fu;                   /* '<S48>/Product' */\n  real_T Divide1;                      /* '<S48>/Divide1' */\n  real_T Product1_f;                   /* '<S48>/Product1' */\n  real_T Divide2;                      /* '<S48>/Divide2' */\n  real_T Product2_j;                   /* '<S48>/Product2' */\n  real_T Add_f;                        /* '<S48>/Add' */\n  real_T ReciprocalSqrt;               /* '<S48>/Reciprocal Sqrt' */\n  real_T Product_fb[3];                /* '<S49>/Product' */\n  real_T transpose_e[3];               /* '<S51>/transpose' */\n  real_T Product_nx;                   /* '<S51>/Product' */\n  real_T Sqrt_a;                       /* '<S50>/Sqrt' */\n  real_T ComplextoRealImag_i;          /* '<S50>/Complex to Real-Imag' */\n  real_T Product_d;                    /* '<S40>/Product' */\n  real_T Magnitudeofdragforce;         /* '<S40>/Abs' */\n  real_T transpose_h[3];               /* '<S47>/transpose' */\n  real_T Product_dc;                   /* '<S47>/Product' */\n  real_T Sqrt_oc;                      /* '<S46>/Sqrt' */\n  real_T ComplextoRealImag_m;          /* '<S46>/Complex to Real-Imag' */\n  real_T Divide_n[3];                  /* '<S43>/Divide' */\n  real_T Product1_m[3];                /* '<S40>/Product1' */\n  real_T quat_output[4];               /* '<S7>/MATLAB Function' */\n  B_CoreSubsys_True0_T CoreSubsys[4];  /* '<S37>/For Each Subsystem' */\n};\n\n/* Block states (default storage) for system '<Root>' */\nstruct DW_True0_T {\n  real_T RateTransition1_Buffer0[4];   /* '<S1>/Rate Transition1' */\n  real_T Product_DWORK1[9];            /* '<S6>/Product' */\n  real_T Product_DWORK3[3];            /* '<S6>/Product' */\n  int32_T Product_DWORK2[3];           /* '<S6>/Product' */\n  int_T QIntegrator_IWORK;             /* '<S7>/Q-Integrator' */\n  int8_T If_ActiveSubsystem;           /* '<S38>/If' */\n  DW_CoreSubsys_True0_T CoreSubsys[4]; /* '<S37>/For Each Subsystem' */\n};\n\n/* Continuous states (default storage) */\nstruct X_True0_T {\n  real_T QIntegrator_CSTATE[4];        /* '<S7>/Q-Integrator' */\n  real_T V_b_CSTATE[3];                /* '<S2>/V_b' */\n  real_T omega_CSTATE[3];              /* '<S2>/omega' */\n  real_T X_i_CSTATE[3];                /* '<S2>/X_i' */\n  X_CoreSubsys_True0_T CoreSubsys[4];  /* '<S55>/CoreSubsys' */\n};\n\n/* State derivatives (default storage) */\nstruct XDot_True0_T {\n  real_T QIntegrator_CSTATE[4];        /* '<S7>/Q-Integrator' */\n  real_T V_b_CSTATE[3];                /* '<S2>/V_b' */\n  real_T omega_CSTATE[3];              /* '<S2>/omega' */\n  real_T X_i_CSTATE[3];                /* '<S2>/X_i' */\n  XDot_CoreSubsys_True0_T CoreSubsys[4];/* '<S55>/CoreSubsys' */\n};\n\n/* State disabled  */\nstruct XDis_True0_T {\n  boolean_T QIntegrator_CSTATE[4];     /* '<S7>/Q-Integrator' */\n  boolean_T V_b_CSTATE[3];             /* '<S2>/V_b' */\n  boolean_T omega_CSTATE[3];           /* '<S2>/omega' */\n  boolean_T X_i_CSTATE[3];             /* '<S2>/X_i' */\n  XDis_CoreSubsys_True0_T CoreSubsys[4];/* '<S55>/CoreSubsys' */\n};\n\n#ifndef ODE3_INTG\n#define ODE3_INTG\n\n/* ODE3 Integration Data */\nstruct ODE3_IntgData {\n  real_T *y;                           /* output */\n  real_T *f[3];                        /* derivatives */\n};\n\n#endif\n\n/* External inputs (root inport signals with default storage) */\nstruct ExtU_True0_T {\n  real_T MotorMatrix_real[68];         /* '<Root>/MotorMatrix_real' */\n  real_T CoG_real[3];                  /* '<Root>/CoG_real' */\n  real_T mass_real;                    /* '<Root>/mass_real' */\n  real_T J_real[9];                    /* '<Root>/J_real' */\n  real_T MotorMatrix_nominal[68];      /* '<Root>/MotorMatrix_nominal' */\n  real_T CoG_nominal[3];               /* '<Root>/CoG_nominal' */\n  real_T mass_nominal;                 /* '<Root>/mass_nominal' */\n  real_T J_nominal[9];                 /* '<Root>/J_nominal' */\n  real_T Wind_i[3];                    /* '<Root>/Wind_i' */\n  real_T Force_disturb[3];             /* '<Root>/Force_disturb' */\n  real_T Moment_disturb[3];            /* '<Root>/Moment_disturb' */\n  real_T Surface_params[3];            /* '<Root>/Surface_params' */\n  real_T RPMcommands[4];               /* '<Root>/RPM commands' */\n};\n\n/* External outputs (root outports fed by signals with default storage) */\nstruct ExtY_True0_T {\n  real_T X_i[3];                       /* '<Root>/X_i' */\n  real_T V_i[3];                       /* '<Root>/V_i' */\n  real_T V_b[3];                       /* '<Root>/V_b' */\n  real_T a_b[3];                       /* '<Root>/a_b' */\n  real_T a_i[3];                       /* '<Root>/a_i' */\n  real_T DCM_ib[9];                    /* '<Root>/DCM_ib' */\n  real_T Quatq[4];                     /* '<Root>/Quat q' */\n  real_T Euler[3];                     /* '<Root>/Euler' */\n  real_T omega[3];                     /* '<Root>/omega' */\n  real_T omega_dot[3];                 /* '<Root>/omega_dot' */\n};\n\n/* Parameters for system: '<S37>/For Each Subsystem' */\nstruct P_CoreSubsys_True0_T_ {\n  real_T Gain_Gain;                    /* Expression: 0.5\n                                        * Referenced by: '<S91>/Gain'\n                                        */\n  real_T Gain_Gain_b;                  /* Expression: 0.5\n                                        * Referenced by: '<S93>/Gain'\n                                        */\n  real_T AoArad_Y0;                    /* Expression: [0]\n                                        * Referenced by: '<S86>/AoA (rad)'\n                                        */\n  real_T Constant_Value;               /* Expression: 0\n                                        * Referenced by: '<S86>/Constant'\n                                        */\n  real_T ThrustdirectionBody_Y0[3];    /* Expression: [0;0;-1]\n                                        * Referenced by: '<S77>/Thrust direction (Body)'\n                                        */\n  real_T HubmomentBody_Y0[3];          /* Expression: [0;0;0]\n                                        * Referenced by: '<S77>/Hub moment (Body)'\n                                        */\n  real_T Constant_Value_l[3];          /* Expression: [0;0;-1]\n                                        * Referenced by: '<S77>/Constant'\n                                        */\n  real_T Constant1_Value[3];           /* Expression: [0;0;0]\n                                        * Referenced by: '<S77>/Constant1'\n                                        */\n  real_T Bladeflappingdisengaged_Value;/* Expression: 0\n                                        * Referenced by: '<S76>/Blade flapping disengaged'\n                                        */\n  real_T Constant_Value_i;             /* Expression: 0\n                                        * Referenced by: '<S76>/Constant'\n                                        */\n  real_T Switch_Threshold;             /* Expression: 0.5\n                                        * Referenced by: '<S76>/Switch'\n                                        */\n  real_T Gain_Gain_h;                  /* Expression: -1\n                                        * Referenced by: '<S76>/Gain'\n                                        */\n  real_T Gain1_Gain;                   /* Expression: -1\n                                        * Referenced by: '<S76>/Gain1'\n                                        */\n  real_T Gain2_Gain;                   /* Expression: -1\n                                        * Referenced by: '<S76>/Gain2'\n                                        */\n  real_T Constant_Value_e;             /* Expression: 0\n                                        * Referenced by: '<S62>/Constant'\n                                        */\n  real_T Constant_Value_c;             /* Expression: 0\n                                        * Referenced by: '<S63>/Constant'\n                                        */\n  real_T Constant_Value_g;             /* Expression: 0\n                                        * Referenced by: '<S61>/Constant'\n                                        */\n  real_T Gain_Gain_hr;                 /* Expression: -1\n                                        * Referenced by: '<S101>/Gain'\n                                        */\n  real_T Gain_Gain_k;                  /* Expression: -1\n                                        * Referenced by: '<S83>/Gain'\n                                        */\n  real_T Constant_Value_im;            /* Expression: 1\n                                        * Referenced by: '<S71>/Constant'\n                                        */\n  real_T Switch_Threshold_n;           /* Expression: 0.5\n                                        * Referenced by: '<S71>/Switch'\n                                        */\n  real_T Constant_Value_b[3];          /* Expression: [0;0;-1]\n                                        * Referenced by: '<S75>/Constant'\n                                        */\n  real_T Gain_Gain_n;                  /* Expression: 0.5\n                                        * Referenced by: '<S95>/Gain'\n                                        */\n  real_T Gain1_Gain_c;                 /* Expression: 7/12\n                                        * Referenced by: '<S95>/Gain1'\n                                        */\n};\n\n/* Parameters (default storage) */\nstruct P_True0_T_ {\n  real_T Att_init[3];                  /* Variable: Att_init\n                                        * Referenced by: '<S2>/Constant'\n                                        */\n  real_T Blade_flapping;               /* Variable: Blade_flapping\n                                        * Referenced by: '<S76>/Constant2'\n                                        */\n  real_T C_D;                          /* Variable: C_D\n                                        * Referenced by: '<S40>/Constant2'\n                                        */\n  real_T Dyn_thrust;                   /* Variable: Dyn_thrust\n                                        * Referenced by: '<S71>/Constant1'\n                                        */\n  real_T Vb_init[3];                   /* Variable: Vb_init\n                                        * Referenced by: '<S2>/V_b'\n                                        */\n  real_T Xi_init[3];                   /* Variable: Xi_init\n                                        * Referenced by: '<S2>/X_i'\n                                        */\n  real_T d2r;                          /* Variable: d2r\n                                        * Referenced by:\n                                        *   '<S59>/Conversion deg to rad'\n                                        *   '<S68>/Conversion deg to rad'\n                                        *   '<S76>/Conversion deg to rad'\n                                        */\n  real_T k1;                           /* Variable: k1\n                                        * Referenced by: '<S92>/Gain'\n                                        */\n  real_T k2;                           /* Variable: k2\n                                        * Referenced by: '<S92>/Gain1'\n                                        */\n  real_T k3;                           /* Variable: k3\n                                        * Referenced by: '<S92>/Gain2'\n                                        */\n  real_T k4;                           /* Variable: k4\n                                        * Referenced by: '<S92>/Gain3'\n                                        */\n  real_T k_a1s;                        /* Variable: k_a1s\n                                        * Referenced by: '<S76>/Blade flapping gain [deg//(m//s)]'\n                                        */\n  real_T k_beta;                       /* Variable: k_beta\n                                        * Referenced by: '<S76>/Constant1'\n                                        */\n  real_T kappa;                        /* Variable: kappa\n                                        * Referenced by: '<S92>/Constant'\n                                        */\n  real_T omega_init[3];                /* Variable: omega_init\n                                        * Referenced by: '<S2>/omega'\n                                        */\n  real_T rho;                          /* Variable: rho\n                                        * Referenced by: '<S40>/Constant1'\n                                        */\n  real_T rpm2radpersec;                /* Variable: rpm2radpersec\n                                        * Referenced by: '<S72>/Conversion rpm to rad//s'\n                                        */\n  real_T rpm_init;                     /* Variable: rpm_init\n                                        * Referenced by:\n                                        *   '<S1>/Rate Transition1'\n                                        *   '<S61>/Integrator'\n                                        */\n  real_T v_h;                          /* Variable: v_h\n                                        * Referenced by:\n                                        *   '<S71>/Induced velocity at hover'\n                                        *   '<S91>/Induced velocity at hover'\n                                        *   '<S92>/Induced velocity at hover'\n                                        *   '<S93>/Induced velocity at hover'\n                                        */\n  real_T Dragforce_Y0[3];              /* Expression: [0;0;-1]\n                                        * Referenced by: '<S41>/Drag force'\n                                        */\n  real_T Constant_Value[3];            /* Expression: [0;0;0]\n                                        * Referenced by: '<S41>/Constant'\n                                        */\n  real_T Constant_Value_e;             /* Expression: 1/2\n                                        * Referenced by: '<S40>/Constant'\n                                        */\n  real_T Dragforceopposesdirectionofairs;/* Expression: -1\n                                          * Referenced by: '<S40>/Drag force opposes direction of airspeed'\n                                          */\n  real_T Gain_Gain;                    /* Expression: 2\n                                        * Referenced by: '<S28>/Gain'\n                                        */\n  real_T Gain_Gain_e;                  /* Expression: 2\n                                        * Referenced by: '<S30>/Gain'\n                                        */\n  real_T Gain_Gain_ex;                 /* Expression: 2\n                                        * Referenced by: '<S26>/Gain'\n                                        */\n  real_T Gain_Gain_f;                  /* Expression: 2\n                                        * Referenced by: '<S31>/Gain'\n                                        */\n  real_T Gain_Gain_c;                  /* Expression: 2\n                                        * Referenced by: '<S27>/Gain'\n                                        */\n  real_T Gain_Gain_k;                  /* Expression: 2\n                                        * Referenced by: '<S29>/Gain'\n                                        */\n  real_T GravityInertialaxes_Value[3]; /* Expression: [0;0;g]\n                                        * Referenced by: '<S36>/Gravity (Inertial axes)'\n                                        */\n  real_T u2_Gain;                      /* Expression: -0.5\n                                        * Referenced by: '<S7>/-1//2'\n                                        */\n  real_T u2_Gain_c;                    /* Expression: 0.5\n                                        * Referenced by: '<S7>/1//2'\n                                        */\n  real_T Gain_Gain_d;                  /* Expression: -1\n                                        * Referenced by: '<S8>/Gain'\n                                        */\n  P_CoreSubsys_True0_T CoreSubsys;     /* '<S37>/For Each Subsystem' */\n};\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_True0_T {\n  const char_T *errorStatus;\n  RTWLogInfo *rtwLogInfo;\n  RTWSolverInfo solverInfo;\n  X_True0_T *contStates;\n  int_T *periodicContStateIndices;\n  real_T *periodicContStateRanges;\n  real_T *derivs;\n  XDis_True0_T *contStateDisabled;\n  boolean_T zCCacheNeedsReset;\n  boolean_T derivCacheNeedsReset;\n  boolean_T CTOutputIncnstWithState;\n  real_T odeY[17];\n  real_T odeF[3][17];\n  ODE3_IntgData intgData;\n\n  /*\n   * Sizes:\n   * The following substructure contains sizes information\n   * for many of the model attributes such as inputs, outputs,\n   * dwork, sample times, etc.\n   */\n  struct {\n    int_T numContStates;\n    int_T numPeriodicContStates;\n    int_T numSampTimes;\n  } Sizes;\n\n  /*\n   * Timing:\n   * The following substructure contains information regarding\n   * the timing information for the model.\n   */\n  struct {\n    uint32_T clockTick0;\n    uint32_T clockTickH0;\n    time_T stepSize0;\n    uint32_T clockTick1;\n    uint32_T clockTickH1;\n    boolean_T firstInitCondFlag;\n    struct {\n      uint8_T TID[3];\n      uint8_T cLimit[3];\n    } TaskCounters;\n\n    struct {\n      uint8_T TID1_2;\n    } RateInteraction;\n\n    time_T tFinal;\n    SimTimeStep simTimeStep;\n    boolean_T stopRequestedFlag;\n    time_T *t;\n    time_T tArray[3];\n  } Timing;\n};\n\n/* Class declaration for model True0 */\nclass True0 final\n{\n  /* public data and function members */\n public:\n  /* Copy Constructor */\n  True0(True0 const&) = delete;\n\n  /* Assignment Operator */\n  True0& operator= (True0 const&) & = delete;\n\n  /* Move Constructor */\n  True0(True0 &&) = delete;\n\n  /* Move Assignment Operator */\n  True0& operator= (True0 &&) = delete;\n\n  /* Real-Time Model get method */\n  RT_MODEL_True0_T * getRTM();\n\n  /* External inputs */\n  ExtU_True0_T True0_U;\n\n  /* External outputs */\n  ExtY_True0_T True0_Y;\n\n  /* model start function */\n  void start();\n\n  /* Initial conditions function */\n  void initialize();\n\n  /* model step function */\n  void step0();\n\n  /* model step function */\n  void step2();\n\n  /* model terminate function */\n  static void terminate();\n\n  /* Constructor */\n  True0();\n\n  /* Destructor */\n  ~True0();\n\n  /* private data and function members */\n private:\n  /* Block signals */\n  B_True0_T True0_B;\n\n  /* Block states */\n  DW_True0_T True0_DW;\n\n  /* Tunable parameters */\n  static P_True0_T True0_P;\n\n  /* Block continuous states */\n  X_True0_T True0_X;\n\n  /* Continuous states update member function*/\n  void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si );\n\n  /* Derivatives member function */\n  void True0_derivatives();\n\n  /* Real-Time Model */\n  RT_MODEL_True0_T True0_M;\n};\n\n/*-\n * These blocks were eliminated from the model due to optimizations:\n *\n * Block '<S64>/Data Type Duplicate' : Unused code path elimination\n * Block '<S64>/Data Type Propagation' : Unused code path elimination\n * Block '<S37>/Reshape' : Unused code path elimination\n * Block '<S4>/Reshape' : Reshape block reduction\n * Block '<S4>/Reshape1' : Reshape block reduction\n * Block '<S5>/Reshape' : Reshape block reduction\n * Block '<S5>/Reshape1' : Reshape block reduction\n * Block '<S6>/Reshape' : Reshape block reduction\n * Block '<S6>/Reshape ' : Reshape block reduction\n * Block '<S12>/Reshape' : Reshape block reduction\n * Block '<S12>/Reshape1' : Reshape block reduction\n * Block '<S16>/Reshape' : Reshape block reduction\n * Block '<S16>/Reshape1' : Reshape block reduction\n * Block '<S22>/Reshape' : Reshape block reduction\n * Block '<S22>/Reshape1' : Reshape block reduction\n * Block '<S8>/Reshape' : Reshape block reduction\n * Block '<S32>/Reshape (9) to [3x3] column-major' : Reshape block reduction\n * Block '<S47>/Reshape' : Reshape block reduction\n * Block '<S47>/Reshape1' : Reshape block reduction\n * Block '<S51>/Reshape' : Reshape block reduction\n * Block '<S51>/Reshape1' : Reshape block reduction\n * Block '<S52>/Reshape' : Reshape block reduction\n * Block '<S52>/Reshape1' : Reshape block reduction\n * Block '<S53>/Reshape' : Reshape block reduction\n * Block '<S53>/Reshape1' : Reshape block reduction\n * Block '<S54>/Reshape' : Reshape block reduction\n * Block '<S54>/Reshape1' : Reshape block reduction\n * Block '<S39>/Reshape' : Reshape block reduction\n * Block '<S36>/Reshape' : Reshape block reduction\n * Block '<S58>/Reshape' : Reshape block reduction\n * Block '<S59>/Reshape1' : Reshape block reduction\n * Block '<S55>/Rate Transition' : Eliminated since input and output rates are identical\n * Block '<S76>/Reshape3' : Reshape block reduction\n * Block '<S80>/Reshape' : Reshape block reduction\n * Block '<S80>/Reshape1' : Reshape block reduction\n * Block '<S81>/Reshape' : Reshape block reduction\n * Block '<S81>/Reshape1' : Reshape block reduction\n * Block '<S89>/Reshape' : Reshape block reduction\n * Block '<S89>/Reshape1' : Reshape block reduction\n * Block '<S90>/Reshape' : Reshape block reduction\n * Block '<S90>/Reshape1' : Reshape block reduction\n * Block '<S72>/Reshape1' : Reshape block reduction\n * Block '<S72>/Reshape2' : Reshape block reduction\n * Block '<S75>/Reshape5' : Reshape block reduction\n * Block '<S108>/Reshape (9) to [3x3] column-major' : Reshape block reduction\n * Block '<S60>/Reshape' : Reshape block reduction\n * Block '<S111>/Reshape' : Reshape block reduction\n * Block '<S111>/Reshape1' : Reshape block reduction\n * Block '<S56>/Reshape' : Reshape block reduction\n */\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Note that this particular code originates from a subsystem build,\n * and has its own system numbers different from the parent model.\n * Refer to the system hierarchy for this subsystem below, and use the\n * MATLAB hilite_system command to trace the generated code back\n * to the parent model.  For example,\n *\n * hilite_system('Sim_Multi/True dynamic system representation of a multirotor UAV')    - opens subsystem Sim_Multi/True dynamic system representation of a multirotor UAV\n * hilite_system('Sim_Multi/True dynamic system representation of a multirotor UAV/Kp') - opens and selects block Kp\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'Sim_Multi'\n * '<S1>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV'\n * '<S2>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model'\n * '<S3>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation'\n * '<S4>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Body to Inertial'\n * '<S5>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Body to Inertial1'\n * '<S6>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Calculate omega_dot'\n * '<S7>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq.'\n * '<S8>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Euler'\n * '<S9>'   : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix'\n * '<S10>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/omega x V_b'\n * '<S11>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Calculate omega_dot/Cross Product omega x (J * omega)'\n * '<S12>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Calculate omega_dot/Subsystem'\n * '<S13>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Calculate omega_dot/Cross Product omega x (J * omega)/Subsystem'\n * '<S14>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Calculate omega_dot/Cross Product omega x (J * omega)/Subsystem1'\n * '<S15>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Cross Product'\n * '<S16>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Dot product'\n * '<S17>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./MATLAB Function'\n * '<S18>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Normalize'\n * '<S19>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Cross Product/Subsystem'\n * '<S20>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Cross Product/Subsystem1'\n * '<S21>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Normalize/norm'\n * '<S22>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat Strapdown Eq./Normalize/norm/dot_product'\n * '<S23>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem'\n * '<S24>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem1'\n * '<S25>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem2'\n * '<S26>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem3'\n * '<S27>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem4'\n * '<S28>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem5'\n * '<S29>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem6'\n * '<S30>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem7'\n * '<S31>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem8'\n * '<S32>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/Quat to Rotation Matrix/Subsystem9'\n * '<S33>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/omega x V_b/Subsystem'\n * '<S34>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/6DOF model/omega x V_b/Subsystem1'\n * '<S35>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes'\n * '<S36>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute force of gravity in Body axes'\n * '<S37>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers'\n * '<S38>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force'\n * '<S39>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Total airspeed (Body axes)'\n * '<S40>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed'\n * '<S41>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Zero airspeed'\n * '<S42>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/norm'\n * '<S43>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Normalize'\n * '<S44>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Surface area computation'\n * '<S45>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/u^2'\n * '<S46>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Normalize/norm'\n * '<S47>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Normalize/norm/dot_product'\n * '<S48>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Surface area computation/Scaling factor computation'\n * '<S49>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Surface area computation/Surface area computation'\n * '<S50>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Surface area computation/Surface area computation/norm'\n * '<S51>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/Surface area computation/Surface area computation/norm/dot_product'\n * '<S52>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/Nonzero airspeed/u^2/dot_product'\n * '<S53>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Aerodynamic drag force/norm/dot_product'\n * '<S54>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Compute aerodynamic drag of the airframe in Body axes/Total airspeed (Body axes)/Inertial to Body'\n * '<S55>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem'\n * '<S56>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/Total airspeed (Body axes)'\n * '<S57>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Actuator dynamics'\n * '<S58>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Cross Product'\n * '<S59>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Leverarm vector from real CoG to each propeller (Body axes)'\n * '<S60>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)'\n * '<S61>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Actuator dynamics/Continuous Integrator with dynamic upper//lower limits'\n * '<S62>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Actuator dynamics/Continuous Integrator with dynamic upper//lower limits/Compare To Zero'\n * '<S63>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Actuator dynamics/Continuous Integrator with dynamic upper//lower limits/Compare To Zero1'\n * '<S64>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Actuator dynamics/Continuous Integrator with dynamic upper//lower limits/Saturation Dynamic'\n * '<S65>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Cross Product/Subsystem'\n * '<S66>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Cross Product/Subsystem1'\n * '<S67>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments'\n * '<S68>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes'\n * '<S69>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Cross Product'\n * '<S70>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations'\n * '<S71>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio'\n * '<S72>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Gyroscopic torque'\n * '<S73>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Hover moment magnitude'\n * '<S74>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Hover thrust magnitude'\n * '<S75>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Thrust direction in Body axes (without blade flapping)'\n * '<S76>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/Nonzero airspeed in rotor plane'\n * '<S77>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/Zero airspeed in rotor plane'\n * '<S78>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/norm'\n * '<S79>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/Nonzero airspeed in rotor plane/norm'\n * '<S80>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/Nonzero airspeed in rotor plane/norm/dot_product'\n * '<S81>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Blade flapping computations/norm/dot_product'\n * '<S82>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude'\n * '<S83>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Compute the climb speed'\n * '<S84>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Flight modes of the propeller'\n * '<S85>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/Nonzero airspeed'\n * '<S86>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/Zero airspeed'\n * '<S87>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/norm2'\n * '<S88>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/Nonzero airspeed/norm1'\n * '<S89>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/Nonzero airspeed/norm1/dot_product'\n * '<S90>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Angle of attack and airspeed magnitude/norm2/dot_product'\n * '<S91>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Flight modes of the propeller/Normal working state vc//vh >= 0'\n * '<S92>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Flight modes of the propeller/Vortex ring state -2 <= vc//vh < 0 '\n * '<S93>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Dynamic thrust ratio/Flight modes of the propeller/Windmill braking state vc//vh < -2'\n * '<S94>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Gyroscopic torque/Cross Product'\n * '<S95>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Gyroscopic torque/Propeller moment of inertia'\n * '<S96>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Gyroscopic torque/Cross Product/Subsystem'\n * '<S97>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Compute dynamic motor thrust and moments/Gyroscopic torque/Cross Product/Subsystem1'\n * '<S98>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor'\n * '<S99>'  : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem'\n * '<S100>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem1'\n * '<S101>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem2'\n * '<S102>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem3'\n * '<S103>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem4'\n * '<S104>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem5'\n * '<S105>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem6'\n * '<S106>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem7'\n * '<S107>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem8'\n * '<S108>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Coordinate transformation Body to Motor axes/Rotation Matrix Body to Motor/Subsystem9'\n * '<S109>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Cross Product/Subsystem'\n * '<S110>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/For Each Subsystem/Thrust//moment vector for each propeller (Body axes)/Cross Product/Subsystem1'\n * '<S111>' : 'Sim_Multi/True dynamic system representation of a multirotor UAV/Force//Moment computation/Forces and moments generated by spinning propellers/Total airspeed (Body axes)/Inertial to Body'\n */\n#endif                                 /* RTW_HEADER_True0_h_ */\n"},{"name":"True0_private.h","type":"header","group":"model","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * True0_private.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_True0_private_h_\n#define RTW_HEADER_True0_private_h_\n#include \"rtwtypes.h\"\n#include \"builtin_typeid_types.h\"\n#include \"multiword_types.h\"\n#include \"True0_types.h\"\n\n/* Private macros used by the generated code to access rtModel */\n#ifndef rtmSetFirstInitCond\n#define rtmSetFirstInitCond(rtm, val)  ((rtm)->Timing.firstInitCondFlag = (val))\n#endif\n\n#ifndef rtmIsFirstInitCond\n#define rtmIsFirstInitCond(rtm)        ((rtm)->Timing.firstInitCondFlag)\n#endif\n\n#ifndef rtmIsMajorTimeStep\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\n#endif\n\n#ifndef rtmIsMinorTimeStep\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\n#endif\n\n#ifndef rtmSetTFinal\n#define rtmSetTFinal(rtm, val)         ((rtm)->Timing.tFinal = (val))\n#endif\n\n#ifndef rtmSetTPtr\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\n#endif\n\nextern void rt_mldivide_U1d3x3_U2d_JBYZyA3A(const real_T u0[9], const real_T u1\n  [3], real_T y[3]);\nextern real_T rt_atan2d_snf(real_T u0, real_T u1);\n\n/* private model entry point functions */\nextern void True0_derivatives();\n\n#endif                                 /* RTW_HEADER_True0_private_h_ */\n"},{"name":"True0_types.h","type":"header","group":"model","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * True0_types.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_True0_types_h_\n#define RTW_HEADER_True0_types_h_\n\n/* Parameters for system: '<S37>/For Each Subsystem' */\ntypedef struct P_CoreSubsys_True0_T_ P_CoreSubsys_True0_T;\n\n/* Parameters (default storage) */\ntypedef struct P_True0_T_ P_True0_T;\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_True0_T RT_MODEL_True0_T;\n\n#endif                                 /* RTW_HEADER_True0_types_h_ */\n"},{"name":"True0_data.cpp","type":"source","group":"data","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\n * True0_data.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#include \"True0.h\"\n\n/* Block parameters (default storage) */\nP_True0_T True0::True0_P{\n  /* Variable: Att_init\n   * Referenced by: '<S2>/Constant'\n   */\n  { 0.0, 0.0, 0.0 },\n\n  /* Variable: Blade_flapping\n   * Referenced by: '<S76>/Constant2'\n   */\n  0.0,\n\n  /* Variable: C_D\n   * Referenced by: '<S40>/Constant2'\n   */\n  0.4,\n\n  /* Variable: Dyn_thrust\n   * Referenced by: '<S71>/Constant1'\n   */\n  0.0,\n\n  /* Variable: Vb_init\n   * Referenced by: '<S2>/V_b'\n   */\n  { 0.0, 0.0, 0.0 },\n\n  /* Variable: Xi_init\n   * Referenced by: '<S2>/X_i'\n   */\n  { 0.0, 0.0, 0.0 },\n\n  /* Variable: d2r\n   * Referenced by:\n   *   '<S59>/Conversion deg to rad'\n   *   '<S68>/Conversion deg to rad'\n   *   '<S76>/Conversion deg to rad'\n   */\n  0.017453292519943295,\n\n  /* Variable: k1\n   * Referenced by: '<S92>/Gain'\n   */\n  -1.125,\n\n  /* Variable: k2\n   * Referenced by: '<S92>/Gain1'\n   */\n  -1.372,\n\n  /* Variable: k3\n   * Referenced by: '<S92>/Gain2'\n   */\n  -1.718,\n\n  /* Variable: k4\n   * Referenced by: '<S92>/Gain3'\n   */\n  -0.655,\n\n  /* Variable: k_a1s\n   * Referenced by: '<S76>/Blade flapping gain [deg//(m//s)]'\n   */\n  0.375,\n\n  /* Variable: k_beta\n   * Referenced by: '<S76>/Constant1'\n   */\n  0.23,\n\n  /* Variable: kappa\n   * Referenced by: '<S92>/Constant'\n   */\n  1.0,\n\n  /* Variable: omega_init\n   * Referenced by: '<S2>/omega'\n   */\n  { 0.0, 0.0, 0.0 },\n\n  /* Variable: rho\n   * Referenced by: '<S40>/Constant1'\n   */\n  1.225,\n\n  /* Variable: rpm2radpersec\n   * Referenced by: '<S72>/Conversion rpm to rad//s'\n   */\n  0.10471975511965977,\n\n  /* Variable: rpm_init\n   * Referenced by:\n   *   '<S1>/Rate Transition1'\n   *   '<S61>/Integrator'\n   */\n  3104.5025852,\n\n  /* Variable: v_h\n   * Referenced by:\n   *   '<S71>/Induced velocity at hover'\n   *   '<S91>/Induced velocity at hover'\n   *   '<S92>/Induced velocity at hover'\n   *   '<S93>/Induced velocity at hover'\n   */\n  4.0,\n\n  /* Expression: [0;0;-1]\n   * Referenced by: '<S41>/Drag force'\n   */\n  { 0.0, 0.0, -1.0 },\n\n  /* Expression: [0;0;0]\n   * Referenced by: '<S41>/Constant'\n   */\n  { 0.0, 0.0, 0.0 },\n\n  /* Expression: 1/2\n   * Referenced by: '<S40>/Constant'\n   */\n  0.5,\n\n  /* Expression: -1\n   * Referenced by: '<S40>/Drag force opposes direction of airspeed'\n   */\n  -1.0,\n\n  /* Expression: 2\n   * Referenced by: '<S28>/Gain'\n   */\n  2.0,\n\n  /* Expression: 2\n   * Referenced by: '<S30>/Gain'\n   */\n  2.0,\n\n  /* Expression: 2\n   * Referenced by: '<S26>/Gain'\n   */\n  2.0,\n\n  /* Expression: 2\n   * Referenced by: '<S31>/Gain'\n   */\n  2.0,\n\n  /* Expression: 2\n   * Referenced by: '<S27>/Gain'\n   */\n  2.0,\n\n  /* Expression: 2\n   * Referenced by: '<S29>/Gain'\n   */\n  2.0,\n\n  /* Expression: [0;0;g]\n   * Referenced by: '<S36>/Gravity (Inertial axes)'\n   */\n  { 0.0, 0.0, 9.80665 },\n\n  /* Expression: -0.5\n   * Referenced by: '<S7>/-1//2'\n   */\n  -0.5,\n\n  /* Expression: 0.5\n   * Referenced by: '<S7>/1//2'\n   */\n  0.5,\n\n  /* Expression: -1\n   * Referenced by: '<S8>/Gain'\n   */\n  -1.0,\n\n  /* Start of '<S55>/CoreSubsys' */\n  {\n    /* Expression: 0.5\n     * Referenced by: '<S91>/Gain'\n     */\n    0.5,\n\n    /* Expression: 0.5\n     * Referenced by: '<S93>/Gain'\n     */\n    0.5,\n\n    /* Expression: [0]\n     * Referenced by: '<S86>/AoA (rad)'\n     */\n    0.0,\n\n    /* Expression: 0\n     * Referenced by: '<S86>/Constant'\n     */\n    0.0,\n\n    /* Expression: [0;0;-1]\n     * Referenced by: '<S77>/Thrust direction (Body)'\n     */\n    { 0.0, 0.0, -1.0 },\n\n    /* Expression: [0;0;0]\n     * Referenced by: '<S77>/Hub moment (Body)'\n     */\n    { 0.0, 0.0, 0.0 },\n\n    /* Expression: [0;0;-1]\n     * Referenced by: '<S77>/Constant'\n     */\n    { 0.0, 0.0, -1.0 },\n\n    /* Expression: [0;0;0]\n     * Referenced by: '<S77>/Constant1'\n     */\n    { 0.0, 0.0, 0.0 },\n\n    /* Expression: 0\n     * Referenced by: '<S76>/Blade flapping disengaged'\n     */\n    0.0,\n\n    /* Expression: 0\n     * Referenced by: '<S76>/Constant'\n     */\n    0.0,\n\n    /* Expression: 0.5\n     * Referenced by: '<S76>/Switch'\n     */\n    0.5,\n\n    /* Expression: -1\n     * Referenced by: '<S76>/Gain'\n     */\n    -1.0,\n\n    /* Expression: -1\n     * Referenced by: '<S76>/Gain1'\n     */\n    -1.0,\n\n    /* Expression: -1\n     * Referenced by: '<S76>/Gain2'\n     */\n    -1.0,\n\n    /* Expression: 0\n     * Referenced by: '<S62>/Constant'\n     */\n    0.0,\n\n    /* Expression: 0\n     * Referenced by: '<S63>/Constant'\n     */\n    0.0,\n\n    /* Expression: 0\n     * Referenced by: '<S61>/Constant'\n     */\n    0.0,\n\n    /* Expression: -1\n     * Referenced by: '<S101>/Gain'\n     */\n    -1.0,\n\n    /* Expression: -1\n     * Referenced by: '<S83>/Gain'\n     */\n    -1.0,\n\n    /* Expression: 1\n     * Referenced by: '<S71>/Constant'\n     */\n    1.0,\n\n    /* Expression: 0.5\n     * Referenced by: '<S71>/Switch'\n     */\n    0.5,\n\n    /* Expression: [0;0;-1]\n     * Referenced by: '<S75>/Constant'\n     */\n    { 0.0, 0.0, -1.0 },\n\n    /* Expression: 0.5\n     * Referenced by: '<S95>/Gain'\n     */\n    0.5,\n\n    /* Expression: 7/12\n     * Referenced by: '<S95>/Gain1'\n     */\n    0.58333333333333337\n  }\n  /* End of '<S55>/CoreSubsys' */\n};\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * builtin_typeid_types.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef BUILTIN_TYPEID_TYPES_H\n#define BUILTIN_TYPEID_TYPES_H\n#ifndef BUILTIN_TYPEID_TYPES\n#define BUILTIN_TYPEID_TYPES\n\n/* Enumeration of built-in data types */\ntypedef enum {\n  SS_DOUBLE = 0,\n  SS_SINGLE = 1,\n  SS_INT8 = 2,\n  SS_UINT8 = 3,\n  SS_INT16 = 4,\n  SS_UINT16 = 5,\n  SS_INT32 = 6,\n  SS_UINT32 = 7,\n  SS_BOOLEAN = 8\n} BuiltInDTypeId;\n\n#define SS_NUM_BUILT_IN_DTYPE          ((int)SS_BOOLEAN+1)\n\n/* Enumeration for MAT-file logging code */\ntypedef int DTypeId;\n\n/* Enumeration of pre-defined data types */\ntypedef enum {\n  SS_FCN_CALL = 9,\n  SS_INTEGER = 10,\n  SS_POINTER = 11,\n  SS_INTERNAL_DTYPE2 = 12,\n  SS_TIMER_UINT32_PAIR = 13,\n  SS_CONNECTION_TYPE = 14\n} PreDefinedDTypeId;\n\n#endif                                 /* BUILTIN_TYPEID_TYPES */\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * multiword_types.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef MULTIWORD_TYPES_H\n#define MULTIWORD_TYPES_H\n#include \"rtwtypes.h\"\n\n/*\n * Definitions supporting external data access\n */\ntypedef int32_T chunk_T;\ntypedef uint32_T uchunk_T;\n\n/*\n * MultiWord supporting definitions\n */\ntypedef long int long_T;\n\n/*\n * MultiWord types\n */\ntypedef struct {\n  uint32_T chunks[2];\n} int64m_T;\n\ntypedef struct {\n  int64m_T re;\n  int64m_T im;\n} cint64m_T;\n\ntypedef struct {\n  uint32_T chunks[2];\n} uint64m_T;\n\ntypedef struct {\n  uint64m_T re;\n  uint64m_T im;\n} cuint64m_T;\n\ntypedef struct {\n  uint32_T chunks[3];\n} int96m_T;\n\ntypedef struct {\n  int96m_T re;\n  int96m_T im;\n} cint96m_T;\n\ntypedef struct {\n  uint32_T chunks[3];\n} uint96m_T;\n\ntypedef struct {\n  uint96m_T re;\n  uint96m_T im;\n} cuint96m_T;\n\ntypedef struct {\n  uint32_T chunks[4];\n} int128m_T;\n\ntypedef struct {\n  int128m_T re;\n  int128m_T im;\n} cint128m_T;\n\ntypedef struct {\n  uint32_T chunks[4];\n} uint128m_T;\n\ntypedef struct {\n  uint128m_T re;\n  uint128m_T im;\n} cuint128m_T;\n\ntypedef struct {\n  uint32_T chunks[5];\n} int160m_T;\n\ntypedef struct {\n  int160m_T re;\n  int160m_T im;\n} cint160m_T;\n\ntypedef struct {\n  uint32_T chunks[5];\n} uint160m_T;\n\ntypedef struct {\n  uint160m_T re;\n  uint160m_T im;\n} cuint160m_T;\n\ntypedef struct {\n  uint32_T chunks[6];\n} int192m_T;\n\ntypedef struct {\n  int192m_T re;\n  int192m_T im;\n} cint192m_T;\n\ntypedef struct {\n  uint32_T chunks[6];\n} uint192m_T;\n\ntypedef struct {\n  uint192m_T re;\n  uint192m_T im;\n} cuint192m_T;\n\ntypedef struct {\n  uint32_T chunks[7];\n} int224m_T;\n\ntypedef struct {\n  int224m_T re;\n  int224m_T im;\n} cint224m_T;\n\ntypedef struct {\n  uint32_T chunks[7];\n} uint224m_T;\n\ntypedef struct {\n  uint224m_T re;\n  uint224m_T im;\n} cuint224m_T;\n\ntypedef struct {\n  uint32_T chunks[8];\n} int256m_T;\n\ntypedef struct {\n  int256m_T re;\n  int256m_T im;\n} cint256m_T;\n\ntypedef struct {\n  uint32_T chunks[8];\n} uint256m_T;\n\ntypedef struct {\n  uint256m_T re;\n  uint256m_T im;\n} cuint256m_T;\n\ntypedef struct {\n  uint32_T chunks[9];\n} int288m_T;\n\ntypedef struct {\n  int288m_T re;\n  int288m_T im;\n} cint288m_T;\n\ntypedef struct {\n  uint32_T chunks[9];\n} uint288m_T;\n\ntypedef struct {\n  uint288m_T re;\n  uint288m_T im;\n} cuint288m_T;\n\ntypedef struct {\n  uint32_T chunks[10];\n} int320m_T;\n\ntypedef struct {\n  int320m_T re;\n  int320m_T im;\n} cint320m_T;\n\ntypedef struct {\n  uint32_T chunks[10];\n} uint320m_T;\n\ntypedef struct {\n  uint320m_T re;\n  uint320m_T im;\n} cuint320m_T;\n\ntypedef struct {\n  uint32_T chunks[11];\n} int352m_T;\n\ntypedef struct {\n  int352m_T re;\n  int352m_T im;\n} cint352m_T;\n\ntypedef struct {\n  uint32_T chunks[11];\n} uint352m_T;\n\ntypedef struct {\n  uint352m_T re;\n  uint352m_T im;\n} cuint352m_T;\n\ntypedef struct {\n  uint32_T chunks[12];\n} int384m_T;\n\ntypedef struct {\n  int384m_T re;\n  int384m_T im;\n} cint384m_T;\n\ntypedef struct {\n  uint32_T chunks[12];\n} uint384m_T;\n\ntypedef struct {\n  uint384m_T re;\n  uint384m_T im;\n} cuint384m_T;\n\ntypedef struct {\n  uint32_T chunks[13];\n} int416m_T;\n\ntypedef struct {\n  int416m_T re;\n  int416m_T im;\n} cint416m_T;\n\ntypedef struct {\n  uint32_T chunks[13];\n} uint416m_T;\n\ntypedef struct {\n  uint416m_T re;\n  uint416m_T im;\n} cuint416m_T;\n\ntypedef struct {\n  uint32_T chunks[14];\n} int448m_T;\n\ntypedef struct {\n  int448m_T re;\n  int448m_T im;\n} cint448m_T;\n\ntypedef struct {\n  uint32_T chunks[14];\n} uint448m_T;\n\ntypedef struct {\n  uint448m_T re;\n  uint448m_T im;\n} cuint448m_T;\n\ntypedef struct {\n  uint32_T chunks[15];\n} int480m_T;\n\ntypedef struct {\n  int480m_T re;\n  int480m_T im;\n} cint480m_T;\n\ntypedef struct {\n  uint32_T chunks[15];\n} uint480m_T;\n\ntypedef struct {\n  uint480m_T re;\n  uint480m_T im;\n} cuint480m_T;\n\ntypedef struct {\n  uint32_T chunks[16];\n} int512m_T;\n\ntypedef struct {\n  int512m_T re;\n  int512m_T im;\n} cint512m_T;\n\ntypedef struct {\n  uint32_T chunks[16];\n} uint512m_T;\n\ntypedef struct {\n  uint512m_T re;\n  uint512m_T im;\n} cuint512m_T;\n\ntypedef struct {\n  uint32_T chunks[17];\n} int544m_T;\n\ntypedef struct {\n  int544m_T re;\n  int544m_T im;\n} cint544m_T;\n\ntypedef struct {\n  uint32_T chunks[17];\n} uint544m_T;\n\ntypedef struct {\n  uint544m_T re;\n  uint544m_T im;\n} cuint544m_T;\n\ntypedef struct {\n  uint32_T chunks[18];\n} int576m_T;\n\ntypedef struct {\n  int576m_T re;\n  int576m_T im;\n} cint576m_T;\n\ntypedef struct {\n  uint32_T chunks[18];\n} uint576m_T;\n\ntypedef struct {\n  uint576m_T re;\n  uint576m_T im;\n} cuint576m_T;\n\ntypedef struct {\n  uint32_T chunks[19];\n} int608m_T;\n\ntypedef struct {\n  int608m_T re;\n  int608m_T im;\n} cint608m_T;\n\ntypedef struct {\n  uint32_T chunks[19];\n} uint608m_T;\n\ntypedef struct {\n  uint608m_T re;\n  uint608m_T im;\n} cuint608m_T;\n\ntypedef struct {\n  uint32_T chunks[20];\n} int640m_T;\n\ntypedef struct {\n  int640m_T re;\n  int640m_T im;\n} cint640m_T;\n\ntypedef struct {\n  uint32_T chunks[20];\n} uint640m_T;\n\ntypedef struct {\n  uint640m_T re;\n  uint640m_T im;\n} cuint640m_T;\n\ntypedef struct {\n  uint32_T chunks[21];\n} int672m_T;\n\ntypedef struct {\n  int672m_T re;\n  int672m_T im;\n} cint672m_T;\n\ntypedef struct {\n  uint32_T chunks[21];\n} uint672m_T;\n\ntypedef struct {\n  uint672m_T re;\n  uint672m_T im;\n} cuint672m_T;\n\ntypedef struct {\n  uint32_T chunks[22];\n} int704m_T;\n\ntypedef struct {\n  int704m_T re;\n  int704m_T im;\n} cint704m_T;\n\ntypedef struct {\n  uint32_T chunks[22];\n} uint704m_T;\n\ntypedef struct {\n  uint704m_T re;\n  uint704m_T im;\n} cuint704m_T;\n\ntypedef struct {\n  uint32_T chunks[23];\n} int736m_T;\n\ntypedef struct {\n  int736m_T re;\n  int736m_T im;\n} cint736m_T;\n\ntypedef struct {\n  uint32_T chunks[23];\n} uint736m_T;\n\ntypedef struct {\n  uint736m_T re;\n  uint736m_T im;\n} cuint736m_T;\n\ntypedef struct {\n  uint32_T chunks[24];\n} int768m_T;\n\ntypedef struct {\n  int768m_T re;\n  int768m_T im;\n} cint768m_T;\n\ntypedef struct {\n  uint32_T chunks[24];\n} uint768m_T;\n\ntypedef struct {\n  uint768m_T re;\n  uint768m_T im;\n} cuint768m_T;\n\ntypedef struct {\n  uint32_T chunks[25];\n} int800m_T;\n\ntypedef struct {\n  int800m_T re;\n  int800m_T im;\n} cint800m_T;\n\ntypedef struct {\n  uint32_T chunks[25];\n} uint800m_T;\n\ntypedef struct {\n  uint800m_T re;\n  uint800m_T im;\n} cuint800m_T;\n\ntypedef struct {\n  uint32_T chunks[26];\n} int832m_T;\n\ntypedef struct {\n  int832m_T re;\n  int832m_T im;\n} cint832m_T;\n\ntypedef struct {\n  uint32_T chunks[26];\n} uint832m_T;\n\ntypedef struct {\n  uint832m_T re;\n  uint832m_T im;\n} cuint832m_T;\n\ntypedef struct {\n  uint32_T chunks[27];\n} int864m_T;\n\ntypedef struct {\n  int864m_T re;\n  int864m_T im;\n} cint864m_T;\n\ntypedef struct {\n  uint32_T chunks[27];\n} uint864m_T;\n\ntypedef struct {\n  uint864m_T re;\n  uint864m_T im;\n} cuint864m_T;\n\ntypedef struct {\n  uint32_T chunks[28];\n} int896m_T;\n\ntypedef struct {\n  int896m_T re;\n  int896m_T im;\n} cint896m_T;\n\ntypedef struct {\n  uint32_T chunks[28];\n} uint896m_T;\n\ntypedef struct {\n  uint896m_T re;\n  uint896m_T im;\n} cuint896m_T;\n\ntypedef struct {\n  uint32_T chunks[29];\n} int928m_T;\n\ntypedef struct {\n  int928m_T re;\n  int928m_T im;\n} cint928m_T;\n\ntypedef struct {\n  uint32_T chunks[29];\n} uint928m_T;\n\ntypedef struct {\n  uint928m_T re;\n  uint928m_T im;\n} cuint928m_T;\n\ntypedef struct {\n  uint32_T chunks[30];\n} int960m_T;\n\ntypedef struct {\n  int960m_T re;\n  int960m_T im;\n} cint960m_T;\n\ntypedef struct {\n  uint32_T chunks[30];\n} uint960m_T;\n\ntypedef struct {\n  uint960m_T re;\n  uint960m_T im;\n} cuint960m_T;\n\ntypedef struct {\n  uint32_T chunks[31];\n} int992m_T;\n\ntypedef struct {\n  int992m_T re;\n  int992m_T im;\n} cint992m_T;\n\ntypedef struct {\n  uint32_T chunks[31];\n} uint992m_T;\n\ntypedef struct {\n  uint992m_T re;\n  uint992m_T im;\n} cuint992m_T;\n\ntypedef struct {\n  uint32_T chunks[32];\n} int1024m_T;\n\ntypedef struct {\n  int1024m_T re;\n  int1024m_T im;\n} cint1024m_T;\n\ntypedef struct {\n  uint32_T chunks[32];\n} uint1024m_T;\n\ntypedef struct {\n  uint1024m_T re;\n  uint1024m_T im;\n} cuint1024m_T;\n\ntypedef struct {\n  uint32_T chunks[33];\n} int1056m_T;\n\ntypedef struct {\n  int1056m_T re;\n  int1056m_T im;\n} cint1056m_T;\n\ntypedef struct {\n  uint32_T chunks[33];\n} uint1056m_T;\n\ntypedef struct {\n  uint1056m_T re;\n  uint1056m_T im;\n} cuint1056m_T;\n\ntypedef struct {\n  uint32_T chunks[34];\n} int1088m_T;\n\ntypedef struct {\n  int1088m_T re;\n  int1088m_T im;\n} cint1088m_T;\n\ntypedef struct {\n  uint32_T chunks[34];\n} uint1088m_T;\n\ntypedef struct {\n  uint1088m_T re;\n  uint1088m_T im;\n} cuint1088m_T;\n\ntypedef struct {\n  uint32_T chunks[35];\n} int1120m_T;\n\ntypedef struct {\n  int1120m_T re;\n  int1120m_T im;\n} cint1120m_T;\n\ntypedef struct {\n  uint32_T chunks[35];\n} uint1120m_T;\n\ntypedef struct {\n  uint1120m_T re;\n  uint1120m_T im;\n} cuint1120m_T;\n\ntypedef struct {\n  uint32_T chunks[36];\n} int1152m_T;\n\ntypedef struct {\n  int1152m_T re;\n  int1152m_T im;\n} cint1152m_T;\n\ntypedef struct {\n  uint32_T chunks[36];\n} uint1152m_T;\n\ntypedef struct {\n  uint1152m_T re;\n  uint1152m_T im;\n} cuint1152m_T;\n\ntypedef struct {\n  uint32_T chunks[37];\n} int1184m_T;\n\ntypedef struct {\n  int1184m_T re;\n  int1184m_T im;\n} cint1184m_T;\n\ntypedef struct {\n  uint32_T chunks[37];\n} uint1184m_T;\n\ntypedef struct {\n  uint1184m_T re;\n  uint1184m_T im;\n} cuint1184m_T;\n\ntypedef struct {\n  uint32_T chunks[38];\n} int1216m_T;\n\ntypedef struct {\n  int1216m_T re;\n  int1216m_T im;\n} cint1216m_T;\n\ntypedef struct {\n  uint32_T chunks[38];\n} uint1216m_T;\n\ntypedef struct {\n  uint1216m_T re;\n  uint1216m_T im;\n} cuint1216m_T;\n\ntypedef struct {\n  uint32_T chunks[39];\n} int1248m_T;\n\ntypedef struct {\n  int1248m_T re;\n  int1248m_T im;\n} cint1248m_T;\n\ntypedef struct {\n  uint32_T chunks[39];\n} uint1248m_T;\n\ntypedef struct {\n  uint1248m_T re;\n  uint1248m_T im;\n} cuint1248m_T;\n\ntypedef struct {\n  uint32_T chunks[40];\n} int1280m_T;\n\ntypedef struct {\n  int1280m_T re;\n  int1280m_T im;\n} cint1280m_T;\n\ntypedef struct {\n  uint32_T chunks[40];\n} uint1280m_T;\n\ntypedef struct {\n  uint1280m_T re;\n  uint1280m_T im;\n} cuint1280m_T;\n\ntypedef struct {\n  uint32_T chunks[41];\n} int1312m_T;\n\ntypedef struct {\n  int1312m_T re;\n  int1312m_T im;\n} cint1312m_T;\n\ntypedef struct {\n  uint32_T chunks[41];\n} uint1312m_T;\n\ntypedef struct {\n  uint1312m_T re;\n  uint1312m_T im;\n} cuint1312m_T;\n\ntypedef struct {\n  uint32_T chunks[42];\n} int1344m_T;\n\ntypedef struct {\n  int1344m_T re;\n  int1344m_T im;\n} cint1344m_T;\n\ntypedef struct {\n  uint32_T chunks[42];\n} uint1344m_T;\n\ntypedef struct {\n  uint1344m_T re;\n  uint1344m_T im;\n} cuint1344m_T;\n\ntypedef struct {\n  uint32_T chunks[43];\n} int1376m_T;\n\ntypedef struct {\n  int1376m_T re;\n  int1376m_T im;\n} cint1376m_T;\n\ntypedef struct {\n  uint32_T chunks[43];\n} uint1376m_T;\n\ntypedef struct {\n  uint1376m_T re;\n  uint1376m_T im;\n} cuint1376m_T;\n\ntypedef struct {\n  uint32_T chunks[44];\n} int1408m_T;\n\ntypedef struct {\n  int1408m_T re;\n  int1408m_T im;\n} cint1408m_T;\n\ntypedef struct {\n  uint32_T chunks[44];\n} uint1408m_T;\n\ntypedef struct {\n  uint1408m_T re;\n  uint1408m_T im;\n} cuint1408m_T;\n\ntypedef struct {\n  uint32_T chunks[45];\n} int1440m_T;\n\ntypedef struct {\n  int1440m_T re;\n  int1440m_T im;\n} cint1440m_T;\n\ntypedef struct {\n  uint32_T chunks[45];\n} uint1440m_T;\n\ntypedef struct {\n  uint1440m_T re;\n  uint1440m_T im;\n} cuint1440m_T;\n\ntypedef struct {\n  uint32_T chunks[46];\n} int1472m_T;\n\ntypedef struct {\n  int1472m_T re;\n  int1472m_T im;\n} cint1472m_T;\n\ntypedef struct {\n  uint32_T chunks[46];\n} uint1472m_T;\n\ntypedef struct {\n  uint1472m_T re;\n  uint1472m_T im;\n} cuint1472m_T;\n\ntypedef struct {\n  uint32_T chunks[47];\n} int1504m_T;\n\ntypedef struct {\n  int1504m_T re;\n  int1504m_T im;\n} cint1504m_T;\n\ntypedef struct {\n  uint32_T chunks[47];\n} uint1504m_T;\n\ntypedef struct {\n  uint1504m_T re;\n  uint1504m_T im;\n} cuint1504m_T;\n\ntypedef struct {\n  uint32_T chunks[48];\n} int1536m_T;\n\ntypedef struct {\n  int1536m_T re;\n  int1536m_T im;\n} cint1536m_T;\n\ntypedef struct {\n  uint32_T chunks[48];\n} uint1536m_T;\n\ntypedef struct {\n  uint1536m_T re;\n  uint1536m_T im;\n} cuint1536m_T;\n\ntypedef struct {\n  uint32_T chunks[49];\n} int1568m_T;\n\ntypedef struct {\n  int1568m_T re;\n  int1568m_T im;\n} cint1568m_T;\n\ntypedef struct {\n  uint32_T chunks[49];\n} uint1568m_T;\n\ntypedef struct {\n  uint1568m_T re;\n  uint1568m_T im;\n} cuint1568m_T;\n\ntypedef struct {\n  uint32_T chunks[50];\n} int1600m_T;\n\ntypedef struct {\n  int1600m_T re;\n  int1600m_T im;\n} cint1600m_T;\n\ntypedef struct {\n  uint32_T chunks[50];\n} uint1600m_T;\n\ntypedef struct {\n  uint1600m_T re;\n  uint1600m_T im;\n} cuint1600m_T;\n\ntypedef struct {\n  uint32_T chunks[51];\n} int1632m_T;\n\ntypedef struct {\n  int1632m_T re;\n  int1632m_T im;\n} cint1632m_T;\n\ntypedef struct {\n  uint32_T chunks[51];\n} uint1632m_T;\n\ntypedef struct {\n  uint1632m_T re;\n  uint1632m_T im;\n} cuint1632m_T;\n\ntypedef struct {\n  uint32_T chunks[52];\n} int1664m_T;\n\ntypedef struct {\n  int1664m_T re;\n  int1664m_T im;\n} cint1664m_T;\n\ntypedef struct {\n  uint32_T chunks[52];\n} uint1664m_T;\n\ntypedef struct {\n  uint1664m_T re;\n  uint1664m_T im;\n} cuint1664m_T;\n\ntypedef struct {\n  uint32_T chunks[53];\n} int1696m_T;\n\ntypedef struct {\n  int1696m_T re;\n  int1696m_T im;\n} cint1696m_T;\n\ntypedef struct {\n  uint32_T chunks[53];\n} uint1696m_T;\n\ntypedef struct {\n  uint1696m_T re;\n  uint1696m_T im;\n} cuint1696m_T;\n\ntypedef struct {\n  uint32_T chunks[54];\n} int1728m_T;\n\ntypedef struct {\n  int1728m_T re;\n  int1728m_T im;\n} cint1728m_T;\n\ntypedef struct {\n  uint32_T chunks[54];\n} uint1728m_T;\n\ntypedef struct {\n  uint1728m_T re;\n  uint1728m_T im;\n} cuint1728m_T;\n\ntypedef struct {\n  uint32_T chunks[55];\n} int1760m_T;\n\ntypedef struct {\n  int1760m_T re;\n  int1760m_T im;\n} cint1760m_T;\n\ntypedef struct {\n  uint32_T chunks[55];\n} uint1760m_T;\n\ntypedef struct {\n  uint1760m_T re;\n  uint1760m_T im;\n} cuint1760m_T;\n\ntypedef struct {\n  uint32_T chunks[56];\n} int1792m_T;\n\ntypedef struct {\n  int1792m_T re;\n  int1792m_T im;\n} cint1792m_T;\n\ntypedef struct {\n  uint32_T chunks[56];\n} uint1792m_T;\n\ntypedef struct {\n  uint1792m_T re;\n  uint1792m_T im;\n} cuint1792m_T;\n\ntypedef struct {\n  uint32_T chunks[57];\n} int1824m_T;\n\ntypedef struct {\n  int1824m_T re;\n  int1824m_T im;\n} cint1824m_T;\n\ntypedef struct {\n  uint32_T chunks[57];\n} uint1824m_T;\n\ntypedef struct {\n  uint1824m_T re;\n  uint1824m_T im;\n} cuint1824m_T;\n\ntypedef struct {\n  uint32_T chunks[58];\n} int1856m_T;\n\ntypedef struct {\n  int1856m_T re;\n  int1856m_T im;\n} cint1856m_T;\n\ntypedef struct {\n  uint32_T chunks[58];\n} uint1856m_T;\n\ntypedef struct {\n  uint1856m_T re;\n  uint1856m_T im;\n} cuint1856m_T;\n\ntypedef struct {\n  uint32_T chunks[59];\n} int1888m_T;\n\ntypedef struct {\n  int1888m_T re;\n  int1888m_T im;\n} cint1888m_T;\n\ntypedef struct {\n  uint32_T chunks[59];\n} uint1888m_T;\n\ntypedef struct {\n  uint1888m_T re;\n  uint1888m_T im;\n} cuint1888m_T;\n\ntypedef struct {\n  uint32_T chunks[60];\n} int1920m_T;\n\ntypedef struct {\n  int1920m_T re;\n  int1920m_T im;\n} cint1920m_T;\n\ntypedef struct {\n  uint32_T chunks[60];\n} uint1920m_T;\n\ntypedef struct {\n  uint1920m_T re;\n  uint1920m_T im;\n} cuint1920m_T;\n\ntypedef struct {\n  uint32_T chunks[61];\n} int1952m_T;\n\ntypedef struct {\n  int1952m_T re;\n  int1952m_T im;\n} cint1952m_T;\n\ntypedef struct {\n  uint32_T chunks[61];\n} uint1952m_T;\n\ntypedef struct {\n  uint1952m_T re;\n  uint1952m_T im;\n} cuint1952m_T;\n\ntypedef struct {\n  uint32_T chunks[62];\n} int1984m_T;\n\ntypedef struct {\n  int1984m_T re;\n  int1984m_T im;\n} cint1984m_T;\n\ntypedef struct {\n  uint32_T chunks[62];\n} uint1984m_T;\n\ntypedef struct {\n  uint1984m_T re;\n  uint1984m_T im;\n} cuint1984m_T;\n\ntypedef struct {\n  uint32_T chunks[63];\n} int2016m_T;\n\ntypedef struct {\n  int2016m_T re;\n  int2016m_T im;\n} cint2016m_T;\n\ntypedef struct {\n  uint32_T chunks[63];\n} uint2016m_T;\n\ntypedef struct {\n  uint2016m_T re;\n  uint2016m_T im;\n} cuint2016m_T;\n\ntypedef struct {\n  uint32_T chunks[64];\n} int2048m_T;\n\ntypedef struct {\n  int2048m_T re;\n  int2048m_T im;\n} cint2048m_T;\n\ntypedef struct {\n  uint32_T chunks[64];\n} uint2048m_T;\n\ntypedef struct {\n  uint2048m_T re;\n  uint2048m_T im;\n} cuint2048m_T;\n\n#endif                                 /* MULTIWORD_TYPES_H */\n"},{"name":"rtGetInf.cpp","type":"source","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetInf.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetInf.h\"\n\n}\n\n#include <stddef.h>\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  /*\n   * Initialize rtInf needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetInf(void)\n  {\n    size_t bitsPerReal{ sizeof(real_T) * (NumBitsPerChar) };\n\n    real_T inf{ 0.0 };\n\n    if (bitsPerReal == 32U) {\n      inf = rtGetInfF();\n    } else {\n      uint16_T one{ 1U };\n\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder\n{\n        (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian\n      };\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          inf = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          inf = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return inf;\n  }\n\n  /*\n   * Initialize rtInfF needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetInfF(void)\n  {\n    IEEESingle infF;\n    infF.wordL.wordLuint = 0x7F800000U;\n    return infF.wordL.wordLreal;\n  }\n\n  /*\n   * Initialize rtMinusInf needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetMinusInf(void)\n  {\n    size_t bitsPerReal{ sizeof(real_T) * (NumBitsPerChar) };\n\n    real_T minf{ 0.0 };\n\n    if (bitsPerReal == 32U) {\n      minf = rtGetMinusInfF();\n    } else {\n      uint16_T one{ 1U };\n\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder\n{\n        (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian\n      };\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          minf = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF00000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          minf = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return minf;\n  }\n\n  /*\n   * Initialize rtMinusInfF needed by the generated code.\n   * Inf is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetMinusInfF(void)\n  {\n    IEEESingle minfF;\n    minfF.wordL.wordLuint = 0xFF800000U;\n    return minfF.wordL.wordLreal;\n  }\n}\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetInf.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtGetInf_h_\n#define RTW_HEADER_rtGetInf_h_\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtGetInf(void);\n  extern real32_T rtGetInfF(void);\n  extern real_T rtGetMinusInf(void);\n  extern real32_T rtGetMinusInfF(void);\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\n"},{"name":"rtGetNaN.cpp","type":"source","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetNaN.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\n#include <stddef.h>\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  /*\n   * Initialize rtNaN needed by the generated code.\n   * NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  real_T rtGetNaN(void)\n  {\n    size_t bitsPerReal{ sizeof(real_T) * (NumBitsPerChar) };\n\n    real_T nan{ 0.0 };\n\n    if (bitsPerReal == 32U) {\n      nan = rtGetNaNF();\n    } else {\n      uint16_T one = 1U;\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder\n{\n        (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian\n      };\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0xFFF80000U;\n          tmpVal.bitVal.words.wordL = 0x00000000U;\n          nan = tmpVal.fltVal;\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;\n          tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;\n          nan = tmpVal.fltVal;\n          break;\n        }\n      }\n    }\n\n    return nan;\n  }\n\n  /*\n   * Initialize rtNaNF needed by the generated code.\n   * NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  real32_T rtGetNaNF(void)\n  {\n    IEEESingle nanF{ { 0.0F } };\n\n    uint16_T one{ 1U };\n\n    enum {\n      LittleEndian,\n      BigEndian\n    } machByteOrder\n{\n      (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian\n    };\n    switch (machByteOrder) {\n     case LittleEndian:\n      {\n        nanF.wordL.wordLuint = 0xFFC00000U;\n        break;\n      }\n\n     case BigEndian:\n      {\n        nanF.wordL.wordLuint = 0x7FFFFFFFU;\n        break;\n      }\n    }\n\n    return nanF.wordL.wordLreal;\n  }\n}\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtGetNaN.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtGetNaN_h_\n#define RTW_HEADER_rtGetNaN_h_\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtGetNaN(void);\n  extern real32_T rtGetNaNF(void);\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\n"},{"name":"rt_defines.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rt_defines.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rt_defines_h_\n#define RTW_HEADER_rt_defines_h_\n\n/*===========*\n * Constants *\n *===========*/\n#define RT_PI                          3.14159265358979323846\n#define RT_PIF                         3.1415927F\n#define RT_LN_10                       2.30258509299404568402\n#define RT_LN_10F                      2.3025851F\n#define RT_LOG10E                      0.43429448190325182765\n#define RT_LOG10EF                     0.43429449F\n#define RT_E                           2.7182818284590452354\n#define RT_EF                          2.7182817F\n\n/*\n * UNUSED_PARAMETER(x)\n *   Used to specify that a function parameter (argument) is required but not\n *   accessed by the function body.\n */\n#ifndef UNUSED_PARAMETER\n#if defined(__LCC__)\n#define UNUSED_PARAMETER(x)                                      /* do nothing */\n#else\n\n/*\n * This is the semi-ANSI standard way of indicating that an\n * unused function parameter is required.\n */\n#define UNUSED_PARAMETER(x)            (void) (x)\n#endif\n#endif\n#endif                                 /* RTW_HEADER_rt_defines_h_ */\n"},{"name":"rt_nonfinite.cpp","type":"source","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rt_nonfinite.cpp\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\nextern \"C\"\n{\n\n#include \"rtGetInf.h\"\n\n}\n\n#include <stddef.h>\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#define NumBitsPerChar                 8U\n\nextern \"C\"\n{\n  real_T rtInf;\n  real_T rtMinusInf;\n  real_T rtNaN;\n  real32_T rtInfF;\n  real32_T rtMinusInfF;\n  real32_T rtNaNF;\n}\n\nextern \"C\"\n{\n  /*\n   * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\n   * generated code. NaN is initialized as non-signaling. Assumes IEEE.\n   */\n  void rt_InitInfAndNaN(size_t realSize)\n  {\n    (void) (realSize);\n    rtNaN = rtGetNaN();\n    rtNaNF = rtGetNaNF();\n    rtInf = rtGetInf();\n    rtInfF = rtGetInfF();\n    rtMinusInf = rtGetMinusInf();\n    rtMinusInfF = rtGetMinusInfF();\n  }\n\n  /* Test if value is infinite */\n  boolean_T rtIsInf(real_T value)\n  {\n    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\n  }\n\n  /* Test if single-precision value is infinite */\n  boolean_T rtIsInfF(real32_T value)\n  {\n    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\n  }\n\n  /* Test if value is not a number */\n  boolean_T rtIsNaN(real_T value)\n  {\n    boolean_T result{ (boolean_T) 0 };\n\n    size_t bitsPerReal{ sizeof(real_T) * (NumBitsPerChar) };\n\n    if (bitsPerReal == 32U) {\n      result = rtIsNaNF((real32_T)value);\n    } else {\n      uint16_T one{ 1U };\n\n      enum {\n        LittleEndian,\n        BigEndian\n      } machByteOrder\n{\n        (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian\n      };\n      switch (machByteOrder) {\n       case LittleEndian:\n        {\n          union {\n            LittleEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.fltVal = value;\n          result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==\n                               0x7FF00000 &&\n                               ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\n                                (tmpVal.bitVal.words.wordL != 0) ));\n          break;\n        }\n\n       case BigEndian:\n        {\n          union {\n            BigEndianIEEEDouble bitVal;\n            real_T fltVal;\n          } tmpVal;\n\n          tmpVal.fltVal = value;\n          result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==\n                               0x7FF00000 &&\n                               ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\n                                (tmpVal.bitVal.words.wordL != 0) ));\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /* Test if single-precision value is not a number */\n  boolean_T rtIsNaNF(real32_T value)\n  {\n    IEEESingle tmp;\n    tmp.wordL.wordLreal = value;\n    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\n                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\n  }\n}\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rt_nonfinite.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rt_nonfinite_h_\n#define RTW_HEADER_rt_nonfinite_h_\n#include <stddef.h>\n#include \"rtwtypes.h\"\n#define NOT_USING_NONFINITE_LITERALS   1\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtInf;\n  extern real_T rtMinusInf;\n  extern real_T rtNaN;\n  extern real32_T rtInfF;\n  extern real32_T rtMinusInfF;\n  extern real32_T rtNaNF;\n  extern void rt_InitInfAndNaN(size_t realSize);\n  extern boolean_T rtIsInf(real_T value);\n  extern boolean_T rtIsInfF(real32_T value);\n  extern boolean_T rtIsNaN(real_T value);\n  extern boolean_T rtIsNaNF(real32_T value);\n  struct BigEndianIEEEDouble {\n    struct {\n      uint32_T wordH;\n      uint32_T wordL;\n    } words;\n  };\n\n  struct LittleEndianIEEEDouble {\n    struct {\n      uint32_T wordL;\n      uint32_T wordH;\n    } words;\n  };\n\n  struct IEEESingle {\n    union {\n      real32_T wordLreal;\n      uint32_T wordLuint;\n    } wordL;\n  };\n\n#ifdef __cplusplus\n\n}                                      /* extern \"C\" */\n\n#endif\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtwtypes.h\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n#include \"tmwtypes.h\"\n#ifndef POINTER_T\n#define POINTER_T\n\ntypedef void * pointer_T;\n\n#endif\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n#endif                                 /* RTWTYPES_H */\n"},{"name":"rtmodel.cpp","type":"source","group":"interface","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n *  rtmodel.cpp:\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#include \"rtmodel.h\"\n\n/* Use this function only if you need to maintain compatibility with an existing static main program. */\nvoid True0_step(True0 & True0_Obj, int_T tid)\n{\n  switch (tid) {\n   case 0 :\n    True0_Obj.step0();\n    break;\n\n   case 2 :\n    True0_Obj.step2();\n    break;\n\n   default :\n    /* do nothing */\n    break;\n  }\n}\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"/home/divij/Desktop/complex/MultirotorSim_Vervoorst/True0_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n *  rtmodel.h:\n *\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * Code generation for model \"True0\".\n *\n * Model version              : 14.1\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\n * C++ source code generated on : Sun Jul 23 21:03:36 2023\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: 32-bit Generic\n * Code generation objective: Debugging\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtmodel_h_\n#define RTW_HEADER_rtmodel_h_\n#include \"True0.h\"\n#define MODEL_CLASSNAME                True0\n#define MODEL_STEPNAME                 True0_step\n#define GRTINTERFACE                   0\n\n/*\n * ROOT_IO_FORMAT: 0 (Individual arguments)\n * ROOT_IO_FORMAT: 1 (Structure reference)\n * ROOT_IO_FORMAT: 2 (Part of model data structure)\n */\n#define ROOT_IO_FORMAT                 2\n\n/* Model wrapper function */\n/* Use this function only if you need to maintain compatibility with an existing static main program. */\nextern void True0_step(True0 & True0_Obj, int_T tid);\n\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\n"},{"name":"rt_logging.c","type":"source","group":"other","path":"/usr/local/MATLAB/R2023a/rtw/c/src","tag":"","groupDisplay":"Other files","code":"/* \n *\n * Copyright 1994-2022 The MathWorks, Inc.\n *\n * File: rt_logging.c\n *\n * Abstract:\n *\tReal-Time Workshop data logging routines using circular buffers of\n *      fixed size.  The buffers are allocated at start, filled in at each\n *      major time step and finally written to a MAT-file at the end of the\n *      simulation.\n *\n *      This file handles redefining the following standard MathWorks types\n *      (see tmwtypes.h):\n *         [u]int8_T     to be int32_T (logged as Matlab [u]int32)\n *         [u]int16_T    to be int32_T (logged as Matlab [u]int32)\n *         real_T        to be real32_T (logged as Matlab single)\n *\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n#include <limits.h>\n#include <math.h>\n\n\n#if !defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)\n\n#include <stddef.h>                     /* size_t */\n#include \"rt_logging.h\"\n#ifndef IS_RAPID_ACCEL\n#include \"rt_mxclassid.h\"\n#endif\n#include \"rtw_matlogging.h\"\n\n#include \"rtwtypes.h\"\n\n#ifndef TMW_NAME_LENGTH_MAX\n#define TMW_NAME_LENGTH_MAX 64\n#endif\n#define mxMAXNAM  TMW_NAME_LENGTH_MAX\t/* maximum name length */\n#define matUNKNOWN                  0\n#define\tmatINT8                     1\n#define\tmatUINT8                    2\n#define\tmatINT16                    3\n#define\tmatUINT16                   4\n#define\tmatINT32                    5\n#define\tmatUINT32                   6\n#define\tmatFLOAT                    7\n#define\tmatDOUBLE                   9\n#define matINT64                   12\n#define matUINT64                  13\n#define\tmatMATRIX                  14\n\n#define matLOGICAL_BIT          0x200\n#define matCOMPLEX_BIT          0x800\n\n#define matKEY                 0x4D49\n#define matVERSION             0x0100\n#define matVERSION_INFO_OFFSET   124L\n\n#define matINT64_ALIGN(e)      ( ( ((unsigned)(e))+7 ) & (~7) )\n#define matTAG_SIZE            (sizeof(int32_T) << 1)\n\n#ifndef DEFAULT_BUFFER_SIZE\n#define DEFAULT_BUFFER_SIZE      1024  /* used if maxRows=0 and Tfinal=0.0    */\n#endif\n\n#define FREE(m) if (m != NULL) free(m)\n\n/* Logical definitions */\n#if (!defined(__cplusplus))\n#  ifndef false\n#   define false                       (0U)\n#  endif\n#  ifndef true\n#   define true                        (1U)\n#  endif\n#endif\n\n/*==========*\n * typedefs *\n *==========*/\n\ntypedef struct LogInfo_Tag {\n    LogVar       *t;                   /* Time log variable                   */\n    void         *x;                   /* State log variable                  */\n    int_T        ny;                   /* Length of \"y\" log variables         */\n    void         **y;                  /* Output log vars                     */\n    void         *xFinal;              /* Final state log variable            */\n\n    LogVar       *logVarsList;         /* Linked list of all LogVars          */\n    StructLogVar *structLogVarsList;   /* Linked list of all StructLogVars    */\n\n    boolean_T   haveLogVars;           /* Are logging one or more vars?       */\n} LogInfo;\n\ntypedef struct MatItem_tag {\n  int32_T    type;\n  uint32_T    nbytes;\n  const void *data;\n} MatItem;\n\ntypedef enum {\n    DATA_ITEM,\n    MATRIX_ITEM,\n    STRUCT_LOG_VAR_ITEM,\n    SIGNALS_STRUCT_ITEM\n} ItemDataKind;\n\n/*===========*\n * Constants *\n *===========*/\n\nstatic const char_T rtMemAllocError[] = \"Memory allocation error\";\n\n#define ZEROS32 \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"\n\n#if mxMAXNAM==32\n\n#define ZERO_PAD\n\n#elif mxMAXNAM==64\n\n#define ZERO_PAD ZEROS32\n\n#elif mxMAXNAM==128\n\n#define ZERO_PAD   ZEROS32  ZEROS32  ZEROS32\n\n#else\n\n#error \"Cannot Handle mxMAXNAM other than 32,64, and 128\"\n\n#endif\n/* field names: for variable-size signal logging */\nstatic const char_T rtStructLogVarFieldNames[] =\n                  \"time\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"signals\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtLocalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"valueDimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n                  \n\n#define TIME_FIELD_NAME      (rtStructLogVarFieldNames[0*mxMAXNAM])\n#define SIGNALS_FIELD_NAME   (rtStructLogVarFieldNames[1*mxMAXNAM])\n#define BLOCKNAME_FIELD_NAME (rtStructLogVarFieldNames[2*mxMAXNAM])\n\n#define VALUES_FIELD_NAME    (rtLocalLoggingSignalsStructFieldNames[0*mxMAXNAM])\n#define VALUEDIMENSIONS_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[1*mxMAXNAM])\n#define DIMENSION_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[2*mxMAXNAM])\n#define LABEL_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[3*mxMAXNAM])\n#define TITLE_FIELD_NAME     (rtLocalLoggingSignalsStructFieldNames[4*mxMAXNAM])\n#define PLOTSTYLE_FIELD_NAME (rtLocalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n\n#define STATENAME_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[5*mxMAXNAM])\n#define CROSS_MDL_REF_FIELD_NAME (rtGlobalLoggingSignalsStructFieldNames[6*mxMAXNAM])\n\n/* field names: for fixed-size signal logging */\nstatic const char_T rtLocalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"title\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"plotStyle\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\nstatic const char_T rtGlobalLoggingSignalsStructFieldNames_noValDims[] =\n                  \"values\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"dimensions\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"label\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"blockName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"stateName\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD\n                  \"inReferencedModel\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\" ZERO_PAD;\n\nextern real_T rtInf; /* declared by rt_nonfinite.c */\nextern real_T rtNaN;\nextern real32_T rtNaNF;\n\n/*================*\n * Local routines *\n *================*/\n\n/* Function: rt_GetSizeofDataType ==============================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofDataType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 0; /* unknown */\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        elSz = sizeof(real_T);\n        break;\n      case SS_SINGLE:\n        elSz = sizeof(real32_T);\n        break;\n      case SS_INT8:\n        elSz = sizeof(int8_T);\n        break;\n      case SS_UINT8:\n        elSz = sizeof(uint8_T);\n        break;\n      case SS_INT16:\n        elSz = sizeof(int16_T);\n        break;\n      case SS_UINT16:\n        elSz = sizeof(uint16_T);\n        break;\n      case SS_INT32:\n        elSz = sizeof(int32_T);\n        break;\n      case SS_UINT32:\n        elSz = sizeof(uint32_T);\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n    return(elSz);\n\n} /* end rt_GetSizeofDataType */\n\n\n/* Function: rt_GetSizeofComplexType ===========================================\n * Abstract:\n *      Get the element size in bytes given the data type id.\n */\nstatic size_t rt_GetSizeofComplexType(BuiltInDTypeId dTypeID)\n{\n    size_t elSz = 2*rt_GetSizeofDataType(dTypeID);\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal_T);\n      #endif\n        break;\n      case SS_SINGLE:\n      #ifdef CREAL_T\n        elSz = sizeof(creal32_T);\n      #endif\n        break;\n      case SS_INT8:\n      #ifdef CINT8_T\n        elSz = sizeof(cint8_T);\n      #endif\n        break;\n      case SS_UINT8:\n      #ifdef CUINT8_T\n        elSz = sizeof(cuint8_T);\n      #endif\n        break;\n      case SS_INT16:\n      #ifdef CINT16_T\n        elSz = sizeof(cint16_T);\n      #endif\n        break;\n      case SS_UINT16:\n      #ifdef CUINT16_T\n        elSz = sizeof(cuint16_T);\n      #endif\n        break;\n      case SS_INT32:\n      #ifdef CINT32_T\n        elSz = sizeof(cint32_T);\n      #endif\n        break;\n      case SS_UINT32:\n      #ifdef CUINT32_T\n        elSz = sizeof(cuint32_T);\n      #endif\n        break;\n      case SS_BOOLEAN:\n        elSz = sizeof(boolean_T);\n        break;\n    }\n\n    return(elSz);\n\n} /* end rt_GetSizeofComplexType */\n\n\n/* Function: rt_GetDataTypeConvertInfo =========================================\n * Abstract:\n *      Directly copy if pointer to structure is non-NULL, otherwise set to\n *      default.\n */\nstatic RTWLogDataTypeConvert rt_GetDataTypeConvertInfo(\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    BuiltInDTypeId dTypeID\n    )\n{\n    RTWLogDataTypeConvert dataTypeConvertInfoCopy;\n\n    if (pDataTypeConvertInfo == NULL) {\n        dataTypeConvertInfoCopy.conversionNeeded = 0;\n        dataTypeConvertInfoCopy.dataTypeIdLoggingTo = dTypeID;\n        dataTypeConvertInfoCopy.dataTypeIdOriginal  = (DTypeId)dTypeID;\n        dataTypeConvertInfoCopy.bitsPerChunk = 0;\n        dataTypeConvertInfoCopy.numOfChunk = 0;\n        dataTypeConvertInfoCopy.isSigned = 0;\n        dataTypeConvertInfoCopy.fracSlope = 1.0;\n        dataTypeConvertInfoCopy.fixedExp = 0;\n        dataTypeConvertInfoCopy.bias = 0.0;\n    } else {\n        dataTypeConvertInfoCopy = *pDataTypeConvertInfo;\n    }\n\n    return dataTypeConvertInfoCopy;\n\n} /* end rt_GetDataTypeConvertInfo */\n\n\n/* Function: rt_GetDblValueFromOverSizedData ===================================\n * Abstract:\n */\nstatic double rt_GetDblValueFromOverSizedData(\n    const void *pVoid, \n    int bitsPerChunk, \n    int numOfChunk,\n    unsigned int isSigned, \n    double fracSlope, \n    int fixedExp, \n    double bias)\n{\n    double retValue = 0;\n\n    double *dblValue = (double *) calloc(numOfChunk, sizeof(double));\n\n    int i;    \n    double isSignedNeg;\n\n    if(isSigned) {\n        const chunk_T *pData = (const chunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    } else  {\n        const uchunk_T *pData = (const uchunk_T *) (pVoid);\n        for (i = 0; i <numOfChunk; i++) {\n            dblValue[i] = (double)(pData[i]);\n        }\n    }\n\n    /* \n       Assuming multi chunks b_n ... b_2 b_1 b_0, and the length of each chunk is N.\n       Suppose b_i is the i-th chunk's value.\n       Then for unsigned data or data with one chunk: we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0;\n       But for signed data, we have\n       retValue = b_n * 2^(n*N) + ... + b_1 * 2^N + b_0 * 2^0+ (b_0<0) * 2^N + \n       ... (b_(n-1) <0) * 2^(n*N) \n       = (b_n + (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + (b_0<0)) * 2^N + b_0 * 2^0;\n       Together:\n       retValue = \n       (b_n + isSigned * (b_(n-1)<0)) * 2^(n*N) +... + (b_1 + isSigned * (b_0<0)) * 2^N + b_0 * 2^0;\n    */\n\n    retValue = dblValue[numOfChunk - 1];\n    \n    for(i = numOfChunk - 1; i > 0; i--) {\n        isSignedNeg = dblValue[i - 1] < 0 ? (double)isSigned : 0;\n        retValue = retValue + isSignedNeg;\n\n        retValue = ldexp(retValue, bitsPerChunk)+ dblValue[i-1];\n    }\n    retValue = ldexp( fracSlope * retValue, fixedExp ) + bias;\n\n    FREE(dblValue);\n    return (retValue);\n\n} /* end rt_GetDblValueFromOverSizedData */\n\n\n/* Function: rt_GetNonBoolMxIdFromDTypeId ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nstatic mxClassID rt_GetNonBoolMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    switch (dTypeID) {\n      case SS_DOUBLE:\n        mxID = (sizeof(real_T)==4? mxSINGLE_CLASS: mxDOUBLE_CLASS);\n        break;\n      case SS_SINGLE:\n        mxID = mxSINGLE_CLASS;\n        break;\n      case SS_INT8:\n        switch (sizeof(int8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 32-bits\" */\n            mxID = mxINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps int8_T into 16-bits\" */\n            mxID = mxINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_UINT8:\n        switch (sizeof(uint8_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps uint8_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          case 1:\n            mxID = mxUINT8_CLASS;\n            break;\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown data type ID\" */\n            mxID = mxUNKNOWN_CLASS;\n            break;\n        }\n        break;\n      case SS_INT16:\n        mxID = (sizeof(int16_T)==4? mxINT32_CLASS: mxINT16_CLASS);\n        break;\n      case SS_UINT16:\n        mxID = (sizeof(uint16_T)==4? mxUINT32_CLASS: mxUINT16_CLASS);\n        break;\n      case SS_INT32:\n        mxID = mxINT32_CLASS;\n        break;\n      case SS_UINT32:\n        mxID = mxUINT32_CLASS;\n        break;\n        /*case SS_BOOLEAN:\n          mxID = (sizeof(boolean_T)==4? mxUINT32_CLASS: mxLOGICAL_CLASS);\n          break;*/\n      default:\n        mxID = mxUNKNOWN_CLASS;\n        break;\n    }\n\n    return(mxID);\n\n} /* end rt_GetNonBoolMxIdFromDTypeId */\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeIdForRSim ======================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeIdForRSim(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxLOGICAL_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeIdForRSim */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_GetMxIdFromDTypeId =============================================\n * Abstract:\n *      Get the mx???_CLASS given the simulink builtin data type id.\n */\nmxClassID rt_GetMxIdFromDTypeId(BuiltInDTypeId dTypeID)\n{\n    mxClassID mxID;\n\n    if (dTypeID == SS_BOOLEAN) {\n        switch (sizeof(boolean_T)) {\n          case 4: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 32-bits\" */\n            mxID = mxUINT32_CLASS;\n            break;\n          case 2: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                     \"Needed for when PWS maps boolean_T into 16-bits\" */\n            mxID = mxUINT16_CLASS;\n            break;\n          default:\n            mxID = mxUINT8_CLASS;\n            break;\n        }\n    } else {\n        mxID = rt_GetNonBoolMxIdFromDTypeId(dTypeID);\n    }\n    return(mxID);\n\n} /* end rt_GetMxIdFromDTypeId */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n/* Function: rt_GetMatIdFromMxId ===============================================\n * Abstract:\n *      Get the MatId given the mxClassID.\n */\nstatic int_T rt_GetMatIdFromMxId(mxClassID mxID)\n{\n    int_T matID;\n\n    switch (mxID) {\n      case mxCELL_CLASS:\n      case mxSTRUCT_CLASS:\n      case mxOBJECT_CLASS:\n        matID = -1;\n        break;\n      case mxCHAR_CLASS:\n        matID = matUINT16;\n        break;\n      case mxDOUBLE_CLASS:\n        matID = matDOUBLE;\n        break;\n      case mxSINGLE_CLASS:\n        matID = matFLOAT;\n        break;\n      case mxINT8_CLASS:\n        matID = matINT8;\n        break;\n      case mxUINT8_CLASS:\n        matID = matUINT8;\n        break;\n      case mxINT16_CLASS:\n        matID = matINT16;\n        break;\n      case mxUINT16_CLASS:\n        matID = matUINT16;\n        break;\n      case mxINT32_CLASS:\n        matID = matINT32;\n        break;\n      case mxUINT32_CLASS:\n        matID = matUINT32;\n        break;\n      case mxINT64_CLASS:\n        matID = matINT64;\n        break;\n      case mxUINT64_CLASS:\n        matID = matUINT64;\n        break;\n      default:\n        matID = matUNKNOWN;\n        break;\n    }\n    return(matID);\n\n} /* end rt_GetMatIdFromMxId */\n\n\n/* Forward declaration */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind dataKind);\n\n\n/* Function: rt_ProcessMatItem =================================================\n * Abstract:\n *      This routine along with rt_WriteItemToMatFile() write out a specified\n *      mat-item the .mat file. Note that if the input argument\n *          cmd == 0, then this function just calculates the size of the item.\n *          cmd <> 0, this function writes the mat-item to the file.\n *      Return values is\n *           -1 : coding/logic error\n *            0 : upon success\n *          > 0 : upon write failure (1)\n */\nstatic int_T rt_ProcessMatItem(FILE         *fp,\n                               MatItem      *pItem,\n                               ItemDataKind itemKind,\n                               int_T        cmd)\n{\n    mxClassID    mxID          = mxUNKNOWN_CLASS;\n    uint32_T     arrayFlags[2] = {0, 0};\n    int32_T      *dims         = NULL;\n    int32_T      _dims[3]      = {0, 0, 0};\n    int32_T      nDims         = 2;\n    int32_T      nBytesInItem  = 0;\n    const char_T *itemName;\n    MatItem      item;\n    int_T        retStat       = 0;\n\n    switch (itemKind) {\n      case DATA_ITEM: {\n          (void)fprintf(stderr,\"Unexpected itemKind = DATA_ITEM in \"\n                               \"rt_ProcessMatItem @A\\n\");\n          retStat = -1;\n          goto EXIT_POINT;\n      }\n      case MATRIX_ITEM: {\n          const MatrixData *var = (const MatrixData *) pItem->data;\n\n          mxID           = var->mxID;\n          arrayFlags[0]  = mxID;\n          arrayFlags[0] |= var->logical;\n          arrayFlags[0] |= var->complex;\n          if (var->nDims < 2) {\n              dims         = _dims;\n              dims[0]      = var->nRows;\n              dims[1]      = var->nCols;\n              nDims        = 2;\n          } else {\n              int32_T k;\n              dims = (int32_T*)malloc(sizeof(int32_T)*(var->nDims+1));\n              for (k = 0; k < var->nDims; k++) {\n                  dims[k] = var->dims[k];\n              }\n              dims[var->nDims] = var->nRows;\n              nDims = var->nDims + 1;\n          }\n          itemName = var->name;\n          break;\n      }\n      case STRUCT_LOG_VAR_ITEM: {\n          const StructLogVar *var = (const StructLogVar *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = 1;\n          itemName      = var->name;\n          break;\n      }\n      case SIGNALS_STRUCT_ITEM: {\n          const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n\n          mxID          = mxSTRUCT_CLASS;\n          arrayFlags[0] = mxID;\n          dims          = _dims;\n          dims[0]       = 1;\n          dims[1]       = var->numSignals;\n          itemName      = &SIGNALS_FIELD_NAME;\n          break;\n      }\n      default:\n        (void)fprintf(stderr,\"Unexpected itemKind=%d in rt_ProcessMatItem @B\\n\",\n                      itemKind);\n        retStat = -1;\n        goto EXIT_POINT;\n    }\n\n    /* array flags */\n    item.nbytes = 2*sizeof(uint32_T);\n    if (cmd) {\n        item.type = matUINT32;\n        item.data = arrayFlags;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* dimensions */\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    item.nbytes = nDims*sizeof(int32_T);\n    if (cmd) {\n        item.type = matINT32;\n        item.data = dims;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;            \n        }\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        nBytesInItem += matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n    /* name */\n    item.nbytes = (int32_T)strlen(itemName);\n    if (cmd) {\n        item.type = matINT8;\n        item.data = (const char_T*) itemName;\n        if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n            retStat = 1;\n            goto EXIT_POINT;\n        }\n    } else {\n        nBytesInItem += (item.nbytes <= 4) ? /*LINTED E_CAST_INT_TO_SMALL_INT*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n    }\n\n    if (itemKind == MATRIX_ITEM) {\n        const MatrixData *var   = (const MatrixData*) pItem->data;\n        int_T            matID  = rt_GetMatIdFromMxId(mxID);\n        size_t           elSize = var->elSize;\n\n        /* data */\n        item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n        if (cmd) {\n            item.type = matID;\n            item.data = var->re;\n            if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n        }\n        /* imaginary part */\n        if (var->complex) {\n            item.nbytes = (int32_T)(var->nRows * var->nCols * elSize);\n            if (cmd) {\n                item.type = matID;\n                item.data = var->im;\n                if (rt_WriteItemToMatFile(fp, &item, DATA_ITEM)) {\n                    retStat = 1;\n                    goto EXIT_POINT;\n                }\n            } else {\n                nBytesInItem += (item.nbytes <= 4) ? /*LINTED*/\n                        matTAG_SIZE : matINT64_ALIGN(matTAG_SIZE + item.nbytes);\n            }\n        }\n    } else {  /* some type of structure item */\n        const char_T *fieldNames;\n        int_T        sizeofFieldNames;\n\n        /* field names */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = (const StructLogVar *) pItem->data;\n              fieldNames        = rtStructLogVarFieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var = (const SignalsStruct *) pItem->data;\n              fieldNames        = var->fieldNames;\n              sizeofFieldNames  = var->numActiveFields * mxMAXNAM;\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @C\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n\n        /* write field names */\n        if (cmd) {\n            int32_T tmpInt = mxMAXNAM;\n\n            item.nbytes = sizeof(int32_T);\n            item.type   = matINT32;\n            item.data   = &tmpInt;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n\n            item.nbytes = sizeofFieldNames;\n            item.type   = matINT8;\n            item.data   = (const char_T*) fieldNames;\n            if (rt_WriteItemToMatFile(fp,&item, DATA_ITEM)) {\n                retStat = 1;\n                goto EXIT_POINT;\n            }\n        } else {\n            /*LINTED E_CAST_INT_TO_SMALL_INT*/\n            nBytesInItem += matINT64_ALIGN( matTAG_SIZE + matTAG_SIZE +\n                                            sizeofFieldNames );\n        }\n\n        /* process each field of the structure */\n        switch (itemKind) {\n          case STRUCT_LOG_VAR_ITEM: {\n              const StructLogVar *var = pItem->data;\n\n              /* time */\n              {\n                  const void *data = var->time;\n\n                  if (var->logTime) { /* time is a LogVar, get the MatrixData */\n                      data = &(((const LogVar*) (var->time))->data);\n                  }\n\n                  item.type = matMATRIX;\n                  item.data = data;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp,&item,MATRIX_ITEM)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM,0)){\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n\n              /* signals */\n              item.type = matMATRIX;\n              item.data = &(var->signals);\n              if (cmd) {\n                  if (rt_WriteItemToMatFile(fp,&item,SIGNALS_STRUCT_ITEM)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n              } else {\n                  if (rt_ProcessMatItem(fp, &item, SIGNALS_STRUCT_ITEM,0)) {\n                      retStat = 1;\n                      goto EXIT_POINT;\n                  }\n                  nBytesInItem += item.nbytes + matTAG_SIZE;\n              }\n\n              /* block name */\n              if (var->blockName != NULL) {\n                  item.type = matMATRIX;\n                  item.data = var->blockName;\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n              }\n              break;\n          }\n          case SIGNALS_STRUCT_ITEM: {\n              const SignalsStruct *var        = pItem->data;\n              const LogVar        *values     = var->values;\n              const MatrixData    *dimensions = var->dimensions;\n              const MatrixData    *labels     = var->labels;\n              const MatrixData    *plotStyles = var->plotStyles;\n              const MatrixData    *titles     = var->titles;\n              const MatrixData    *blockNames = var->blockNames;\n              const MatrixData    *stateNames = var->stateNames;\n              const MatrixData    *crossMdlRef = var->crossMdlRef;\n              const boolean_T logValueDimensions = var->logValueDimensions;\n              int_T               i;\n\n              for (i = 0; i < var->numSignals; i++) {\n                  /* values */\n                  item.type = matMATRIX;\n                  item.data = &(values->data);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n\n                  if(logValueDimensions)\n                  {\n                      /* valueDimensions */\n                      /* Since the functions rt_WriteItemToMatFile and \n                         rt_ProcessMatItem deal with MatrixData, \n                         convert valDims to tempData, and fill up the\n                         necessary fields.\n                      */\n                      MatrixData  tempData;\n                      (void)memcpy(tempData.name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n                      tempData.nRows = values->valDims->nRows;\n                      tempData.nCols = values->valDims->nCols;\n                      tempData.nDims = 1;\n                      tempData._dims[0] = values->valDims->nCols;\n                      tempData.re = values->valDims->dimsData;\n                      tempData.im = NULL;\n                      tempData.dTypeID = SS_DOUBLE;\n                      tempData.elSize =  sizeof(real_T);\n                      tempData.mxID = mxDOUBLE_CLASS;\n                      tempData.logical = 0;\n                      tempData.complex = 0;\n                      tempData.frameData = 0;\n                      tempData.frameSize = 1;\n\n                      item.type = matMATRIX;                    \n                      item.data = &tempData; /*values->valDims;*/\n\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  values = values->next;\n\n                  /* dimensions */\n                  if (dimensions != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(dimensions[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n\n                  /* label */\n                  item.type = matMATRIX;\n                  item.data = &(labels[i]);\n                  if (cmd) {\n                      if (rt_WriteItemToMatFile(fp, &item,MATRIX_ITEM)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                  } else {\n                      if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                          retStat = 1;\n                          goto EXIT_POINT;\n                      }\n                      nBytesInItem += item.nbytes + matTAG_SIZE;\n                  }\n                  /* title */\n                  if (titles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(titles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* plot style */\n                  if (plotStyles != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(plotStyles[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp,&item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* block name */\n                  if (blockNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(blockNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* state name */\n                  if (stateNames != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(stateNames[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n                  /* crossMdlRef */\n                  if (crossMdlRef != NULL) {\n                      item.type = matMATRIX;\n                      item.data = &(crossMdlRef[i]);\n                      if (cmd) {\n                          if (rt_WriteItemToMatFile(fp, &item, MATRIX_ITEM)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                      } else {\n                          if (rt_ProcessMatItem(fp, &item, MATRIX_ITEM, 0)) {\n                              retStat = 1;\n                              goto EXIT_POINT;\n                          }\n                          nBytesInItem += item.nbytes + matTAG_SIZE;\n                      }\n                  }\n              } /* for i=1:numSignals */\n              break;\n          }\n          default: /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                      \"Needed to handle an unknown itemKind\" */\n            (void)fprintf(stderr, \"Unexpected itemKind=%d in \"\n                          \"rt_ProcessMatItem @D\\n\", itemKind);\n            retStat = -1;\n            goto EXIT_POINT;\n        }\n    } /* end struct item */\n\n    if (!cmd) {\n        pItem->nbytes = nBytesInItem;\n    }\n\n  EXIT_POINT:\n    if (dims != _dims) {\n        FREE(dims);\n    }\n    return(retStat);\n\n} /* end rt_ProcessMatItem */\n\n\n/* Function: rt_WriteItemToMatFile =============================================\n * Abstract:\n *      Entry function for writing out a mat item to the mat file.\n *\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteItemToMatFile(FILE         *fp,\n                                   MatItem      *pItem,\n                                   ItemDataKind itemKind)\n{\n    /* Determine the item size */\n    if (pItem->type == matMATRIX) {\n        if (rt_ProcessMatItem(fp, pItem, itemKind, 0)) return(1);\n    }\n\n    /* Write the item tag and data */\n    if (pItem->nbytes > 4) {\n        int32_T nAlignBytes;\n\n        if (fwrite(pItem, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n\n        if (pItem->type == matMATRIX) {\n            if (rt_ProcessMatItem(fp, pItem, itemKind, 1)) return(1);\n        } else {\n            if ( fwrite(pItem->data, 1, pItem->nbytes, fp) !=\n                                                    ((size_t) pItem->nbytes) ) {\n                return(1);\n            }\n        }\n\n        /* Add offset for 8-byte alignment */\n        nAlignBytes = matINT64_ALIGN(pItem->nbytes) - pItem->nbytes;\n        if (nAlignBytes > 0) {\n            int pad[2] = {0, 0};\n            if ( fwrite(pad,1,nAlignBytes,fp) != ((size_t) nAlignBytes) ) {\n                return(1);\n            }\n        }\n    } else {\n        MatItem item = {0, 0, NULL};\n        item.type = ((uint32_T)(pItem->type))|(((uint32_T)(pItem->nbytes))<<16);\n        (void)memcpy(&item.nbytes, pItem->data, pItem->nbytes);\n        if (fwrite(&item, 1, matTAG_SIZE, fp) != matTAG_SIZE) return(1);\n    }\n\n    return(0);\n\n} /* end rt_WriteItemToMatFile */\n\n\n/* Function: rt_WriteMat5FileHeader ============================================\n * Abstract:\n *      Function to write the mat file header.\n *      Return values is\n *          == 0 : upon success\n *          <> 0 : upon failure\n */\nstatic int_T rt_WriteMat5FileHeader(FILE *fp)\n{\n    int_T        nbytes;\n    int_T        nspaces;\n    int_T        i, n;\n    unsigned short ver[2];\n    char_T       spaces[16];\n    const char_T *matversion = \"MATLAB 5.0 MAT-file\";\n\n    (void)memset(spaces, ' ', sizeof(spaces));\n\n    n = (int_T)strlen(matversion);\n    nbytes = (int_T)fwrite(matversion, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    nspaces = matVERSION_INFO_OFFSET - nbytes;\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces % sizeof(spaces);\n    nbytes += (int_T)fwrite(spaces, 1, n, fp);\n    /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n    n = nspaces / sizeof(spaces);\n    for (i = 0; i < n; ++i) {\n        nbytes += (int_T)fwrite(spaces, 1, sizeof(spaces), fp);\n    }\n    if (nbytes == matVERSION_INFO_OFFSET) {\n        ver[0] = matVERSION;\n        ver[1] = matKEY;\n        nbytes += (int_T)fwrite(ver, 1, sizeof(ver), fp);\n    }\n    return(nbytes != matVERSION_INFO_OFFSET + sizeof(ver));\n\n} /* end rt_WriteMat5FileHeader */\n\n\n/* Function: rt_FixupLogVar ====================================================\n * Abstract:\n *\tMake the logged variable suitable for MATLAB.\n */\nstatic const char_T *rt_FixupLogVar(LogVar *var,int verbose)\n{\n    int_T  nCols   = var->data.nCols;\n    int_T  maxRows = var->data.nRows;\n    int_T  nDims   = var->data.nDims;\n    size_t elSize  = var->data.elSize;\n    int_T  nRows   = (var->wrapped ?  maxRows : var->rowIdx);\n\n    var->nDataPoints = var->rowIdx + var->wrapped * maxRows;\n\n    if (var->wrapped > 1 || (var->wrapped == 1 && var->rowIdx != 0)) {\n        /*\n         * Warn the user the circular buffer has wrapped, implying that\n         * some data has been lost.\n         */\n        if( verbose) {\n            (void)fprintf(stdout,\n                          \"*** Log variable %s has wrapped %d times\\n\"\n                          \"    using a circular buffer of size %d\\n\",\n                          var->data.name, var->wrapped, var->data.nRows);\n        }\n        if (var->usingDefaultBufSize) {\n            /*\n             * If wrapping occurred using the default buffer size,\n             * let the user know what size buffer to use in the\n             * future to avoid wrapping.  If the default buffer\n             * size was not used, the user has no control to specify\n             * the correct value.  Wrapping may occur when not using\n             * the default buffer if we allocated too small a buffer\n             * size for this logvar.  One common case is a toWorkspace\n             * block inside of an iterative subsystem - we can not take\n             * the number of iterations into account (they may be\n             * variable) when allocating the buffer.  In this case,\n             * just warn the buffer wrapped and don't tell user they\n             * can override the buffer size.\n             */\n            if( verbose ) {\n                (void)fprintf(stdout,\n                              \"*** To avoid wrapping, explicitly specify a\\n\"\n                              \"    buffer size of %d in your Simulink model\\n\"\n                              \"    by adding OPTS=\\\"-DDEFAULT_BUFFER_SIZE=%d\\\"\\n\"\n                              \"    as an argument to the ConfigSet MakeCommand\\n\"\n                              \"    parameter\\n\",\n                              var->nDataPoints, var->nDataPoints);\n            }\n        }\n    }\n\n    if (nDims < 2 && nCols > 1) {  /* Transpose? */\n        /* Don't need to transpose valueDimensions */\n        int_T  nEl    = nRows*nCols;\n        char   *src   = var->data.re;\n        char   *pmT;\n        int_T  k;\n\n        /**********************************\n         * If memory cannot be allocated, *\n         * write to a temporary buffer    *\n         **********************************/\n        if ((pmT = malloc(nEl*elSize)) == NULL) {\n            FILE  *fptr;\n            char  fName[mxMAXNAM+13];\n\n            (void)sprintf(fName, \"%s%s\", var->data.name, \"_rtw_tmw.tmw\");\n            if ((fptr=fopen(fName,\"w+b\")) == NULL) {\n                (void)fprintf(stderr,\"*** Error opening %s\",fName);\n                return(\"unable to open data file\\n\");\n            }\n\n            /****************************\n             * Write the data to a file *\n             ****************************/\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nCols*(k%nRows) + (k/nRows);\n                char  *dst = src + kT*elSize;\n                (void)fwrite(dst, elSize, 1, fptr);\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n\n            /*******************************\n             * Read the data from the file *\n             *******************************/\n            (void)rewind(fptr);\n            (void)fread(var->data.re, elSize, nEl, fptr);\n            (void)fclose(fptr);\n            (void)remove(fName);\n        } else {\n            for (k=0; k<nEl; k++) {\n                int_T kT   = nRows*(k%nCols) + (k/nCols);\n                char  *dst = pmT + kT*elSize;\n                (void)memcpy(dst, src, elSize);\n                src += elSize;\n            }\n            if (var->data.complex) {\n                char *pmiT = var->data.re;\n                src  = var->data.im;\n                for (k=0; k<nEl; k++) {\n                    int_T kT   = nRows*(k%nCols) + (k/nCols);\n                    char  *dst = pmiT + kT*elSize;\n                    (void)memcpy(dst, src, elSize);\n                    src += elSize;\n                }\n                var->data.re = var->data.im;\n                var->data.im = pmiT;\n            }\n            FREE(var->data.re);\n            var->data.re = pmT;\n        }\n    } /* Transpose? */\n\n    if (var->wrapped > 0 && var->rowIdx != 0 ) {  /* Rotate? */\n        char_T *buffer    = var->data.re;\n        int_T  done       = 0; /* done: 0 (1) rotate real (imag) part. */\n\n        do {\n            char_T *col       = buffer;\n            int_T  rowOffset  = (int_T)((nDims == 1) ? (elSize) : (elSize * nCols));\n            int_T  colOffset  = (int_T)((nDims == 1)?  (nRows*elSize) : elSize);\n            int_T  zeroIdx    = var->rowIdx;\n            int_T  j;\n\n            for (j = 0 ; j < nCols; ++j, col += colOffset) {\n                int_T   swapCount;\n                int_T   srcIdx;\n                int_T   dstIdx;\n                int_T   tmpIdx;\n                MatReal tmp;\n\n                for (tmpIdx=0, swapCount=0; swapCount < nRows; tmpIdx++) {\n                    (void)memcpy(&tmp, col + tmpIdx*rowOffset, elSize);\n\n                    dstIdx=tmpIdx; \n                    srcIdx = ((dstIdx + zeroIdx) % nRows);\n                    while (srcIdx != tmpIdx) {\n                        (void)memcpy(col + dstIdx*rowOffset,\n                                     col + srcIdx*rowOffset,\n                                     elSize);\n                        ++swapCount;\n                        dstIdx = srcIdx;\n                        srcIdx = ((dstIdx + zeroIdx) % nRows);\n                        \n                    }\n                    (void)memcpy(col + dstIdx*rowOffset, &tmp, elSize);\n                    ++swapCount;\n                }\n            }\n            done ++;\n            /* need to rotate the imaginary part */\n        } while ((done == 1) && ((buffer = var->data.im) != NULL));\n\n        var->rowIdx = 0;\n    } /* Rotate? */\n\n    /*\n     * We might have allocated more number of rows than the number of data\n     * points that have been logged, in which case set nRows to nDataPoints\n     * so that only these values get saved.\n     */\n    if (var->nDataPoints < var->data.nRows) {\n        var->data.nRows = var->nDataPoints;\n        if(var->valDims != NULL){\n            size_t elSizeValDims = sizeof(real_T);\n            int_T  k;\n            real_T *dimsData = var->valDims->dimsData + nRows;\n            /* \n               Keep nRows of values and that of valueDimensions consistent \n               for variable-size signals.\n            */\n            var->valDims->nRows = var->data.nRows;\n            /*\n               Also need to move data when shrinking the array size,\n               because valueDimensions data is stored in array format. \n               e.g. maxRows = 4; nRows = 2; nDims = 3;\n               Before fixing up the logVar, the locations of data are as below:\n               (x, y, z -- useful data / o -- junk)\n               a[0] = x    a[4] = y    a[8] = z\n               a[1] = x    a[5] = y    a[9] = z\n               a[2] = o    a[6] = o    a[10]= o\n               a[3] = o    a[7] = o    a[11]= o\n               After fixing up the logVar, we want the data to be stored as:\n               a[0] = x    a[4] = z    a[8] = o\n               a[1] = x    a[5] = z    a[9] = o\n               a[2] = y    a[6] = o    a[10]= o\n               a[3] = y    a[7] = o    a[11]= o\n            */\n            for(k = 1; k < nDims; k++){\n                (void) memmove(dimsData, \n                              var->valDims->dimsData + k*maxRows,\n                              elSizeValDims * nRows);\n                dimsData += nRows;\n            }\n        }\n    }\n    return(NULL);\n\n} /* end rt_FixupLogVar */\n\n\n/* Function: rt_LoadModifiedLogVarName =========================================\n * Abstract:\n *      The name of the logged variable is obtained from the input argument\n *      varName and the nameModifier which is obtained from the simstruct. If\n *      the nameModifier begins with an '_', then nameModifier is post-pended to\n *      varName to obtain the name of the logged variable. If the first\n *      character does not begin with an '_', then the nameModifier is\n *      pre-pended to varName.\n *\n * Examples:\n *     a)  varName = \"tout\" & nameModifier = \"_rt\"  => logVarName = \"tout_rt\"\n *     b)  varName = \"tout\" & nameModifier = \"rt_\"  => logVarName = \"rt_tout\"\n *     c)  varName = \"tout\" & nameModifier = \"none\" => logVarName = \"tout\"\n */\nstatic void rt_LoadModifiedLogVarName(const RTWLogInfo *li,         /* in  */\n                                      const char       *varName,    /* in  */\n                                      char             *logVarName) /* out */\n{\n    int_T        nameLen;\n    const char_T *nameModifier = rtliGetLogVarNameModifier(li);\n\n    if (nameModifier != NULL && strcmp(nameModifier,\"none\")==0) {\n        nameModifier = NULL;\n    }\n\n    logVarName[mxMAXNAM-1] = '\\0';\n    if (nameModifier == NULL) {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n    } else if (nameModifier[0] == '_') {\n        (void)strncpy(logVarName, varName, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, nameModifier, (size_t)mxMAXNAM-1-nameLen);\n    } else {\n        (void)strncpy(logVarName, nameModifier, mxMAXNAM-1);\n        nameLen = (int_T)strlen(logVarName);\n        (void)strncat(logVarName, varName, (size_t)mxMAXNAM-1-nameLen);\n    }\n\n} /* end rt_LoadModifiedLogVarName */\n\n\n/* Function: rt_GetActualDTypeID ===============================================\n * Abstract:\n *\tGiven a built-in data type id, return the actual data type id.\n *\tThe only time these are different is when real_T has been mapped\n *\tto a single.\n */\n#if defined(_MSC_VER)\n #pragma warning(push)\n #pragma warning(disable: 4127)\n#endif\nstatic BuiltInDTypeId rt_GetActualDTypeID(BuiltInDTypeId dTypeID)\n{\n    /*LINTED E_FALSE_LOGICAL_EXPR*/\n    if (dTypeID == SS_DOUBLE && sizeof(real_T) != 8) {     /* polyspace DEFECT:DEAD_CODE \n                                                              [Not a defect:Unset] \n                                                              \"Needed for when real_T has been \n                                                              mapped to a single\" */\n        return(SS_SINGLE);\n    } else {\n        return(dTypeID);\n    }\n\n} /* end rt_GetActualDTypeID */\n#if defined(_MSC_VER)\n #pragma warning(pop)\n#endif\n\n\n/* Function: rt_DestroyLogVar ==================================================\n * Abstract:\n *      Destroy the log var linked list.\n */\nstatic void rt_DestroyLogVar(LogVar *head)\n{\n    while(head) {\n        LogVar *var = head;\n        head = var->next;\n        FREE(var->data.re);\n        FREE(var->data.im);\n        if (var->data.dims != var->data._dims) {\n            FREE(var->data.dims);\n        }\n        /* free valDims if necessary */\n        if(var->valDims != NULL) {\n            FREE(var->valDims->dimsData);\n            FREE(var->valDims);\n        }\n        /* free coords, strides and currStrides if necessary */\n        FREE(var->coords);\n        FREE(var->strides);\n        FREE(var->currStrides);\n\n        FREE(var);\n    }\n\n} /* end rt_DestroyLogVar */\n\n\n/* Function: rt_DestroyStructLogVar ============================================\n * Abstract:\n *      Destroy the struct log var linked list.\n */\nstatic void rt_DestroyStructLogVar(StructLogVar *head)\n{\n    while(head) {\n        StructLogVar *var = head;\n\n        head = var->next;\n\n        if (var->logTime) { /* time is LogVar */\n            rt_DestroyLogVar(var->time);\n        } else {        /* time is MatrixData */\n            FREE(var->time);\n        }\n        rt_DestroyLogVar(var->signals.values);\n        FREE(var->signals.labels);\n        FREE(var->signals.plotStyles);\n        FREE(var->signals.dimensions);\n        FREE(var->signals.titles);\n        FREE(var->signals.blockNames);\n        FREE(var->signals.stateNames);\n        FREE(var->signals.crossMdlRef);\n        FREE(var->blockName);\n        FREE(var);\n    }\n\n} /* end rt_DestroyStructLogVar */\n\n\n/* Function: rt_InitSignalsStruct ==============================================\n * Abstract:\n *      Initialize the signals structure in the struct log variable.\n *\n * Returns:\n *\t== NULL  => success.\n *\t~= NULL  => failure, the return value is a pointer to the error\n *                           message, which is also set in the simstruct.\n */\nstatic const char_T *rt_InitSignalsStruct(RTWLogInfo             *li,\n                                          const real_T           startTime,\n                                          const real_T           finalTime,\n                                          const real_T           inStepSize,\n                                          const char_T           **errStatus,\n                                          StructLogVar           *var,\n                                          int_T                  maxRows,\n                                          int_T                  decimation,\n                                          real_T                 sampleTime,\n                                          const RTWLogSignalInfo *sigInfo)\n{\n    int_T                i, sigIdx;\n    SignalsStruct        *sig          = &(var->signals);\n    int_T                nSignals      = sigInfo->numSignals;\n    const int_T          *numCols      = sigInfo->numCols;\n    const int_T          *numDims      = sigInfo->numDims;\n    const int_T          *dims         = sigInfo->dims;\n    const BuiltInDTypeId *dTypes       = sigInfo->dataTypes;\n    const int_T          *cSgnls       = sigInfo->complexSignals;\n    const int_T          *fData        = sigInfo->frameData;\n    const char_T         **labels      = sigInfo->labels.cptr;\n    const int_T          *plotStyles   = sigInfo->plotStyles;\n    const char_T         *titles       = sigInfo->titles;\n    const int_T          *titleLen     = sigInfo->titleLengths;\n    const char_T         **blockNames  = sigInfo->blockNames.cptr;\n    const char_T         **stateNames  = sigInfo->stateNames.cptr;\n    const boolean_T      *crossMdlRef  = sigInfo->crossMdlRef;\n    void                 **currSigDims = sigInfo->currSigDims;\n    int_T                *currSigDimsSize = sigInfo->currSigDimsSize;\n    LogVar               *prevValues   = NULL;\n    int_T                dimsOffset    = 0;\n    boolean_T            *isVarDims    = sigInfo->isVarDims;\n    /* if any signal is variable-size, the field 'valueDimensions' is needed */\n    boolean_T            logValueDimensions = false;\n    const RTWLogDataTypeConvert *pDTConvInfo = sigInfo->dataTypeConvert;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    sig->numActiveFields = 1;\n    sig->numSignals      = nSignals;\n\n    sig->isVarDims = isVarDims;\n    /* check whether we need valueDimensions field*/\n    for (i=0; i<nSignals; i++){\n        if(isVarDims[i]){\n            logValueDimensions = true;\n            break;\n        }\n    }\n\n    /* values */\n    dimsOffset = 0;\n    for (i = 0; i < nSignals; i++) {\n        BuiltInDTypeId dt = (dTypes) ? dTypes[i] : SS_DOUBLE;\n        int_T          cs = (cSgnls) ? cSgnls[i] : 0;\n        int_T          fd = (fData)  ? fData[i]  : 0;\n        int_T          nd = (numDims) ? numDims[i] : 1;\n\n        const RTWLogDataTypeConvert *pDTConvInfoCur =\n                       (pDTConvInfo)  ? (pDTConvInfo+i)  : 0;\n\n        LogVar *values = NULL;\n        LogValDimsStat logValDimsStat;\n\n        if(!logValueDimensions){\n            logValDimsStat = NO_LOGVALDIMS;\n        }\n        else{\n            logValDimsStat = isVarDims[i] ? LOGVALDIMS_VARDIMS :  \n                                            LOGVALDIMS_EMPTYMX;\n        }\n\n        values = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                            inStepSize, errStatus,\n                                            &VALUES_FIELD_NAME,\n                                            dt, \n                                            pDTConvInfoCur,\n                                            0, cs, fd,\n                                            numCols[i],nd,\n                                            dims + dimsOffset,\n                                            logValDimsStat,\n                                            currSigDims + dimsOffset,\n                                            currSigDimsSize + dimsOffset,\n                                            maxRows,decimation,sampleTime, 0);\n\n        if (values == NULL) goto ERROR_EXIT;\n\n        if (sig->values == NULL) {\n            sig->values = values;\n        } else {\n            if (prevValues == NULL) goto ERROR_EXIT;\n            prevValues->next = values;\n        }\n        prevValues = values;\n        dimsOffset += nd;\n    }\n\n    if(logValueDimensions){\n        ++sig->numActiveFields;\n        sig->logValueDimensions = true;\n    }\n    else{\n        sig->logValueDimensions = false;\n    }\n\n    /* Dimensions */\n    {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            int_T nd = (numDims) ? numDims[i] : 1;\n            dataLen += nd;\n        }\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->dimensions = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->dimensions)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n          data[i] = dims[i]; /* cannot memcpy double <- int */\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->dimensions[i]);\n            int_T nd = (numDims) ? numDims[i] : 1;\n\n            (void)memcpy(mtxData->name, &DIMENSION_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = 1;\n            mtxData->nCols   = nd;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += nd;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* labels */\n    if (labels != NULL) {\n        unsigned short   *data;\n        size_t  nbytes;\n        int_T   dataLen    = 0;\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (labels[i] != NULL){\n                dataLen = dataLen + (int_T)strlen(labels[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->labels = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->labels)) + dataOffset);\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T labelLen = (labels[sigIdx]==NULL) ? 0 : (int_T)strlen(labels[sigIdx]);\n            for (i = 0; i < labelLen; i++) {\n                data[dataIdx++] = (uint8_T)labels[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->labels[i]);\n            int_T labelLen = (int_T)strlen(labels[i]);\n\n            (void)memcpy(mtxData->name, &LABEL_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (labelLen) ? 1 : 0;\n            mtxData->nCols   = labelLen;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += labelLen;\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* plot styles */\n    if (plotStyles != NULL) {\n        real_T         *data;\n        size_t\t       nbytes;\n        int_T          dataLen    = 0;\n        BuiltInDTypeId dTypeId    = rt_GetActualDTypeID(SS_DOUBLE);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t         dataOffset = nSignals*sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T         overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n        for (i=0; i< nSignals; i++) {\n            dataLen += numCols[i];\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(real_T);\n\n        if ( (sig->plotStyles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (real_T*) (((char_T*) (sig->plotStyles)) + dataOffset);\n\n        for (i = 0; i < dataLen; i++) {\n            data[i] = plotStyles[i];\n        }\n\n        dimsOffset = 0;\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->plotStyles[i]);\n            \n            (void)memcpy(mtxData->name, &PLOTSTYLE_FIELD_NAME, mxMAXNAM);\n\n            mtxData->nRows   = (numCols[i]) ? 1 : 0;\n            mtxData->nCols   = numCols[i];\n\n            mtxData->nDims   = numDims[i];\n            \n            if(mtxData->nDims > 2) {\n                if ((mtxData->dims = calloc(mtxData->nDims, sizeof(int_T))) == NULL) goto ERROR_EXIT;\n            } else {\n                mtxData->dims    = mtxData->_dims;\n            }\n            \n            mtxData->dims[0] = *(dims + dimsOffset);\n            if(mtxData->nDims >= 2) {\n                int32_T j;\n                for (j=1; j<mtxData->nDims; j++) {\n                    mtxData->dims[j] = *(dims + dimsOffset + j);\n                }\n            }\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = dTypeId;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(dTypeId);\n            mtxData->elSize  = rt_GetSizeofDataType(dTypeId);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data       += numCols[i];\n            dimsOffset += numDims[i];\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* titles */\n    if (titles != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen    = (int_T)strlen(titles);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        size_t  dataOffset = nSignals * sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T  overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->titles = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        /*LINTED E_BAD_PTR_CAST_ALIGN*/\n        data = (unsigned short*) (((char_T*) (sig->titles)) + dataOffset);\n        for (i = 0; i < dataLen; i++) {\n            data[i] = titles[i];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->titles[i]);\n\n            (void)memcpy(mtxData->name, &TITLE_FIELD_NAME, mxMAXNAM);\n            if (titleLen) {\n                mtxData->nRows   = (titleLen[i]) ? 1 : 0;\n                mtxData->nCols   = titleLen[i];\n            } else {\n                mtxData->nRows   = (dataLen) ? 1 : 0;\n                mtxData->nCols   = dataLen;\n            }\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += ((titleLen) ? titleLen[i] : dataLen);\n        }\n        ++sig->numActiveFields;\n    }\n\n    /* block names */\n    if (blockNames != NULL)     {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (blockNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(blockNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->blockNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->blockNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (blockNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(blockNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)blockNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->blockNames[i]);\n            int_T blockNameLen = (int_T)strlen(blockNames[i]);\n\n            (void)memcpy(mtxData->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (blockNameLen) ? 1 : 0;\n            mtxData->nCols   = blockNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += blockNameLen;\n        }\n        ++sig->numActiveFields;\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    } else {\n        if(logValueDimensions){\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtLocalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* state names */\n    if (stateNames != NULL) {\n        unsigned short  *data;\n        size_t nbytes;\n        int_T  dataLen = 0;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n        int_T  dataIdx = 0;\n\n        for (i=0;i<nSignals;i++) {\n            if (stateNames[i] != NULL) {\n                dataLen = dataLen + (int_T)strlen(stateNames[i]);\n            }\n        }\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (sig->stateNames = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (unsigned short*) (((char_T*) (sig->stateNames)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            int_T nameLen = (stateNames[sigIdx]==NULL) ? 0 : \n                (int_T)strlen(stateNames[sigIdx]);\n            for (i = 0; i < nameLen; i++) {\n                data[dataIdx++] = (uint8_T)stateNames[sigIdx][i];\n            }\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->stateNames[i]);\n            int_T stateNameLen = (int_T)strlen(stateNames[i]);\n\n            (void)memcpy(mtxData->name, &STATENAME_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = (stateNameLen) ? 1 : 0;\n            mtxData->nCols   = stateNameLen;\n\n            mtxData->nDims   = 1; /* assume */\n            mtxData->dims    = mtxData->_dims;\n            mtxData->dims[0] = mtxData->nCols;\n\n            mtxData->re      = data;\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_INT16;\n            mtxData->mxID    = mxCHAR_CLASS;\n            mtxData->elSize  = sizeof(short);\n            mtxData->logical = 0U;\n            mtxData->complex = 0U;\n\n            data += stateNameLen;\n        }\n        ++sig->numActiveFields;\n\n        if(logValueDimensions){\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames;\n        }\n        else{\n            sig->fieldNames = rtGlobalLoggingSignalsStructFieldNames_noValDims;\n        }\n\n    }\n\n    /* CrossMdlRef */\n    if (crossMdlRef != NULL) {\n        real_T  *data;\n        size_t nbytes;\n        size_t dataOffset = nSignals * sizeof(MatrixData);\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(real_T));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(real_T) - overhang);\n        }\n\n        nbytes = dataOffset + nSignals*sizeof(real_T);\n\n        if ( (sig->crossMdlRef = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        data = (real_T*) (((char_T*) (sig->crossMdlRef)) + dataOffset);\n\n        for(sigIdx=0;sigIdx<nSignals;sigIdx++) {\n            data[sigIdx] = crossMdlRef[sigIdx];\n        }\n\n        for (i = 0; i < nSignals; i++) {\n            MatrixData *mtxData = &(sig->crossMdlRef[i]);\n\n            (void)memcpy(mtxData->name, &CROSS_MDL_REF_FIELD_NAME, mxMAXNAM);\n            mtxData->nRows   = 1;\n            mtxData->nCols   = 1;\n            mtxData->nDims   = 1; /* => matlab scalar */\n\n            mtxData->re      = &data[i];\n            mtxData->im      = NULL;\n            mtxData->dTypeID = SS_DOUBLE;\n            mtxData->mxID    = rt_GetMxIdFromDTypeId(SS_DOUBLE);\n            mtxData->elSize  = sizeof(real_T);\n            mtxData->logical = matLOGICAL_BIT;\n            mtxData->complex = 0U;\n            mtxData->frameData = 0;\n            mtxData->frameSize = 1;\n        }\n        ++sig->numActiveFields;\n    }\n    \n    return(NULL); /* NORMAL_EXIT */\n\n  ERROR_EXIT:\n\n    (void)fprintf(stderr, \"*** Error creating signals structure \"\n                  \"in the struct log variable %s\\n\", var->name);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyLogVar(sig->values);\n    FREE(sig->labels);\n    FREE(sig->plotStyles);\n    FREE(sig->dimensions);\n    FREE(sig->titles);\n    FREE(sig->blockNames);\n    FREE(sig->stateNames);\n    FREE(sig->crossMdlRef);\n    return(*errStatus);\n\n} /* end rt_InitSignalsStruct */\n\n\n/* Function: local_CreateStructLogVar ==========================================\n * Abstract:\n *      Create a logging variable in the structure format.\n *\n * Returns:\n *      ~= NULL  => success, returns the log variable created.\n *      == NULL  => failure, error message set in the simstruct.\n */\nstatic StructLogVar *local_CreateStructLogVar(\n    RTWLogInfo              *li,\n    const real_T            startTime,\n    const real_T            finalTime,\n    const real_T            inStepSize,\n    const char_T            **errStatus,\n    const char_T            *varName,\n    boolean_T               logTime,\n    int_T                   maxRows,\n    int_T                   decimation,\n    real_T                  sampleTime,\n    const RTWLogSignalInfo  *sigInfo,\n    const char_T            *blockName)\n{\n    StructLogVar *var;\n    LogInfo      *logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ( (var = calloc(1, sizeof(StructLogVar))) == NULL ) goto ERROR_EXIT;\n\n    var->numActiveFields = 2;\n\n    /* Setup the structure name using varName and nameModifier */\n    rt_LoadModifiedLogVarName(li,varName,var->name);\n\n    /* time field */\n    if (logTime) {\n        /* need to create a LogVar to log time */\n        int_T dims = 1;\n        var->time = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                               inStepSize, errStatus,\n                                               &TIME_FIELD_NAME, SS_DOUBLE, \n                                               NULL,\n                                               0, 0, 0, 1,\n                                               1, &dims, NO_LOGVALDIMS, \n                                               NULL, NULL, maxRows,\n                                               decimation, sampleTime, 0);\n        if (var->time == NULL) goto ERROR_EXIT;\n    } else {\n        /* create a dummy MatrixData to write out time as an empty matrix */\n        BuiltInDTypeId dt     = rt_GetActualDTypeID(SS_DOUBLE);\n        size_t         nbytes = sizeof(MatrixData);\n        MatrixData     *time;\n\n        if ( (var->time = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n        time = var->time;\n\n        (void)memcpy(time->name, &TIME_FIELD_NAME, mxMAXNAM);\n        time->nRows   = 0;\n        time->nCols   = 0;\n        time->nDims   = 0;\n        time->re      = NULL;\n        time->im      = NULL;\n        time->dTypeID = dt;\n        time->mxID    = rt_GetMxIdFromDTypeId(dt);\n        time->elSize  = rt_GetSizeofDataType(dt);\n        time->logical = 0U;\n        time->complex = 0U;\n    }\n    var->logTime = logTime;\n\n    /* signals field */\n    if (sigInfo) {\n        if (rt_InitSignalsStruct(li,startTime,finalTime,inStepSize,errStatus,\n                                 var,maxRows,decimation,sampleTime,sigInfo)) {\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* blockName Field */\n    if (blockName != NULL) {\n        int_T  dataLen = (int_T)strlen(blockName);\n        size_t nbytes;\n        size_t dataOffset = sizeof(MatrixData);\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        uint_T overhang   = (uint_T)(dataOffset % sizeof(short));\n\n        if (overhang) {                           /* polyspace DEFECT:DEAD_CODE [Not a defect:Unset] \n                                                    \"Needed for possible padding determination. */\n            dataOffset += (sizeof(short) - overhang);\n        }\n        /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n        nbytes = dataOffset + dataLen*sizeof(short);\n\n        if ( (var->blockName = calloc(nbytes, 1)) == NULL ) goto ERROR_EXIT;\n\n        (void)memcpy(var->blockName->name, &BLOCKNAME_FIELD_NAME, mxMAXNAM);\n        var->blockName->nRows   = (dataLen) ? 1 : 0;\n        var->blockName->nCols   = dataLen;\n\n        var->blockName->nDims   = 1;\n        var->blockName->dims    = var->blockName->_dims;\n        var->blockName->dims[0] = dataLen;\n        {\n            /*LINTED E_BAD_PTR_CAST_ALIGN*/\n            unsigned short *data = (unsigned short*)(((char_T*) (var->blockName))+dataOffset);\n            int_T   i;\n\n            for (i=0; i<dataLen; i++) {\n                data[i] = (uint8_T)blockName[i];\n            }\n            var->blockName->re  = data;\n        }\n        var->blockName->im      = NULL;\n        var->blockName->dTypeID = SS_INT16;\n        var->blockName->mxID    = mxCHAR_CLASS;\n        var->blockName->elSize  = sizeof(short);\n        var->blockName->logical = 0U;\n        var->blockName->complex = 0U;\n\n        ++var->numActiveFields;\n    }\n\n    /* Add this struct log var to the linked list in log info */\n    {\n        StructLogVar *list = logInfo->structLogVarsList;\n\n        if (list != NULL) {\n            while (list->next != NULL) {\n                list = list->next;\n            }\n            list->next = var;\n        } else {\n            logInfo->structLogVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Error creating log variable %s\\n\", varName);\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    rt_DestroyStructLogVar(var);\n    return(NULL);\n\n} /* end local_CreateStructLogVar */\n\n\n/* Function: rt_StartDataLoggingForOutput ======================================\n * Abstract:\n */\nstatic const char_T *rt_StartDataLoggingForOutput(RTWLogInfo   *li,\n                                                  const real_T startTime,\n                                                  const real_T finalTime,\n                                                  const real_T stepSize,\n                                                  const char_T **errStatus)\n{\n    const char_T   *varName;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    LogInfo *       logInfo;\n    logInfo = rtliGetLogInfo(li);\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    /* outputs */\n    varName = rtliGetLogY(li);\n    if (varName[0] != '\\0') {\n        int_T                  i;\n        int_T                  ny;\n        int_T                  yIdx;\n        char_T                 name[mxMAXNAM];\n        const char_T           *cp        = strchr(varName,',');\n        LogSignalPtrsType      ySigPtrs   = rtliGetLogYSignalPtrs(li);\n        const RTWLogSignalInfo *yInfo     = rtliGetLogYSignalInfo(li);\n\n        /* count the number of variables (matrices or structures) to create */\n        for (ny=1; cp != NULL; ny++) {\n            cp = strchr(cp+1,',');\n        }\n        logInfo->ny = ny;\n\n        if (logFormat==0) {\n            if ( (logInfo->y = calloc(ny,sizeof(LogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        } else {\n            if ( (logInfo->y = calloc(ny,sizeof(StructLogVar*))) == NULL ) {\n                *errStatus = rtMemAllocError;\n                goto ERROR_EXIT;\n            }\n        }\n\n        for (i = yIdx = 0, cp = varName; i < ny; i++) {\n            int_T        len;\n            const char_T *cp1 = strchr(cp+1,',');\n\n            if (cp1 != NULL) {\n                /*LINTED E_ASSIGN_INT_TO_SMALL_INT*/\n                len = (int_T)(cp1 - cp);\n                if (len >= mxMAXNAM) len = mxMAXNAM - 1;\n            } else {\n                len = mxMAXNAM - 1;\n            }\n            (void)strncpy(name, cp, len);\n            name[len] = '\\0';\n\n            if (ny > 1 && ySigPtrs[i] == NULL) {\n                goto NEXT_NAME;\n            }\n\n            if (logFormat == 0) {\n                int            numCols;\n                int            nDims;\n                const int      *dims;\n                BuiltInDTypeId dataType;\n                int            isComplex;\n\n                if (ny == 1) {\n                    int_T op;\n\n                    numCols = yInfo[0].numCols[0];\n                    for (op = 1; op < yInfo[0].numSignals; op++) {\n                        numCols += yInfo[0].numCols[op];\n                    }\n                    /*\n                     * If we have only one \"matrix\" outport,\n                     * we can still log it as a matrix\n                     */\n                    if (yInfo[0].numSignals == 1) {\n                        nDims = yInfo[0].numDims ? yInfo[0].numDims[0] : 1;\n                        dims  = yInfo[0].dims;\n                    } else {\n                        nDims = 1;\n                        dims  = &numCols;\n                    }\n\n                    dataType  = yInfo[0].dataTypes[0];\n                    isComplex = yInfo[0].complexSignals[0];\n                } else {\n                    numCols   = yInfo[yIdx].numCols[0];\n                    nDims     = yInfo[yIdx].numDims ? yInfo[yIdx].numDims[0] : 1;\n                    dims      = yInfo[yIdx].dims;\n                    dataType  = yInfo[yIdx].dataTypes[0];\n                    isComplex = yInfo[yIdx].complexSignals[0];\n                }\n\n                logInfo->y[yIdx] = rt_CreateLogVarWithConvert(\n                    li, startTime, finalTime,\n                    stepSize, errStatus,\n                    name,\n                    dataType,\n                    yInfo[yIdx].dataTypeConvert,\n                    0,isComplex,\n                    0,numCols,nDims,dims,\n                    NO_LOGVALDIMS, NULL, NULL,\n                    maxRows,decimation,\n                    sampleTime,1);\n                if (logInfo->y[yIdx] == NULL)  goto ERROR_EXIT;\n            } else {\n                logInfo->y[yIdx] = local_CreateStructLogVar(li, startTime,\n                                                            finalTime, stepSize,\n                                                            errStatus, name,\n                                                            logTime, maxRows,\n                                                            decimation, sampleTime,\n                                                            &yInfo[yIdx], NULL);\n                if (logInfo->y[yIdx] == NULL) goto ERROR_EXIT;\n            }\n            ++yIdx;\n        NEXT_NAME:\n            cp = cp1;\n            if (cp != NULL && *cp == ',') cp++;\n        }\n    }\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) { /* polyspace DEFECT:USELESS_IF [No action planned:Unset] \n                     \"Defense coding.\" */\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo->y);\n        logInfo->y = NULL;\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingForOutput */\n\n\n/* Function: rt_ReallocLogVar ==================================================\n * Abstract:\n *   Allocate more memory for the data buffers in the log variable.\n *   Exit if unable to allocate more memory.\n */\nstatic void rt_ReallocLogVar(LogVar *var, boolean_T isVarDims)\n{\n    void *tmp;\n    int_T nCols = var->data.nCols;\n    int_T nRows;\n    size_t elSize = var->data.elSize;\n\n    if (isVarDims)\n    {\n        nRows = var->data.nRows + DEFAULT_BUFFER_SIZE;\n    }\n    else\n    {\n        nRows = var->data.nRows == 0 ? 1 : 2*var->data.nRows;\n    }\n    \n    tmp = realloc(var->data.re, nRows*nCols*elSize);\n    if (tmp == NULL) {\n        (void)fprintf(stderr,\n                      \"*** Memory allocation error.\\n\");\n        (void)fprintf(stderr, \"\"\n                      \"    varName          = %s%s\\n\"\n                      \"    nRows            = %d\\n\"\n                      \"    nCols            = %d\\n\"\n                      \"    elementSize      = %lu\\n\"\n                      \"    Current Size     = %.16g\\n\"\n                      \"    Failed resize    = %.16g\\n\\n\",\n                      var->data.name,\n                      var->data.complex ? \" (real part)\" : \"\",\n                      var->data.nRows,\n                      var->data.nCols,\n                      (unsigned long)  var->data.elSize,\n                      (double)nRows*nCols*elSize,\n                      (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n        exit(1);\n    }\n    var->data.re = tmp;\n\n    if (var->data.complex) {\n        tmp = realloc(var->data.im, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s (complex part)\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->data.name,\n                          var->data.nRows,\n                          var->data.nCols,\n                          (unsigned long)  var->data.elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n        var->data.im = tmp;\n    }\n    var->data.nRows = nRows;\n\n    /* Also reallocate memory for \"valueDimensions\" \n       when logging the variable-size signal\n    */\n    if(isVarDims){\n        int_T k;\n        \n        nCols = var->valDims->nCols;\n        nRows = var->valDims->nRows + DEFAULT_BUFFER_SIZE;\n        elSize = sizeof(real_T);\n        tmp = realloc(var->valDims->dimsData, nRows*nCols*elSize);\n        if (tmp == NULL) {\n            (void)fprintf(stderr,\n                          \"*** Memory allocation error.\\n\");\n            (void)fprintf(stderr, \"\"\n                          \"    varName          = %s\\n\"\n                          \"    nRows            = %d\\n\"\n                          \"    nCols            = %d\\n\"\n                          \"    elementSize      = %lu\\n\"\n                          \"    Current Size     = %.16g\\n\"\n                          \"    Failed resize    = %.16g\\n\\n\",\n                          var->valDims->name,\n                          var->valDims->nRows,\n                          var->valDims->nCols,\n                          (unsigned long)  elSize,\n                          (double)nRows*nCols*elSize,\n                          (double)(nRows+DEFAULT_BUFFER_SIZE)*nCols*elSize);\n            exit(1);\n        }\n\n        /*\n         * valueDimensions data is stored in array format and must be\n         * adjusted after reallocation (see also rt_FixupLogVar())\n         *\n         * Example: maxRows = 4; nRows = 4; nDims = 3;\n         * Before realloc of the logVar, the locations of data are as below:\n         * (x, y, z -- useful data / o -- junk, don't care)\n         * a[0] = x    a[4] = y    a[8] = z\n         * a[1] = x    a[5] = y    a[9] = z\n         * a[2] = x    a[6] = y    a[10]= z\n         * a[3] = x    a[7] = y    a[11]= z\n         *\n         * After realloc of the logVar (suppose 2 extra rows are added),\n         * the locations of data are as below:\n         * a[0] = x    a[6] = y    a[12]= o\n         * a[1] = x    a[7] = y    a[13]= o\n         * a[2] = x    a[8] = z    a[14]= o\n         * a[3] = x    a[9] = z    a[15]= o\n         * a[4] = y    a[10]= z    a[16]= o\n         * a[5] = y    a[11]= z    a[17]= o\n         *\n         * The data must be adjusted as below:\n         * a[0] = x    a[6] = y    a[12]= z\n         * a[1] = x    a[7] = y    a[13]= z\n         * a[2] = x    a[8] = y    a[14]= z\n         * a[3] = x    a[9] = y    a[15]= z\n         * a[4] = o    a[10]= o    a[16]= o\n         * a[5] = o    a[11]= o    a[17]= o\n         */\n        for(k = var->data.nDims-1; k > 0; k--){\n            (void) memcpy((real_T*)tmp + k*nRows, \n                          (real_T*)tmp + k*var->valDims->nRows,\n                          elSize * var->valDims->nRows);\n        }\n\n        var->valDims->dimsData = tmp;\n        var->valDims->nRows = nRows;\n    }\n\n} /* end rt_ReallocLogVar */\n\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs);\n                                             \n/* Function: rt_UpdateLogVarWithDiscontinuousData ==============================\n * Abstract:\n *      Log one row of the LogVar with data that is not contiguous.\n */\nconst char_T *rt_UpdateLogVarWithDiscontiguousData(LogVar                 *var,\n                                             int8_T**               data,\n                                             const int_T            *segmentLengths,\n                                             int_T                  nSegments,\n                                             RTWPreprocessingFcnPtr *preprocessingPtrs)\n{\n    size_t elSize = 0;\n    size_t offset = 0;\n    int    segIdx = 0;\n\n    if (++var->numHits % var->decimation) return(NULL);\n    var->numHits = 0;\n\n    /*\n     * Reallocate or wrap the LogVar\n     */\n    if (var->rowIdx == var->data.nRows) {\n        if (var->okayToRealloc == 1) {\n            rt_ReallocLogVar(var, false);\n        } else {\n            /* Circular buffer */\n            var->rowIdx = 0;\n            ++(var->wrapped); /* increment the wrap around counter */\n        }\n    }\n\n    /* This function is only used to log states, there's no var-dims issue. */\n    elSize = var->data.elSize;\n    offset = (size_t)(elSize * var->rowIdx * var->data.nCols);\n\n    if (var->data.complex) {\n        char_T *dstRe = (char_T*)(var->data.re) + offset;\n        char_T *dstIm = (char_T*)(var->data.im) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            int_T         nEl  = segmentLengths[segIdx];\n            char_T *src        = (char_T *)data[segIdx];\n            int_T         el;\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(elSize * nEl * 2);\n                preprocessingPtr(src, (void *)data[segIdx]);\n            }\n\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);\n            }\n            else {\n                for (el = 0; el < nEl; el++) {\n                    (void)memcpy(dstRe, src, elSize);\n                    dstRe += elSize;   src += elSize;\n                    (void)memcpy(dstIm, src, elSize);\n                    dstIm += elSize;   src += elSize;\n                }\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    } else {\n        char_T *dst = (char_T*)(var->data.re) + offset;\n\n        for (segIdx = 0; segIdx < nSegments; segIdx++) {\n            size_t      segSize = elSize*segmentLengths[segIdx];\n            char_T *src         = (void *) data[segIdx];\n\n            /* preprocess data in-place before logging */\n            RTWPreprocessingFcnPtr preprocessingPtr = preprocessingPtrs[segIdx];\n            if (preprocessingPtr != NULL) {\n                src = malloc(segSize);\n                preprocessingPtr(src, data[segIdx]);\n            }\n            if (src == NULL) {\n                const char_T *errorMessage = \"Could not allocate memory for logging.\";\n                fprintf(stderr,\"%s.\\n\", errorMessage);\n                return(errorMessage);            }\n            else {\n                (void)memcpy(dst, src, segSize);\n                dst += segSize;\n            }\n\n            /* free temporarily declared data */\n            if (preprocessingPtr != NULL) {\n                free( src );\n            }\n        }\n    }\n\n    ++var->rowIdx;\n    return(NULL);\n\n} /* end rt_UpdateLogVarWithDiscontinuousData */\n\n\n/*==================*\n * Visible routines *\n *==================*/\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_CreateLogVarWithConvert ========================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVarWithConvert(\n    RTWLogInfo        *li,\n    const real_T      startTime,\n    const real_T      finalTime,\n    const real_T      inStepSize,\n    const char_T      **errStatus,\n    const char_T      *varName,\n    BuiltInDTypeId    inpDataTypeID,\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo,\n    int_T             logical,\n    int_T             complex,\n    int_T             frameData,\n    int_T             nCols,\n    int_T             nDims,\n    const int_T       *dims,\n    LogValDimsStat    logValDimsStat,\n    void              **currSigDims,\n    int_T             *currSigDimsSize,\n    int_T             maxRows,\n    int_T             decimation,\n    real_T            sampleTime,\n    int_T             appendToLogVarsList)\n{\n    int_T          usingDefaultBufSize = 0;\n#ifdef NO_LOGGING_REALLOC\n    int_T          okayToRealloc       = 0;\n#else\n    int_T          okayToRealloc       = 1;\n#endif\n    LogVar         *var                = NULL;\n    /*inpDataTypeID is the rt_LoggedOutputDataTypeId*/\n    BuiltInDTypeId dTypeID             = (BuiltInDTypeId)inpDataTypeID; \n    size_t         elementSize         = rt_GetSizeofDataType(dTypeID);\n    int_T          frameSize;\n    int_T          nRows;\n    int_T          nColumns;\n\n    /*===================================================================*\n     * Determine the frame size if the data is frame based               *\n     *===================================================================*/\n    frameSize = frameData ? dims[0] : 1;\n\n    /*===================================================================*\n     * Calculate maximum number of rows needed in the buffer             *\n     *===================================================================*/\n\n    if (finalTime > startTime && finalTime != rtInf) {\n        real_T nPoints;            /* Tfinal is finite  ===>  nRows can be  */\n        real_T stepSize;           /* computed since the StepSize is fixed  */\n\n        if (sampleTime == -2.0) {  /* The signal being logged is constant,  *\n                                    * Hence, only one data point is logged. */\n            stepSize = finalTime;\n        } else if (sampleTime == -1.0 || sampleTime == 0.0) {\n                                /* Signal being logged is either inside a    *\n                                 * triggered sub-system or it is continuous. */\n            stepSize = inStepSize;\n        } else {                /* Discrete signal */\n            stepSize = sampleTime;\n        }\n\n        if (stepSize == 0.0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {\n            nPoints = 1.0 + floor((finalTime-startTime)/stepSize);\n\n            /*\n             * Add one more data point if needed.\n             */\n            if ( stepSize*(nPoints-1.0) < (finalTime-startTime) ) {\n                nPoints += 1.0;\n            }\n\n            /*\n             * Actual number of points to log = nPoints * size of\n             * each frame if data is frame-based\n             */\n            nPoints = frameData ? (nPoints * frameSize) : nPoints;\n\n            nPoints /= decimation;\n            if (nPoints != floor(nPoints)) {\n                nPoints += 1.0;\n            }\n            nRows = (nPoints <= INT_MAX) ? ((int_T) nPoints) : INT_MAX;\n        }\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (finalTime == startTime) {\n        /*\n         * Number of rows to log is equal to 1 if not frame-based and\n         * equal to frame size if frame-based\n         */\n        nRows = frameData ? frameSize : 1;\n\n        /*\n         * If maxRows is specified, and if this number is less\n         * than the number we computed (nRows) then use maxRows.\n         */\n        if ((maxRows > 0) && (maxRows < nRows)) {\n            nRows = maxRows;\n            okayToRealloc = 0;\n        }\n    } else if (maxRows > 0) {     /* maxRows is specified => nRows=maxRows  */\n        nRows = maxRows;\n        okayToRealloc = 0;\n    } else {\n\n        if (inStepSize == 0) {\n            /* small initial value, so as to exercise the realloc code */\n            nRows = maxRows+1;\n            okayToRealloc = 1;\n        } else {                    /* Use a default value for nRows          */\n            usingDefaultBufSize = 1;\n            nRows = DEFAULT_BUFFER_SIZE;\n            okayToRealloc = 0;  /* No realloc with infinite stop time */\n            (void)fprintf(stdout, \"*** Using a default buffer of size %d for \"\n                          \"logging variable %s\\n\", nRows, varName);\n        }\n    }\n\n    /*\n     * Figure out the number of columns that the log variable should have.\n     * If the data is not frame based, then number of columns should equal\n     * nCols that is provided as input to the function. If the data is\n     * frame-based, then the number of columns should be equal to the\n     * number of channels = nCols/frameSize = dims[1];\n     */\n    nColumns = frameData ? dims[1] : nCols;\n\n    /*\n     * Error out if the size of the circular buffer is absurdly large, this\n     * error message is more informative than the one we get when we try to\n     * malloc this many number of bytes in one fell swoop.\n     */\n    {\n        double tmpDbl = ((double)elementSize)*((double)nRows)*\n                                              ((double)nColumns);\n\n        if (tmpDbl >= UINT_MAX) {\n            (void)fprintf(stderr,\n                          \"\\n*** Memory required to log variable '%s' is too\"\n                          \"\\n    big. Use the 'Limit rows to last:' and (or)\"\n                          \"\\n    'Decimation:' options to reduce the required\"\n                          \"\\n    memory size.\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Required  = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long)\n                          elementSize, tmpDbl);\n            goto ERROR_EXIT;\n        }\n    }\n\n    /* Allocate memory for the log variable */\n    if ( (var = calloc(1, sizeof(LogVar))) == NULL ) {\n        (void)fprintf(stderr, \"*** Error allocating memory for logging %s\\n\",\n                      varName);\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer (real part) */\n    if ( (var->data.re = malloc(nRows*nColumns*elementSize)) == NULL ) {\n        (void)fprintf(stderr,\n                      \"*** Error allocating memory for the circular buffer\\n\");\n        (void)fprintf(stderr, \"*** Details:\\n\"\n                      \"       varName         = %s\\n\"\n                      \"       nRows           = %d\\n\"\n                      \"       nCols           = %d\\n\"\n                      \"       elementSize     = %lu\\n\"\n                      \"       Bytes Requested = %.16g\\n\\n\",\n                      varName, nRows, nColumns, (unsigned long) elementSize,\n                      ((double)elementSize)*((double)nRows)*((double)nColumns));\n        goto ERROR_EXIT;\n    }\n\n    /* Allocate memory for the circular buffer for the imaginary part */\n    if (complex) {\n        if ( (var->data.im = malloc(nRows*nColumns*elementSize)) == NULL ) {\n            (void)fprintf(stderr,\n                          \"*** Error allocating memory for the circular buffer \"\n                          \"for logging the imaginary part of %s\\n\", varName);\n            (void)fprintf(stderr, \"*** Details:\\n\"\n                          \"       varName         = %s\\n\"\n                          \"       nRows           = %d\\n\"\n                          \"       nCols           = %d\\n\"\n                          \"       elementSize     = %lu\\n\"\n                          \"       Bytes Requested = %.16g\\n\\n\",\n                          varName, nRows, nColumns, (unsigned long) elementSize,\n                          ((double)elementSize)*((double)nRows)*\n                                                 ((double)nColumns));\n            goto ERROR_EXIT;\n        }\n    }\n    /*\n     * Initialize the fields in LogVar structure.\n     */\n    if (appendToLogVarsList) {\n        rt_LoadModifiedLogVarName(li,varName,var->data.name);\n    } else {\n        var->data.name[mxMAXNAM-1] = '\\0';\n        (void)strncpy(var->data.name,varName,mxMAXNAM-1);\n    }\n    var->data.nCols           = nColumns;\n    var->data.nRows           = nRows;\n\n    var->data.nDims           = frameData ? 1 : nDims;\n    if (var->data.nDims > 2) {\n        var->data.dims = (int_T*)malloc(sizeof(int_T)*var->data.nDims);\n    } else {\n        var->data.dims = var->data._dims;\n    }\n    if (frameData) {\n        var->data.dims[0] = nColumns;\n    } else {\n        /*LINTED E_CAST_INT_TO_SMALL_INT*/\n        (void)memcpy(var->data.dims, dims, (size_t)(nDims*sizeof(int_T)));\n    }\n\n    var->data.dTypeID         = dTypeID;\n    var->data.elSize          = elementSize;\n\n    var->data.dataTypeConvertInfo = rt_GetDataTypeConvertInfo(\n        pDataTypeConvertInfo, dTypeID);\n\n    var->data.mxID            = rt_GetMxIdFromDTypeId(dTypeID);\n    /* over-ride logical bit if data type is boolean */\n    logical = dTypeID == SS_BOOLEAN ? 1 : 0;\n    var->data.logical         = (logical)   ? matLOGICAL_BIT : 0x0;\n    var->data.complex         = (complex)   ? matCOMPLEX_BIT : 0x0;\n    var->data.frameData       = frameData;\n    var->data.frameSize       = (frameData) ? frameSize : 1;\n\n    /* fill up valDims field */\n    if(logValDimsStat == NO_LOGVALDIMS){\n        /* All signals are fixed-size, no need to log valueDimensions field */\n        var->valDims     = NULL;\n        /* Set these pointers to NULLs in this case */\n        var->coords      = NULL;\n        var->strides     = NULL;\n        var->currStrides = NULL;\n    }\n    else{\n        if ( (var->valDims = calloc(1, sizeof(ValDimsData))) == NULL ) {\n            goto ERROR_EXIT;\n        }\n\n        (void)memcpy(var->valDims->name, &VALUEDIMENSIONS_FIELD_NAME, mxMAXNAM);\n\n        if (logValDimsStat == LOGVALDIMS_EMPTYMX) {\n            /* At least one signal is variable-size, \n               but the current signal is fixed-size. \n               Therefore, create a dummy MatrixData to write out valueDimensions \n               as an empty matrix. \n            */\n            var->valDims->nRows = 0;\n            var->valDims->nCols = 0;\n            var->valDims->currSigDims = NULL;\n            var->valDims->currSigDimsSize = NULL;\n            var->valDims->dimsData = NULL;\n            /* Set these pointers to NULLs in this case */\n            var->coords      = NULL;\n            var->strides     = NULL;\n            var->currStrides = NULL;\n        } else { /* The current signal is a variable-size signal. */\n            /* The \"valueDimensions\" must be double, so re-assign element size */\n            elementSize = sizeof(real_T);\n\n            /* When signals are frame-based, 'valueDimensions' has 1 column */\n            if(frameData){\n                /* When signal is frame-based, the first dimension is always fixed, \n                   so we only need to record the second dimension.\n                   e.g. Two frame-based signals [10x4] and [10x3], \n                   'valueDimensions' and 'currSigDims'\n                   only record 4 or 3.\n                */\n                nColumns = 1;\n                var->valDims->currSigDims = (void**) (currSigDims + 1);\n                var->valDims->currSigDimsSize = (int_T*) (currSigDimsSize + 1);\n            } else { /* non-frame based */\n                nColumns = nDims;\n                var->valDims->currSigDims = (void**) currSigDims;\n                var->valDims->currSigDimsSize = (int_T*) currSigDimsSize;\n            }\n            \n            /* Allocate memory for the circular buffer */\n            if ( (var->valDims->dimsData = malloc(nRows*nColumns*elementSize)) == NULL ) {\n                (void)fprintf(stderr,\n                              \"*** Error allocating memory for the circular buffer\\n\");\n                (void)fprintf(stderr, \"*** Details:\\n\"\n                              \"       varName         = %s\\n\"\n                              \"       nRows           = %d\\n\"\n                              \"       nCols           = %d\\n\"\n                              \"       elementSize     = %lu\\n\"\n                              \"       Bytes Requested = %.16g\\n\\n\",\n                              var->valDims->name, nRows, nColumns, (unsigned long) elementSize,\n                              ((double)elementSize)*((double)nRows)*((double)nColumns));\n                goto ERROR_EXIT;\n            }\n            var->valDims->nRows = nRows;\n            var->valDims->nCols = nColumns;\n\n            /* Allocate memory for these dynamic arrays */\n            {\n                size_t nbytes = var->data.nDims*sizeof(int_T);\n                if( ((var->coords = calloc(nbytes, 1)) == NULL)\n                    ||((var->strides = calloc(nbytes, 1)) == NULL)\n                    ||((var->currStrides = calloc(nbytes, 1)) == NULL) )\n                    goto ERROR_EXIT;\n            }\n        }\n    }\n\n    var->rowIdx               = 0;\n    var->wrapped              = 0;\n    var->nDataPoints          = 0;\n    var->usingDefaultBufSize  = usingDefaultBufSize;\n    var->okayToRealloc        = okayToRealloc;\n    var->decimation           = decimation;\n    var->numHits              = -1;  /* so first point gets logged */\n\n    /* Add this log var to list in log info, if necessary */\n    if (appendToLogVarsList) {\n        LogInfo *logInfo = (LogInfo*) rtliGetLogInfo(li);\n        LogVar  *varList = logInfo->logVarsList;\n\n        if (varList != NULL) {\n            while (varList->next != NULL) {\n                varList = varList->next;\n            }\n            varList->next = var;\n        } else {\n            logInfo->logVarsList = var;\n        }\n    }\n\n    return(var); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    \n    *errStatus = rtMemAllocError;\n    rt_DestroyLogVar(var);\n    return(NULL);\n\n} /* end rt_CreateLogVarWithConvert */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateLogVar ===================================================\n * Abstract:\n *\tCreate a logging variable.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nLogVar *rt_CreateLogVar(RTWLogInfo        *li,\n                               const real_T      startTime,\n                               const real_T      finalTime,\n                               const real_T      inStepSize,\n                               const char_T      **errStatus,\n                               const char_T      *varName,\n                               BuiltInDTypeId    inpDataTypeID,\n                               int_T             logical,\n                               int_T             complex,\n                               int_T             frameData,\n                               int_T             nCols,\n                               int_T             nDims,\n                               const int_T       *dims,\n                               LogValDimsStat    logValDimsStat,\n                               void              **currSigDims,\n                               int_T             *currSigDimsSize,\n                               int_T             maxRows,\n                               int_T             decimation,\n                               real_T            sampleTime,\n                               int_T             appendToLogVarsList)\n{\n    const RTWLogDataTypeConvert *pDataTypeConvertInfo = NULL;\n\n    return rt_CreateLogVarWithConvert(li,\n                                      startTime,\n                                      finalTime,\n                                      inStepSize,\n                                      errStatus,\n                                      varName,\n                                      inpDataTypeID,\n                                      pDataTypeConvertInfo,\n                                      logical,\n                                      complex,\n                                      frameData,\n                                      nCols,\n                                      nDims,\n                                      dims,\n                                      logValDimsStat,\n                                      currSigDims,\n                                      currSigDimsSize,\n                                      maxRows,\n                                      decimation,\n                                      sampleTime,\n                                      appendToLogVarsList);\n\n} /* end rt_CreateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_CreateStructLogVar =============================================\n * Abstract:\n *\tCreate a logging variable in the structure format.\n *\n * Returns:\n *\t~= NULL  => success, returns the log variable created.\n *\t== NULL  => failure, error message set in the simstruct.\n */\nStructLogVar *rt_CreateStructLogVar(RTWLogInfo              *li,\n                                           const real_T            startTime,\n                                           const real_T            finalTime,\n                                           const real_T            inStepSize,\n                                           const char_T            **errStatus,\n                                           const char_T            *varName,\n                                           boolean_T               logTime,\n                                           int_T                   maxRows,\n                                           int_T                   decimation,\n                                           real_T                  sampleTime,\n                                           const RTWLogSignalInfo  *sigInfo,\n                                           const char_T            *blockName)\n{\n\n    return( local_CreateStructLogVar(li,\n                                     startTime,\n                                     finalTime,\n                                     inStepSize,\n                                     errStatus,\n                                     varName,\n                                     logTime,\n                                     maxRows,\n                                     decimation,\n                                     sampleTime,\n                                     sigInfo,\n                                     blockName));\n\n} /* end rt_CreateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_StartDataLoggingWithStartTime ==================================\n * Abstract:\n *      Initialize data logging info based upon the following settings cached\n *      in the RTWLogging data structure of the SimStruct.\n *\n * Return value is:\n *\t== NULL  => success\n *\t!= NULL  => failure (the return value is a pointer that points to the\n *                           error message, which is also set in the simstruct)\n */\nconst char_T *rt_StartDataLoggingWithStartTime(RTWLogInfo   *li,\n                                                      const real_T startTime,\n                                                      const real_T finalTime,\n                                                      const real_T stepSize,\n                                                      const char_T **errStatus)\n{\n    const char_T   *varName;\n    LogInfo        *logInfo;\n    real_T         sampleTime = stepSize;\n    int_T          maxRows    = rtliGetLogMaxRows(li);\n    int_T          decimation = rtliGetLogDecimation(li);\n    int_T          logFormat  = rtliGetLogFormat(li);\n    boolean_T      logTime    = (logFormat==2) ? 1 : 0;\n\n    /* reset error status */\n    *errStatus = NULL;\n\n    if ((logInfo=calloc(1,sizeof(LogInfo))) == NULL) {\n        *errStatus = rtMemAllocError;\n        goto ERROR_EXIT;\n    }\n    rtliSetLogInfo(li, (void*)logInfo);\n\n    /* time */\n    varName = rtliGetLogT(li);\n    if (varName[0] != '\\0') {\n        int_T dims = 1;\n        logInfo->t = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                stepSize, errStatus,\n                                                varName,SS_DOUBLE,\n                                                NULL,\n                                                0,0,0,1,1,\n                                                &dims, NO_LOGVALDIMS, NULL, NULL,\n                                                maxRows,decimation,\n                                                sampleTime,1);\n        if (logInfo->t == NULL) goto ERROR_EXIT;\n    }\n\n    /* states */\n    if ( rtliGetLogX(li)[0] != '\\0' ||  rtliGetLogXFinal(li)[0] != '\\0' ) {\n        const RTWLogSignalInfo  *xInfo = rtliGetLogXSignalInfo(li);\n\n        if (logFormat == 0) {                                /* Matrix Format */\n            int            numCols;\n            int            nDims;\n            const int      *dims;\n            BuiltInDTypeId dataType;\n            int            isComplex;\n            int_T          sIdx;\n\n            const RTWLogDataTypeConvert *pDTConvInfo;\n\n            numCols = xInfo[0].numCols ? xInfo[0].numCols[0] : 0;\n            for (sIdx = 1; sIdx < xInfo[0].numSignals; sIdx++) {\n                numCols += xInfo[0].numCols[sIdx];\n            }\n            /* If we have only one \"matrix\" state, we can log as a matrix */\n            if (xInfo[0].numSignals == 1) {\n                nDims     = xInfo[0].numDims ? xInfo[0].numDims[0] : 1;\n                dims      = xInfo[0].dims;\n            } else {\n                nDims     = 1;\n                dims      = &numCols;\n            }\n            dataType  = xInfo[0].dataTypes ? xInfo[0].dataTypes[0] : 0;\n            isComplex = xInfo[0].complexSignals ? xInfo[0].complexSignals[0] : 0;\n\n            pDTConvInfo = xInfo[0].dataTypeConvert;\n\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                        stepSize, errStatus,\n                                                        rtliGetLogX(li),dataType,\n                                                        pDTConvInfo,\n                                                        0,\n                                                        isComplex,0,numCols,nDims,dims,\n                                                        NO_LOGVALDIMS, NULL, NULL,\n                                                        maxRows,decimation,sampleTime,1);\n                if (logInfo->x == NULL)  goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = rt_CreateLogVarWithConvert(li, startTime, finalTime,\n                                                             stepSize, errStatus,\n                                                             rtliGetLogXFinal(li),dataType,\n                                                             pDTConvInfo,\n                                                             0,isComplex,0,numCols,nDims,\n                                                             dims, NO_LOGVALDIMS, NULL, \n                                                             NULL, 1,decimation,\n                                                             sampleTime,1);\n                if (logInfo->xFinal == NULL)  goto ERROR_EXIT;\n            }\n        } else {                                          /* Structure Format */\n            if (rtliGetLogX(li)[0] != '\\0') {\n                logInfo->x = local_CreateStructLogVar(li, startTime, finalTime,\n                                                      stepSize, errStatus,\n                                                      rtliGetLogX(li), logTime,\n                                                      maxRows, decimation,\n                                                      sampleTime, xInfo, NULL);\n                if (logInfo->x == NULL) goto ERROR_EXIT;\n            }\n            if (rtliGetLogXFinal(li)[0] != '\\0') {\n                logInfo->xFinal = local_CreateStructLogVar(li, startTime, finalTime,\n                                                           stepSize, errStatus,\n                                                           rtliGetLogXFinal(li),\n                                                           logTime,1,decimation,\n                                                           sampleTime,xInfo,NULL);\n                if (logInfo->xFinal == NULL) goto ERROR_EXIT;\n            }\n        }\n    }\n\n    /* outputs */\n    *errStatus = rt_StartDataLoggingForOutput(li,startTime,finalTime,\n                                              stepSize,errStatus);\n    if (*errStatus != NULL)  goto ERROR_EXIT;\n\n    return(NULL); /* NORMAL_EXIT */\n\n ERROR_EXIT:\n    (void)fprintf(stderr, \"*** Errors occurred when starting data logging.\\n\");\n    if (*errStatus == NULL) {\n        *errStatus = rtMemAllocError;\n    }\n    if (logInfo) {\n        rt_DestroyLogVar(logInfo->logVarsList);\n        logInfo->logVarsList = NULL;\n        rt_DestroyStructLogVar(logInfo->structLogVarsList);\n        logInfo->structLogVarsList = NULL;\n        FREE(logInfo);\n        rtliSetLogInfo(li,NULL);\n    }\n    return(*errStatus);\n\n} /* end rt_StartDataLoggingWithStartTime */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StartDataLogging ===============================================\n * Abstract:\n */\nconst char_T *rt_StartDataLogging(RTWLogInfo   *li,\n                                         const real_T finalTime,\n                                         const real_T stepSize,\n                                         const char_T **errStatus)\n{\n    return rt_StartDataLoggingWithStartTime(li,\n                                            0.0,\n                                            finalTime,\n                                            stepSize,\n                                            errStatus);\n}\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n \n/* Function: rt_UpdateLogVar ===================================================\n * Abstract:\n *\tCalled to log data for a log variable.\n */\nvoid rt_UpdateLogVar(LogVar *var, const void *data, boolean_T isVarDims)\n{\n    size_t        elSize    = var->data.elSize;\n    const  char_T *cData    = data;\n    const  int_T  frameData = var->data.frameData;\n    const  int_T  frameSize = frameData ? (var->data.frameSize) : 1;\n    const  int_T  logWidth  = var->data.nCols;\n    BuiltInDTypeId dTypeID  = var->data.dTypeID;\n\n    size_t offset        = 0;\n    char_T *currRealRow  = NULL;\n    char_T *currImagRow  = NULL;\n    int_T  pointSize     = (int_T)((var->data.complex) ? rt_GetSizeofComplexType(dTypeID) : elSize);\n\n    int    i, j, k;\n\n    /* The following variables will be used for \n       logging variable-size signals */\n    const  int_T  nDims = var->data.nDims;\n    const  int_T  *dims = var->data.dims;\n    const  void   * const *currDimsPtr = NULL;\n    const  int_T  *currDimsSizePtr = NULL;\n\n    /* The following variables will be used for \n       logging \"valueDimensions\" field */\n    size_t offset_valDims   = 0;\n    char_T *currValDimsRow  = NULL;\n    size_t elSize_valDims   = sizeof(real_T);\n    real_T currentSigDims   = 0;\n    int_T  nRows_valDims    = 0;\n    int_T  logWidth_valDims = 0;\n\n    for (i = 0; i < frameSize; i++) {\n        if (++var->numHits % var->decimation) continue;\n        var->numHits = 0;\n\n        if (var->rowIdx == var->data.nRows) {\n            if (var->okayToRealloc == 1) {\n                rt_ReallocLogVar(var, isVarDims);\n            } else {\n                /* Circular buffer */\n                var->rowIdx = 0;\n                ++(var->wrapped); /* increment the wrap around counter */\n            }\n        }\n\n        if(isVarDims){\n            currDimsPtr = (const void * const *) var->valDims->currSigDims;\n            currDimsSizePtr = (const int_T*) var->valDims->currSigDimsSize;\n            logWidth_valDims = frameData ? 1 : var->valDims->nCols;\n            nRows_valDims = var->valDims->nRows;\n\n            var->strides[0] = 1;\n            var->currStrides[0] = 1;\n\n            for (k = 1; k < nDims; k++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[k-1]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+(k-1)));\n                    break;\n                }\n                var->strides[k] = var->strides[k-1] * dims[k-1];\n                var->currStrides[k] = var->currStrides[k-1] * currDimsVal;\n            }\n        }\n\n        offset       = (size_t)(elSize * var->rowIdx * logWidth);\n        currRealRow  = ((char_T*) (var->data.re)) + offset;\n        currImagRow  = (var->data.complex) ?\n                       ((char_T*) (var->data.im)) + offset :  NULL;\n\n        /* update logging data */\n        for (j = 0; j < logWidth; j++) {\n\n            boolean_T inRange = true;\n            int idx = j;\n\n            /* Check whether the currently logged value is in range or not.\n               For fixed-size signal logging, always inRange = true; idx = j;\n               For variable-size signal logging, use strides, coordinates\n               and current strides to decide whether the currently logged\n               data is in range or not and its location in the logging \n               matrix.\n             */\n            if(isVarDims){\n                int rem = j;\n                idx = 0;\n                for(k = nDims-1; k>=0; k--){\n                    int32_T currDimsVal=0;\n                    switch (currDimsSizePtr[k]) {\n                      case 1:\n                        currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+k));\n                        break;\n                      case 2:\n                        currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+k));\n                        break;\n                      case 4:\n                        currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+k));\n                        break;\n                    }\n                    var->coords[k] = rem / var->strides[k];\n                    if( var->coords[k] >= currDimsVal ){\n                        inRange = false;\n                        break;\n                    }\n                    rem = rem - var->coords[k] * var->strides[k];\n                }\n                if(inRange){\n                    idx = var->coords[0];\n                    for (k = 1; k < nDims; k++){\n                        idx += var->coords[k] * var->currStrides[k];\n                    }\n                }\n            }\n            \n            if (!var->data.dataTypeConvertInfo.conversionNeeded) {\n                /* NO  conversion needed\n                 */ \n                if (inRange) {\n                    /* If in range, fill in data */\n                    const char *cDataPoint = cData + (i+frameSize*idx) * pointSize;\n\n                    (void) memcpy(currRealRow, cDataPoint, elSize);\n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        (void) memcpy(currImagRow, cDataPoint + pointSize/2, elSize);\n                        currImagRow += elSize;\n                    }\n                } else {\n                    /* If out of range, fill in NaN or 0:\n                       1) For bool, int32, uint32, int16, uint16, etc,\n                          memset to zeros;\n                       2) For fixed-point data type, NaN conversion is not\n                          allowed, memset to zeros.\n                    */\n                    if (dTypeID == SS_DOUBLE) {\n                       ((real_T*)(currRealRow))[0] = rtNaN;\n                    } else if (dTypeID == SS_SINGLE){\n                        ((real32_T*)(currRealRow))[0] = rtNaNF;\n                    } else {\n                        (void) memset(currRealRow, 0, elSize);\n                    }\n                    \n                    currRealRow += elSize;\n                    if (var->data.complex) {\n                        /* For imaginary part, fill in 0 */\n                        (void) memset(currImagRow, 0, elSize);\n                        currImagRow += elSize;\n                    }\n                }\n            }\n            else\n            {\n                /* YES conversion needed\n                 */ \n                DTypeId dataTypeIdOriginal = \n                    var->data.dataTypeConvertInfo.dataTypeIdOriginal;\n                int_T DpSize = (int_T)((var->data.complex) ? \n                                       rt_GetSizeofComplexType(dataTypeIdOriginal) : \n                                       rt_GetSizeofDataType(dataTypeIdOriginal));\n\n                DTypeId dataTypeIdLoggingTo = \n                    var->data.dataTypeConvertInfo.dataTypeIdLoggingTo;\n\n                int bitsPerChunk = var->data.dataTypeConvertInfo.bitsPerChunk;\n                int numOfChunk =  var->data.dataTypeConvertInfo.numOfChunk;\n                unsigned int isSigned = var->data.dataTypeConvertInfo.isSigned;\n\n                double fracSlope = var->data.dataTypeConvertInfo.fracSlope;\n                int    fixedExp  = var->data.dataTypeConvertInfo.fixedExp;\n                double bias      = var->data.dataTypeConvertInfo.bias;\n\n                double curRealValue = -0.12345678987654;\n                double curImagValue = -0.12345678987654;\n\n                int_T adjIndexIfComplex = (var->data.complex) ? 2 : 1;\n\n                if(inRange){\n                    if(numOfChunk > 1)\n                    {\n                        /* For multiword */\n                        const char *pInData = (const char *)(cData);\n                        int dtSize = bitsPerChunk*numOfChunk/8;\n                        pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                        \n                        curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                       isSigned, fracSlope, fixedExp, bias);\n                        if (var->data.complex) {\n                            curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                           isSigned, fracSlope, fixedExp, bias);\n                        }\n                    }\n                    else\n                    {\n                        /* if in range, fill in data that is converted first */\n                        switch ( dataTypeIdOriginal )\n                        {\n                          case SS_DOUBLE:\n                            {\n                                const real_T *pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_SINGLE:\n                            {\n                                const real32_T *pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const real32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT8:\n                            {\n                                const int8_T *pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT8:\n                            {\n                                const uint8_T *pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint8_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT16:\n                            {\n                                const int16_T *pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT16:\n                            {\n                                const uint16_T *pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint16_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_INT32:\n                            {\n                                const int32_T *pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize);\n\n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const int32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_UINT32:\n                            {\n                                const uint32_T *pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize);\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    pInData = (const uint32_T *)(cData + (i+frameSize*idx)* DpSize + DpSize/2);\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          case SS_BOOLEAN:\n                            {\n                                const boolean_T *pInData = ((const boolean_T *)(cData));\n                                \n                                pInData += (i+frameSize*idx) * adjIndexIfComplex;\n                                \n                                curRealValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                if (var->data.complex) {\n                                    curImagValue = ldexp( fracSlope * (double)(*pInData), fixedExp ) + bias;\n                                }\n                            }\n                            break;\n                          default: \n                            {\n                                /* For biglong */\n                                const char *pInData = (const char *)(cData);\n                                int dtSize = bitsPerChunk*numOfChunk/8;\n                                pInData += ((i+frameSize*idx) * adjIndexIfComplex) * dtSize;\n                                \n                                curRealValue = rt_GetDblValueFromOverSizedData(pInData, bitsPerChunk, numOfChunk, \n                                                                               isSigned, fracSlope, fixedExp, bias);\n                                if (var->data.complex) {\n                                    curImagValue = rt_GetDblValueFromOverSizedData((pInData+dtSize), bitsPerChunk, numOfChunk, \n                                                                                   isSigned, fracSlope, fixedExp, bias);\n                                }\n                            }\n                            break;\n                        } /* -- end of switch -- */\n                    }\n                } else {\n                    /* if out of range, just fill NaN or 0 */\n                    if(dTypeID == SS_DOUBLE || dTypeID == SS_SINGLE){\n                        /* vijay 4/11/2013: DO NOT CALL ldexp() with NaN below as it causes \n                         * lcc-win64 to generate inf instead of NaN as output. \n                         * Just use rtNaN directly */\n                        curRealValue = rtNaN;\n                    }\n                    else{\n                        curRealValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                    if (var->data.complex) {\n                        /* fill 0 in imaginary part*/\n                        curImagValue = ldexp( 0, fixedExp ) + bias;\n                    }\n                }\n\n                switch ( dataTypeIdLoggingTo )\n                {\n                  case SS_DOUBLE:\n                    {\n                        *((real_T *)currRealRow) = (real_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real_T *)currImagRow) = (real_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_SINGLE:\n                    {\n                        *((real32_T *)currRealRow) = (real32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((real32_T *)currImagRow) = (real32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT8:\n                    {\n                        *((int8_T *)currRealRow) = (int8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int8_T *)currImagRow) = (int8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT8:\n                    {\n                        *((uint8_T *)currRealRow) = (uint8_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint8_T *)currImagRow) = (uint8_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT16:\n                    {\n                        *((int16_T *)currRealRow) = (int16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int16_T *)currImagRow) = (int16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT16:\n                    {\n                        *((uint16_T *)currRealRow) = (uint16_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint16_T *)currImagRow) = (uint16_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_INT32:\n                    {\n                        *((int32_T *)currRealRow) = (int32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((int32_T *)currImagRow) = (int32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_UINT32:\n                    {\n                        *((uint32_T *)currRealRow) = (uint32_T)curRealValue;\n\n                        if (var->data.complex) {\n\n                            *((uint32_T *)currImagRow) = (uint32_T)curImagValue;\n                        }\n                    }\n                    break;\n                  case SS_BOOLEAN:\n                    {\n                        *((boolean_T *)currRealRow) = (boolean_T)(curRealValue != 0.0);\n\n                        if (var->data.complex) {\n\n                            *((boolean_T *)currImagRow) = (boolean_T)(curImagValue != 0.0);\n                        }\n                    }\n                    break;\n                } /* -- end of switch -- */\n\n                currRealRow += elSize;\n                if (var->data.complex) {\n                    currImagRow += elSize;\n                }\n            }\n        }\n\n        if(isVarDims){ /* update \"valueDimensions\" field */\n            for(j = 0; j < logWidth_valDims; j ++){\n                int32_T currDimsVal=0;\n                switch (currDimsSizePtr[j]) {\n                  case 1:\n                    currDimsVal = (**(((const uint8_T * const *) currDimsPtr)+j));\n                    break;\n                  case 2:\n                    currDimsVal = (**(((const uint16_T * const *) currDimsPtr)+j));\n                    break;\n                  case 4:\n                    currDimsVal = (**(((const uint32_T * const *) currDimsPtr)+j));\n                    break;\n                }\n                offset_valDims  = (size_t)(elSize_valDims *( var->rowIdx + nRows_valDims * j));\n                currValDimsRow  = ((char_T*) (var->valDims->dimsData)) + offset_valDims;\n\n                /* convert int_T to real_T */\n                currentSigDims = (real_T) currDimsVal;\n                (void) memcpy(currValDimsRow, &currentSigDims, elSize_valDims);\n                currValDimsRow += elSize_valDims;\n            }\n        }\n        \n        ++var->rowIdx;\n    }\n\n    return;\n\n} /* end rt_UpdateLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n \n \n/* Function: rt_UpdateStructLogVar =============================================\n * Abstract:\n *      Called to log data for a structure log variable.\n */\nvoid rt_UpdateStructLogVar(StructLogVar *var, const real_T *t, const void *data)\n{\n    LogVar       *values = var->signals.values;\n    const char_T *signal = data;\n    boolean_T *isVarDims = var->signals.isVarDims;\n    int i = 0;\n\n    /* time */\n    if (var->logTime) {\n        rt_UpdateLogVar(var->time, t, false);\n    }\n\n    /* signals */\n    while (values) {\n        size_t elSz = values->data.elSize;\n\n        rt_UpdateLogVar(values, signal, isVarDims[i]);\n\n        if (values->data.complex) elSz *= 2;\n        signal += elSz * values->data.nCols;\n\n        values = values->next;\n        i++;\n    }\n\n} /* end rt_UpdateStructLogVar */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\n * g1614989:Refactoring this function to accept number of elements\n *          instead of accepting signalInfo and index.\n */\nvoid* rt_getTempMemory(LogVar* var, int_T numEls);\n\nvoid* rt_getTempMemory(LogVar* var, int_T numEls)\n{\n    size_t elSize  = var->data.elSize;\n    size_t cmplxMult = var->data.complex ? 2 : 1;\n    /*\n     * g1689750: With multiword support for mat file logging in row major array layout, we need to allocate more space to\n     * store the data when the transpose operation is being performed. The additional space is required to store multiple\n     * chunks that each multi word contains.\n     */\n    size_t numOfChunks = var->data.dataTypeConvertInfo.conversionNeeded ? var->data.dataTypeConvertInfo.numOfChunk : 1;\n    void* tempMemory = malloc(elSize * numEls * cmplxMult * numOfChunks);\n    return tempMemory;\n}\n\n/*\n* g1614989:This function processes the signal data if a function pointer is available and then logs the data.\n*          If a function pointer is not present, signal data is logged without any processing.\n*          The idx parameter specifies which information from the SignalInfo to be used for processing and logging.\n*          When idx is -1, the provided signal info is to be used for processing and logging the data.\n*/\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogDataWithIndex(const RTWLogSignalInfo *signalInfo, int_T idx, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    RTWPreprocessingFcnPtr preprocessingPtr = NULL;\n    int_T numEls = -1;\n    if (idx == -1) {\n        preprocessingPtr = *(signalInfo->preprocessingPtrs);\n        numEls = *(signalInfo->numCols);\n    }\n    else {\n        preprocessingPtr = signalInfo->preprocessingPtrs[idx];\n        numEls = signalInfo->numCols[idx];\n    }\n\n    if (preprocessingPtr != NULL) {\n        void* curData = rt_getTempMemory(val, numEls);\n        preprocessingPtr(curData, data);\n        rt_UpdateLogVar(val, curData, isVarDims);\n        free(curData);\n    }\n    else {\n        rt_UpdateLogVar(val, data, isVarDims);\n    }\n}\n\n/*\n* g1614989:This function is called when each signal has a specific RTWLogSignalInfo structure defined.\n*/\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims);\n\nvoid rt_preProcessAndLogData(RTWLogSignalInfo signalInfo, LogVar* val, const void * data, boolean_T isVarDims)\n{\n    rt_preProcessAndLogDataWithIndex(&signalInfo, -1, val, data, isVarDims);\n}\n \n/* Function: rt_UpdateTXYLogVars ===============================================\n * Abstract:\n *\tUpdate the xFinal,T,X,Y variables that are being logged.\n */\nconst char_T *rt_UpdateTXYLogVars(RTWLogInfo *li, time_T *tPtr)\n{\n    return rt_UpdateTXXFYLogVars(li, tPtr, true);\n}\n \n/* Function: rt_UpdateTXXFYLogVars =============================================\n * Abstract:\n *\tUpdate xFinal and/or the T,X,Y variables that are being logged\n */\nconst char_T *rt_UpdateTXXFYLogVars(RTWLogInfo *li, time_T *tPtr, boolean_T updateTXY)\n{\n    LogInfo *logInfo     = rtliGetLogInfo(li);\n    int_T   matrixFormat = (rtliGetLogFormat(li) == 0);\n    const RTWLogSignalInfo* yInfo = rtliGetLogYSignalInfo(li);\n    const RTWLogSignalInfo* xInfo = rtliGetLogXSignalInfo(li);\n\n    /* time */\n    if (logInfo->t != NULL && updateTXY) {\n        rt_UpdateLogVar(logInfo->t, tPtr, false);\n    }\n\n    if (matrixFormat) {                                      /* MATRIX_FORMAT */\n        /* states */\n        if (logInfo->x != NULL || logInfo->xFinal != NULL) {\n            int8_T**               segAddr     = _rtliGetLogXSignalPtrs(li);\n            const int_T            *segLengths = xInfo->numCols;\n            int_T                  nSegments   = xInfo->numSignals;\n            RTWPreprocessingFcnPtr* preprocessingPtrs = xInfo->preprocessingPtrs;\n\n            if (logInfo->x != NULL && updateTXY) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->x, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n            if (logInfo->xFinal != NULL) {\n                const char_T *errorMessage = rt_UpdateLogVarWithDiscontiguousData(logInfo->xFinal, segAddr,\n                                                                                  segLengths, nSegments, \n                                                                                  preprocessingPtrs);\n                if (errorMessage != NULL) return(errorMessage);\n            }\n        }\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            LogVar **var = (LogVar**) (logInfo->y);\n            int_T  ny    = logInfo->ny;\n            int_T  i;\n            int    yIdx;\n            LogSignalPtrsType data = rtliGetLogYSignalPtrs(li);\n\n            for (i = 0, yIdx = 0; i < ny; i++) {\n                if (data[i] != NULL) {\n                    /* \n                       When outputs are logged in Matrix format, \n                       no variable-size signal logging is allowed.\n                    */\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *          Function pointer is now identified by using \n                     *          Y Signal Info instead of iterating over pre-processing \n                     *          function pointers.\n                    */ \n                    rt_preProcessAndLogData(yInfo[yIdx], var[yIdx], data[i], false);\n                    yIdx++;\n                }\n            }\n        }\n    } else {                                              /* STRUCTURE_FORMAT */\n        /* states */\n        if (logInfo->x != NULL && updateTXY) {\n            int_T             i;\n            StructLogVar      *var = logInfo->x;\n            LogVar            *val = var->signals.values;\n            int_T             nsig = var->signals.numSignals;\n            LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n\n            /* time */\n            if (var->logTime) {\n                rt_UpdateLogVar(var->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n\n        /* outputs */\n        if (logInfo->y != NULL && updateTXY) {\n            int_T             ny      = logInfo->ny;\n            LogSignalPtrsType data    = rtliGetLogYSignalPtrs(li);\n            StructLogVar      **var   = (StructLogVar**) (logInfo->y);\n\n            if (ny == 1) {\n                int_T  i;\n                int_T  dataIdx;\n                LogVar *val = var[0]->signals.values;\n                int_T  nsig = var[0]->signals.numSignals;\n                boolean_T   *isVarDims = var[0]->signals.isVarDims;\n\n                /* time */\n                if (var[0]->logTime) {\n                    rt_UpdateLogVar(var[0]->time, tPtr, false);\n                }\n\n                /* signals */\n                for (i = 0, dataIdx = 0; i < nsig; i++) {                    \n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogDataWithIndex(yInfo, i, val, data[dataIdx], isVarDims[i]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            } else {\n                int_T  i;\n                int_T  dataIdx;\n\n                for (i = 0, dataIdx = 0; i < ny && var[i] != NULL; i++) {\n                    LogVar *val = var[i]->signals.values;\n                    boolean_T   *isVarDims = var[i]->signals.isVarDims;\n\n                    /* time */\n                    if (var[i]->logTime) {\n                        rt_UpdateLogVar(var[i]->time, tPtr, false);\n                    }\n\n                    /* signals */\n                    while (data[dataIdx] == NULL) {\n                        ++dataIdx;\n                    }\n                    /* g1614989:Code refactoring and fix for logging issue.\n                     *         Function pointer is now identified by using \n                     *         Y Signal Info instead of iterating over pre-processing \n                     *         function pointers.\n                     */\n                    rt_preProcessAndLogData(yInfo[i], val, data[dataIdx], isVarDims[0]);\n                    dataIdx++;\n                    val = val->next;\n                }\n            }\n        }\n        /* final state */\n        if (logInfo->xFinal != NULL) {\n            StructLogVar *xf  = logInfo->xFinal;\n            LogVar       *val = xf->signals.values;\n            int_T        nsig = xf->signals.numSignals;\n            int_T        i;\n\n            /* time */\n            if (xf->logTime) {\n                rt_UpdateLogVar(xf->time, tPtr, false);\n            }\n\n            /* signals */\n            for (i = 0; i < nsig; i++) {\n                LogSignalPtrsType data = rtliGetLogXSignalPtrs(li);\n                /* g1614989:Code refactoring and fix for logging issue.\n                 *         Function pointer is now identified by using \n                 *         X Signal Info instead of iterating over pre-processing \n                 *         function pointers.\n                 */\n                rt_preProcessAndLogDataWithIndex(xInfo, i, val, data[i], false);\n                val = val->next;\n            }\n        }\n    }\n    return(NULL);\n} /* end rt_UpdateTXXFYLogVars */\n\n\n#ifdef __cplusplus\n}\n#endif\n          \n\n          \n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLoggingImpl =======================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLoggingImpl(const char_T *file, RTWLogInfo *li, boolean_T isRaccel)\n{\n    FILE          *fptr;\n    LogInfo       *logInfo     = (LogInfo*) rtliGetLogInfo(li);\n    LogVar        *var         = logInfo->logVarsList;\n    StructLogVar  *svar        = logInfo->structLogVarsList;\n    /* At this time, verbose is only needed if running rapid accelerator\n     * simulations. */\n    int           verbose      = isRaccel ? 0: 1;\n\n    boolean_T     emptyFile    = 1; /* assume */\n    boolean_T     errFlag      = 0;\n    const char_T  *msg;\n\n    /*******************************\n     * Create MAT file with header *\n     *******************************/\n    if ((fptr=fopen(file,\"w+b\")) == NULL) {\n        (void)fprintf(stderr,\"*** Error opening %s\",file);\n        goto EXIT_POINT;\n    }\n    if (rt_WriteMat5FileHeader(fptr)) {\n        (void)fprintf(stderr,\"*** Error writing to %s\",file);\n        goto EXIT_POINT;\n    }\n\n    /**************************************************\n     * First log all the variables in the LogVar list *\n     **************************************************/\n    while (var != NULL) {\n        if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n            (void)fprintf(stderr,\"*** Error writing %s due to: %s\\n\",file,msg);\n            errFlag = 1;\n            break;\n        }\n        if (var->nDataPoints > 0 || isRaccel) {\n            MatItem item;\n\n            item.type   = matMATRIX;\n            item.nbytes = 0; /* not yet known */\n            item.data   = &(var->data);\n            if (rt_WriteItemToMatFile(fptr, &item, MATRIX_ITEM)) {\n                (void)fprintf(stderr,\"*** Error writing log variable %s to \"\n                              \"file %s\",var->data.name, file);\n                errFlag = 1;\n                break;\n            }\n            emptyFile = 0;\n        }\n        var = var->next;\n    }\n    /* free up some memory by destroying the log var list here */\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n\n    /*******************************************************\n     * Next log all the variables in the StructLogVar list *\n     *******************************************************/\n    while (svar != NULL) {\n        MatItem item;\n\n        if (svar->logTime) {\n            var = svar->time;\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n        }\n\n        var = svar->signals.values;\n        while (var) {\n            if ( (msg = rt_FixupLogVar(var,verbose)) != NULL ) {\n                (void)fprintf(stderr, \"*** Error writing %s due to: %s\\n\",\n                              file, msg);\n                errFlag = 1;\n                break;\n            }\n            var = var->next;\n        }\n\n        item.type   = matMATRIX;\n        item.nbytes = 0; /* not yet known */\n        item.data   = svar;\n\n        if (rt_WriteItemToMatFile(fptr, &item, STRUCT_LOG_VAR_ITEM)) {\n            (void)fprintf(stderr,\"*** Error writing structure log variable \"\n                          \"%s to file %s\",svar->name, file);\n            errFlag = 1;\n            break;\n        }\n        emptyFile = 0;\n\n        svar = svar->next;\n    }\n\n    /******************\n     * Close the file *\n     ******************/\n    (void)fclose(fptr);\n    if (emptyFile || errFlag) {\n        (void)remove(file);\n    } else {\n        if( verbose ) {\n            (void)printf(\"** created %s **\\n\\n\", file);\n        }\n    }\n\n EXIT_POINT:\n\n    /****************\n     * free logInfo *\n     ****************/\n    rt_DestroyLogVar(logInfo->logVarsList);\n    logInfo->logVarsList = NULL;\n    rt_DestroyStructLogVar(logInfo->structLogVarsList);\n    logInfo->structLogVarsList = NULL;\n    FREE(logInfo->y);\n    logInfo->y = NULL;\n    FREE(logInfo);\n    rtliSetLogInfo(li,NULL);\n\n} /* end rt_StopDataLoggingImpl */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Function: rt_StopDataLogging ================================================\n * Abstract:\n *\tWrite logged data to model.mat and free memory.\n */\nvoid rt_StopDataLogging(const char_T *file, RTWLogInfo *li)\n{\n    rt_StopDataLoggingImpl(file,li,false);\n\n} /* end rt_StopDataLogging */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#else /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n#define rt_StartDataLogging(li, finalTime, stepSize, errStatus) NULL /* do nothing */\n#define rt_UpdateTXYLogVars(li, tPtr) NULL /* do nothing */\n#define rt_StopDataLogging(file, li) { (void(file)); } /* use file quiet unused macro warning */ /* do nothing */\n\n#endif /*!defined(MAT_FILE) || (defined(MAT_FILE) && MAT_FILE == 1)*/\n\n\n\n/* [eof] rt_logging.c */\n\n/* LocalWords:  Tfinal MAXNAM nonfinite DType PWS RSim Fixup logvar DDEFAULT th\n * LocalWords:  curr Realloc realloc inp biglong vijay ldexp TXY eof XFinal th\n * LocalWords:  TXXFY NULL typedefs ret polyspace NUL\n */\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};